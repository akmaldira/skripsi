/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 2637.0, "series": [{"data": [[0.0, 191.0], [0.1, 237.0], [0.2, 237.0], [0.3, 237.0], [0.4, 248.0], [0.5, 259.0], [0.6, 274.0], [0.7, 285.0], [0.8, 294.0], [0.9, 304.0], [1.0, 308.0], [1.1, 309.0], [1.2, 309.0], [1.3, 312.0], [1.4, 318.0], [1.5, 321.0], [1.6, 324.0], [1.7, 324.0], [1.8, 325.0], [1.9, 329.0], [2.0, 332.0], [2.1, 336.0], [2.2, 338.0], [2.3, 339.0], [2.4, 340.0], [2.5, 340.0], [2.6, 342.0], [2.7, 343.0], [2.8, 343.0], [2.9, 344.0], [3.0, 345.0], [3.1, 346.0], [3.2, 348.0], [3.3, 349.0], [3.4, 349.0], [3.5, 350.0], [3.6, 351.0], [3.7, 354.0], [3.8, 357.0], [3.9, 357.0], [4.0, 357.0], [4.1, 358.0], [4.2, 358.0], [4.3, 358.0], [4.4, 359.0], [4.5, 359.0], [4.6, 360.0], [4.7, 360.0], [4.8, 363.0], [4.9, 364.0], [5.0, 364.0], [5.1, 365.0], [5.2, 365.0], [5.3, 365.0], [5.4, 365.0], [5.5, 366.0], [5.6, 367.0], [5.7, 369.0], [5.8, 370.0], [5.9, 370.0], [6.0, 370.0], [6.1, 371.0], [6.2, 371.0], [6.3, 373.0], [6.4, 373.0], [6.5, 375.0], [6.6, 376.0], [6.7, 377.0], [6.8, 377.0], [6.9, 378.0], [7.0, 378.0], [7.1, 379.0], [7.2, 379.0], [7.3, 380.0], [7.4, 381.0], [7.5, 381.0], [7.6, 383.0], [7.7, 384.0], [7.8, 384.0], [7.9, 385.0], [8.0, 386.0], [8.1, 386.0], [8.2, 387.0], [8.3, 388.0], [8.4, 388.0], [8.5, 388.0], [8.6, 389.0], [8.7, 389.0], [8.8, 390.0], [8.9, 390.0], [9.0, 391.0], [9.1, 391.0], [9.2, 392.0], [9.3, 393.0], [9.4, 393.0], [9.5, 393.0], [9.6, 394.0], [9.7, 395.0], [9.8, 395.0], [9.9, 395.0], [10.0, 395.0], [10.1, 395.0], [10.2, 396.0], [10.3, 396.0], [10.4, 396.0], [10.5, 396.0], [10.6, 397.0], [10.7, 397.0], [10.8, 398.0], [10.9, 398.0], [11.0, 398.0], [11.1, 398.0], [11.2, 399.0], [11.3, 399.0], [11.4, 400.0], [11.5, 401.0], [11.6, 402.0], [11.7, 402.0], [11.8, 402.0], [11.9, 402.0], [12.0, 403.0], [12.1, 403.0], [12.2, 403.0], [12.3, 404.0], [12.4, 404.0], [12.5, 405.0], [12.6, 405.0], [12.7, 405.0], [12.8, 406.0], [12.9, 407.0], [13.0, 407.0], [13.1, 407.0], [13.2, 407.0], [13.3, 407.0], [13.4, 408.0], [13.5, 408.0], [13.6, 409.0], [13.7, 410.0], [13.8, 411.0], [13.9, 411.0], [14.0, 412.0], [14.1, 413.0], [14.2, 413.0], [14.3, 413.0], [14.4, 413.0], [14.5, 414.0], [14.6, 415.0], [14.7, 415.0], [14.8, 417.0], [14.9, 418.0], [15.0, 419.0], [15.1, 421.0], [15.2, 421.0], [15.3, 422.0], [15.4, 422.0], [15.5, 422.0], [15.6, 424.0], [15.7, 426.0], [15.8, 427.0], [15.9, 427.0], [16.0, 428.0], [16.1, 428.0], [16.2, 429.0], [16.3, 430.0], [16.4, 431.0], [16.5, 433.0], [16.6, 434.0], [16.7, 435.0], [16.8, 437.0], [16.9, 437.0], [17.0, 441.0], [17.1, 441.0], [17.2, 442.0], [17.3, 443.0], [17.4, 443.0], [17.5, 444.0], [17.6, 448.0], [17.7, 448.0], [17.8, 450.0], [17.9, 453.0], [18.0, 455.0], [18.1, 458.0], [18.2, 460.0], [18.3, 462.0], [18.4, 463.0], [18.5, 466.0], [18.6, 467.0], [18.7, 469.0], [18.8, 469.0], [18.9, 470.0], [19.0, 473.0], [19.1, 475.0], [19.2, 478.0], [19.3, 479.0], [19.4, 480.0], [19.5, 484.0], [19.6, 484.0], [19.7, 485.0], [19.8, 485.0], [19.9, 487.0], [20.0, 489.0], [20.1, 489.0], [20.2, 490.0], [20.3, 491.0], [20.4, 492.0], [20.5, 503.0], [20.6, 512.0], [20.7, 516.0], [20.8, 519.0], [20.9, 521.0], [21.0, 527.0], [21.1, 527.0], [21.2, 532.0], [21.3, 535.0], [21.4, 538.0], [21.5, 540.0], [21.6, 540.0], [21.7, 542.0], [21.8, 547.0], [21.9, 554.0], [22.0, 555.0], [22.1, 559.0], [22.2, 562.0], [22.3, 563.0], [22.4, 566.0], [22.5, 569.0], [22.6, 570.0], [22.7, 572.0], [22.8, 573.0], [22.9, 586.0], [23.0, 618.0], [23.1, 635.0], [23.2, 692.0], [23.3, 694.0], [23.4, 697.0], [23.5, 699.0], [23.6, 707.0], [23.7, 708.0], [23.8, 711.0], [23.9, 715.0], [24.0, 716.0], [24.1, 719.0], [24.2, 719.0], [24.3, 725.0], [24.4, 726.0], [24.5, 728.0], [24.6, 729.0], [24.7, 729.0], [24.8, 731.0], [24.9, 732.0], [25.0, 732.0], [25.1, 732.0], [25.2, 734.0], [25.3, 734.0], [25.4, 735.0], [25.5, 735.0], [25.6, 737.0], [25.7, 738.0], [25.8, 738.0], [25.9, 739.0], [26.0, 739.0], [26.1, 739.0], [26.2, 739.0], [26.3, 739.0], [26.4, 740.0], [26.5, 740.0], [26.6, 742.0], [26.7, 747.0], [26.8, 748.0], [26.9, 748.0], [27.0, 751.0], [27.1, 751.0], [27.2, 752.0], [27.3, 754.0], [27.4, 755.0], [27.5, 756.0], [27.6, 756.0], [27.7, 757.0], [27.8, 758.0], [27.9, 758.0], [28.0, 758.0], [28.1, 764.0], [28.2, 764.0], [28.3, 764.0], [28.4, 765.0], [28.5, 766.0], [28.6, 767.0], [28.7, 769.0], [28.8, 770.0], [28.9, 770.0], [29.0, 770.0], [29.1, 772.0], [29.2, 773.0], [29.3, 774.0], [29.4, 774.0], [29.5, 775.0], [29.6, 776.0], [29.7, 777.0], [29.8, 777.0], [29.9, 777.0], [30.0, 778.0], [30.1, 783.0], [30.2, 785.0], [30.3, 786.0], [30.4, 787.0], [30.5, 788.0], [30.6, 789.0], [30.7, 793.0], [30.8, 794.0], [30.9, 795.0], [31.0, 796.0], [31.1, 798.0], [31.2, 798.0], [31.3, 799.0], [31.4, 802.0], [31.5, 803.0], [31.6, 808.0], [31.7, 809.0], [31.8, 811.0], [31.9, 813.0], [32.0, 827.0], [32.1, 828.0], [32.2, 835.0], [32.3, 847.0], [32.4, 864.0], [32.5, 882.0], [32.6, 886.0], [32.7, 900.0], [32.8, 903.0], [32.9, 914.0], [33.0, 916.0], [33.1, 920.0], [33.2, 920.0], [33.3, 921.0], [33.4, 921.0], [33.5, 923.0], [33.6, 928.0], [33.7, 930.0], [33.8, 930.0], [33.9, 931.0], [34.0, 932.0], [34.1, 934.0], [34.2, 936.0], [34.3, 938.0], [34.4, 938.0], [34.5, 942.0], [34.6, 943.0], [34.7, 945.0], [34.8, 945.0], [34.9, 950.0], [35.0, 951.0], [35.1, 955.0], [35.2, 956.0], [35.3, 957.0], [35.4, 959.0], [35.5, 959.0], [35.6, 960.0], [35.7, 962.0], [35.8, 963.0], [35.9, 964.0], [36.0, 966.0], [36.1, 969.0], [36.2, 969.0], [36.3, 969.0], [36.4, 970.0], [36.5, 971.0], [36.6, 972.0], [36.7, 972.0], [36.8, 972.0], [36.9, 972.0], [37.0, 973.0], [37.1, 973.0], [37.2, 974.0], [37.3, 975.0], [37.4, 977.0], [37.5, 977.0], [37.6, 978.0], [37.7, 980.0], [37.8, 982.0], [37.9, 982.0], [38.0, 983.0], [38.1, 983.0], [38.2, 984.0], [38.3, 986.0], [38.4, 994.0], [38.5, 994.0], [38.6, 994.0], [38.7, 995.0], [38.8, 995.0], [38.9, 995.0], [39.0, 996.0], [39.1, 998.0], [39.2, 998.0], [39.3, 1001.0], [39.4, 1002.0], [39.5, 1002.0], [39.6, 1003.0], [39.7, 1003.0], [39.8, 1004.0], [39.9, 1004.0], [40.0, 1004.0], [40.1, 1005.0], [40.2, 1005.0], [40.3, 1006.0], [40.4, 1006.0], [40.5, 1007.0], [40.6, 1007.0], [40.7, 1009.0], [40.8, 1009.0], [40.9, 1010.0], [41.0, 1011.0], [41.1, 1012.0], [41.2, 1013.0], [41.3, 1013.0], [41.4, 1013.0], [41.5, 1018.0], [41.6, 1018.0], [41.7, 1019.0], [41.8, 1019.0], [41.9, 1021.0], [42.0, 1022.0], [42.1, 1022.0], [42.2, 1023.0], [42.3, 1023.0], [42.4, 1023.0], [42.5, 1023.0], [42.6, 1024.0], [42.7, 1024.0], [42.8, 1026.0], [42.9, 1027.0], [43.0, 1027.0], [43.1, 1029.0], [43.2, 1029.0], [43.3, 1029.0], [43.4, 1030.0], [43.5, 1030.0], [43.6, 1030.0], [43.7, 1031.0], [43.8, 1032.0], [43.9, 1032.0], [44.0, 1032.0], [44.1, 1032.0], [44.2, 1035.0], [44.3, 1035.0], [44.4, 1035.0], [44.5, 1035.0], [44.6, 1037.0], [44.7, 1037.0], [44.8, 1038.0], [44.9, 1038.0], [45.0, 1038.0], [45.1, 1038.0], [45.2, 1038.0], [45.3, 1039.0], [45.4, 1039.0], [45.5, 1039.0], [45.6, 1040.0], [45.7, 1041.0], [45.8, 1042.0], [45.9, 1042.0], [46.0, 1043.0], [46.1, 1044.0], [46.2, 1044.0], [46.3, 1045.0], [46.4, 1045.0], [46.5, 1045.0], [46.6, 1046.0], [46.7, 1046.0], [46.8, 1046.0], [46.9, 1046.0], [47.0, 1046.0], [47.1, 1047.0], [47.2, 1047.0], [47.3, 1049.0], [47.4, 1049.0], [47.5, 1050.0], [47.6, 1050.0], [47.7, 1052.0], [47.8, 1052.0], [47.9, 1053.0], [48.0, 1054.0], [48.1, 1054.0], [48.2, 1056.0], [48.3, 1056.0], [48.4, 1057.0], [48.5, 1057.0], [48.6, 1059.0], [48.7, 1060.0], [48.8, 1060.0], [48.9, 1062.0], [49.0, 1062.0], [49.1, 1063.0], [49.2, 1063.0], [49.3, 1063.0], [49.4, 1065.0], [49.5, 1066.0], [49.6, 1066.0], [49.7, 1066.0], [49.8, 1066.0], [49.9, 1067.0], [50.0, 1068.0], [50.1, 1069.0], [50.2, 1069.0], [50.3, 1070.0], [50.4, 1070.0], [50.5, 1070.0], [50.6, 1071.0], [50.7, 1072.0], [50.8, 1074.0], [50.9, 1075.0], [51.0, 1075.0], [51.1, 1075.0], [51.2, 1076.0], [51.3, 1077.0], [51.4, 1077.0], [51.5, 1084.0], [51.6, 1086.0], [51.7, 1089.0], [51.8, 1089.0], [51.9, 1090.0], [52.0, 1090.0], [52.1, 1090.0], [52.2, 1091.0], [52.3, 1091.0], [52.4, 1091.0], [52.5, 1093.0], [52.6, 1093.0], [52.7, 1093.0], [52.8, 1093.0], [52.9, 1095.0], [53.0, 1095.0], [53.1, 1097.0], [53.2, 1097.0], [53.3, 1098.0], [53.4, 1098.0], [53.5, 1100.0], [53.6, 1100.0], [53.7, 1101.0], [53.8, 1101.0], [53.9, 1101.0], [54.0, 1103.0], [54.1, 1103.0], [54.2, 1104.0], [54.3, 1104.0], [54.4, 1105.0], [54.5, 1105.0], [54.6, 1106.0], [54.7, 1107.0], [54.8, 1107.0], [54.9, 1110.0], [55.0, 1110.0], [55.1, 1113.0], [55.2, 1114.0], [55.3, 1114.0], [55.4, 1117.0], [55.5, 1117.0], [55.6, 1118.0], [55.7, 1119.0], [55.8, 1119.0], [55.9, 1119.0], [56.0, 1121.0], [56.1, 1121.0], [56.2, 1122.0], [56.3, 1124.0], [56.4, 1125.0], [56.5, 1127.0], [56.6, 1128.0], [56.7, 1129.0], [56.8, 1129.0], [56.9, 1129.0], [57.0, 1129.0], [57.1, 1130.0], [57.2, 1130.0], [57.3, 1130.0], [57.4, 1130.0], [57.5, 1130.0], [57.6, 1133.0], [57.7, 1133.0], [57.8, 1134.0], [57.9, 1136.0], [58.0, 1137.0], [58.1, 1137.0], [58.2, 1137.0], [58.3, 1137.0], [58.4, 1138.0], [58.5, 1139.0], [58.6, 1139.0], [58.7, 1140.0], [58.8, 1140.0], [58.9, 1142.0], [59.0, 1142.0], [59.1, 1143.0], [59.2, 1148.0], [59.3, 1149.0], [59.4, 1151.0], [59.5, 1151.0], [59.6, 1151.0], [59.7, 1151.0], [59.8, 1152.0], [59.9, 1152.0], [60.0, 1153.0], [60.1, 1157.0], [60.2, 1159.0], [60.3, 1161.0], [60.4, 1161.0], [60.5, 1163.0], [60.6, 1166.0], [60.7, 1167.0], [60.8, 1167.0], [60.9, 1168.0], [61.0, 1168.0], [61.1, 1170.0], [61.2, 1172.0], [61.3, 1173.0], [61.4, 1178.0], [61.5, 1178.0], [61.6, 1179.0], [61.7, 1180.0], [61.8, 1180.0], [61.9, 1181.0], [62.0, 1182.0], [62.1, 1184.0], [62.2, 1184.0], [62.3, 1187.0], [62.4, 1188.0], [62.5, 1188.0], [62.6, 1188.0], [62.7, 1191.0], [62.8, 1192.0], [62.9, 1193.0], [63.0, 1193.0], [63.1, 1194.0], [63.2, 1194.0], [63.3, 1195.0], [63.4, 1198.0], [63.5, 1198.0], [63.6, 1200.0], [63.7, 1200.0], [63.8, 1202.0], [63.9, 1202.0], [64.0, 1202.0], [64.1, 1204.0], [64.2, 1207.0], [64.3, 1208.0], [64.4, 1211.0], [64.5, 1213.0], [64.6, 1214.0], [64.7, 1215.0], [64.8, 1215.0], [64.9, 1216.0], [65.0, 1217.0], [65.1, 1219.0], [65.2, 1222.0], [65.3, 1223.0], [65.4, 1225.0], [65.5, 1225.0], [65.6, 1228.0], [65.7, 1228.0], [65.8, 1235.0], [65.9, 1238.0], [66.0, 1239.0], [66.1, 1240.0], [66.2, 1241.0], [66.3, 1244.0], [66.4, 1248.0], [66.5, 1250.0], [66.6, 1251.0], [66.7, 1252.0], [66.8, 1256.0], [66.9, 1260.0], [67.0, 1260.0], [67.1, 1260.0], [67.2, 1260.0], [67.3, 1262.0], [67.4, 1265.0], [67.5, 1271.0], [67.6, 1282.0], [67.7, 1285.0], [67.8, 1285.0], [67.9, 1287.0], [68.0, 1292.0], [68.1, 1292.0], [68.2, 1293.0], [68.3, 1294.0], [68.4, 1295.0], [68.5, 1296.0], [68.6, 1298.0], [68.7, 1298.0], [68.8, 1301.0], [68.9, 1306.0], [69.0, 1307.0], [69.1, 1307.0], [69.2, 1308.0], [69.3, 1308.0], [69.4, 1308.0], [69.5, 1309.0], [69.6, 1309.0], [69.7, 1310.0], [69.8, 1311.0], [69.9, 1312.0], [70.0, 1313.0], [70.1, 1315.0], [70.2, 1316.0], [70.3, 1318.0], [70.4, 1319.0], [70.5, 1321.0], [70.6, 1321.0], [70.7, 1323.0], [70.8, 1323.0], [70.9, 1325.0], [71.0, 1325.0], [71.1, 1327.0], [71.2, 1330.0], [71.3, 1330.0], [71.4, 1331.0], [71.5, 1331.0], [71.6, 1331.0], [71.7, 1333.0], [71.8, 1334.0], [71.9, 1336.0], [72.0, 1336.0], [72.1, 1336.0], [72.2, 1337.0], [72.3, 1338.0], [72.4, 1340.0], [72.5, 1340.0], [72.6, 1340.0], [72.7, 1342.0], [72.8, 1342.0], [72.9, 1344.0], [73.0, 1344.0], [73.1, 1344.0], [73.2, 1346.0], [73.3, 1349.0], [73.4, 1350.0], [73.5, 1351.0], [73.6, 1352.0], [73.7, 1352.0], [73.8, 1353.0], [73.9, 1353.0], [74.0, 1354.0], [74.1, 1355.0], [74.2, 1355.0], [74.3, 1358.0], [74.4, 1361.0], [74.5, 1364.0], [74.6, 1366.0], [74.7, 1366.0], [74.8, 1367.0], [74.9, 1367.0], [75.0, 1367.0], [75.1, 1369.0], [75.2, 1370.0], [75.3, 1371.0], [75.4, 1371.0], [75.5, 1372.0], [75.6, 1377.0], [75.7, 1377.0], [75.8, 1385.0], [75.9, 1385.0], [76.0, 1386.0], [76.1, 1390.0], [76.2, 1390.0], [76.3, 1391.0], [76.4, 1391.0], [76.5, 1391.0], [76.6, 1392.0], [76.7, 1392.0], [76.8, 1393.0], [76.9, 1397.0], [77.0, 1403.0], [77.1, 1406.0], [77.2, 1413.0], [77.3, 1415.0], [77.4, 1416.0], [77.5, 1420.0], [77.6, 1424.0], [77.7, 1424.0], [77.8, 1425.0], [77.9, 1431.0], [78.0, 1437.0], [78.1, 1445.0], [78.2, 1465.0], [78.3, 1471.0], [78.4, 1472.0], [78.5, 1472.0], [78.6, 1476.0], [78.7, 1499.0], [78.8, 1499.0], [78.9, 1506.0], [79.0, 1515.0], [79.1, 1519.0], [79.2, 1520.0], [79.3, 1522.0], [79.4, 1523.0], [79.5, 1527.0], [79.6, 1529.0], [79.7, 1534.0], [79.8, 1535.0], [79.9, 1549.0], [80.0, 1553.0], [80.1, 1553.0], [80.2, 1554.0], [80.3, 1559.0], [80.4, 1561.0], [80.5, 1563.0], [80.6, 1563.0], [80.7, 1565.0], [80.8, 1567.0], [80.9, 1570.0], [81.0, 1570.0], [81.1, 1570.0], [81.2, 1572.0], [81.3, 1573.0], [81.4, 1574.0], [81.5, 1575.0], [81.6, 1578.0], [81.7, 1579.0], [81.8, 1579.0], [81.9, 1580.0], [82.0, 1584.0], [82.1, 1584.0], [82.2, 1585.0], [82.3, 1585.0], [82.4, 1586.0], [82.5, 1587.0], [82.6, 1587.0], [82.7, 1588.0], [82.8, 1588.0], [82.9, 1588.0], [83.0, 1589.0], [83.1, 1590.0], [83.2, 1592.0], [83.3, 1594.0], [83.4, 1594.0], [83.5, 1594.0], [83.6, 1595.0], [83.7, 1599.0], [83.8, 1599.0], [83.9, 1602.0], [84.0, 1604.0], [84.1, 1604.0], [84.2, 1604.0], [84.3, 1605.0], [84.4, 1608.0], [84.5, 1609.0], [84.6, 1609.0], [84.7, 1609.0], [84.8, 1610.0], [84.9, 1613.0], [85.0, 1613.0], [85.1, 1613.0], [85.2, 1613.0], [85.3, 1615.0], [85.4, 1615.0], [85.5, 1616.0], [85.6, 1617.0], [85.7, 1618.0], [85.8, 1619.0], [85.9, 1619.0], [86.0, 1619.0], [86.1, 1620.0], [86.2, 1621.0], [86.3, 1624.0], [86.4, 1625.0], [86.5, 1625.0], [86.6, 1627.0], [86.7, 1627.0], [86.8, 1627.0], [86.9, 1627.0], [87.0, 1628.0], [87.1, 1629.0], [87.2, 1630.0], [87.3, 1630.0], [87.4, 1630.0], [87.5, 1630.0], [87.6, 1631.0], [87.7, 1632.0], [87.8, 1633.0], [87.9, 1634.0], [88.0, 1636.0], [88.1, 1636.0], [88.2, 1638.0], [88.3, 1638.0], [88.4, 1638.0], [88.5, 1641.0], [88.6, 1642.0], [88.7, 1644.0], [88.8, 1645.0], [88.9, 1646.0], [89.0, 1647.0], [89.1, 1647.0], [89.2, 1648.0], [89.3, 1650.0], [89.4, 1651.0], [89.5, 1654.0], [89.6, 1655.0], [89.7, 1656.0], [89.8, 1657.0], [89.9, 1660.0], [90.0, 1661.0], [90.1, 1662.0], [90.2, 1663.0], [90.3, 1664.0], [90.4, 1664.0], [90.5, 1664.0], [90.6, 1665.0], [90.7, 1665.0], [90.8, 1667.0], [90.9, 1667.0], [91.0, 1667.0], [91.1, 1669.0], [91.2, 1669.0], [91.3, 1671.0], [91.4, 1671.0], [91.5, 1671.0], [91.6, 1672.0], [91.7, 1673.0], [91.8, 1674.0], [91.9, 1674.0], [92.0, 1674.0], [92.1, 1675.0], [92.2, 1676.0], [92.3, 1676.0], [92.4, 1676.0], [92.5, 1676.0], [92.6, 1677.0], [92.7, 1677.0], [92.8, 1677.0], [92.9, 1677.0], [93.0, 1677.0], [93.1, 1678.0], [93.2, 1678.0], [93.3, 1678.0], [93.4, 1678.0], [93.5, 1678.0], [93.6, 1679.0], [93.7, 1679.0], [93.8, 1680.0], [93.9, 1681.0], [94.0, 1681.0], [94.1, 1682.0], [94.2, 1683.0], [94.3, 1683.0], [94.4, 1683.0], [94.5, 1685.0], [94.6, 1685.0], [94.7, 1686.0], [94.8, 1686.0], [94.9, 1687.0], [95.0, 1687.0], [95.1, 1688.0], [95.2, 1688.0], [95.3, 1689.0], [95.4, 1689.0], [95.5, 1690.0], [95.6, 1690.0], [95.7, 1690.0], [95.8, 1690.0], [95.9, 1691.0], [96.0, 1691.0], [96.1, 1691.0], [96.2, 1692.0], [96.3, 1692.0], [96.4, 1692.0], [96.5, 1693.0], [96.6, 1694.0], [96.7, 1698.0], [96.8, 1699.0], [96.9, 1700.0], [97.0, 1700.0], [97.1, 1701.0], [97.2, 1701.0], [97.3, 1702.0], [97.4, 1702.0], [97.5, 1702.0], [97.6, 1704.0], [97.7, 1705.0], [97.8, 1706.0], [97.9, 1708.0], [98.0, 1717.0], [98.1, 1722.0], [98.2, 1724.0], [98.3, 1727.0], [98.4, 1729.0], [98.5, 1733.0], [98.6, 1737.0], [98.7, 1742.0], [98.8, 1743.0], [98.9, 1749.0], [99.0, 1754.0], [99.1, 1760.0], [99.2, 1764.0], [99.3, 1765.0], [99.4, 1766.0], [99.5, 1770.0], [99.6, 1773.0], [99.7, 1780.0], [99.8, 1787.0], [99.9, 1806.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[0.0, 21.0], [0.1, 22.0], [0.2, 23.0], [0.3, 23.0], [0.4, 25.0], [0.5, 26.0], [0.6, 28.0], [0.7, 30.0], [0.8, 31.0], [0.9, 31.0], [1.0, 32.0], [1.1, 32.0], [1.2, 34.0], [1.3, 34.0], [1.4, 34.0], [1.5, 36.0], [1.6, 37.0], [1.7, 37.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 39.0], [2.2, 39.0], [2.3, 39.0], [2.4, 41.0], [2.5, 42.0], [2.6, 42.0], [2.7, 43.0], [2.8, 44.0], [2.9, 45.0], [3.0, 46.0], [3.1, 47.0], [3.2, 47.0], [3.3, 48.0], [3.4, 48.0], [3.5, 48.0], [3.6, 49.0], [3.7, 49.0], [3.8, 49.0], [3.9, 50.0], [4.0, 50.0], [4.1, 51.0], [4.2, 54.0], [4.3, 54.0], [4.4, 57.0], [4.5, 60.0], [4.6, 62.0], [4.7, 62.0], [4.8, 63.0], [4.9, 63.0], [5.0, 63.0], [5.1, 65.0], [5.2, 65.0], [5.3, 65.0], [5.4, 68.0], [5.5, 69.0], [5.6, 72.0], [5.7, 73.0], [5.8, 73.0], [5.9, 73.0], [6.0, 74.0], [6.1, 75.0], [6.2, 76.0], [6.3, 78.0], [6.4, 78.0], [6.5, 79.0], [6.6, 80.0], [6.7, 81.0], [6.8, 81.0], [6.9, 81.0], [7.0, 82.0], [7.1, 82.0], [7.2, 82.0], [7.3, 83.0], [7.4, 83.0], [7.5, 83.0], [7.6, 84.0], [7.7, 84.0], [7.8, 85.0], [7.9, 85.0], [8.0, 85.0], [8.1, 85.0], [8.2, 87.0], [8.3, 87.0], [8.4, 90.0], [8.5, 91.0], [8.6, 91.0], [8.7, 91.0], [8.8, 92.0], [8.9, 92.0], [9.0, 94.0], [9.1, 94.0], [9.2, 94.0], [9.3, 95.0], [9.4, 95.0], [9.5, 98.0], [9.6, 98.0], [9.7, 99.0], [9.8, 99.0], [9.9, 100.0], [10.0, 100.0], [10.1, 102.0], [10.2, 102.0], [10.3, 102.0], [10.4, 103.0], [10.5, 103.0], [10.6, 103.0], [10.7, 104.0], [10.8, 104.0], [10.9, 105.0], [11.0, 105.0], [11.1, 105.0], [11.2, 106.0], [11.3, 107.0], [11.4, 107.0], [11.5, 107.0], [11.6, 108.0], [11.7, 109.0], [11.8, 109.0], [11.9, 110.0], [12.0, 110.0], [12.1, 111.0], [12.2, 111.0], [12.3, 111.0], [12.4, 111.0], [12.5, 112.0], [12.6, 112.0], [12.7, 113.0], [12.8, 114.0], [12.9, 114.0], [13.0, 115.0], [13.1, 117.0], [13.2, 117.0], [13.3, 117.0], [13.4, 118.0], [13.5, 118.0], [13.6, 119.0], [13.7, 119.0], [13.8, 120.0], [13.9, 120.0], [14.0, 121.0], [14.1, 121.0], [14.2, 121.0], [14.3, 124.0], [14.4, 125.0], [14.5, 125.0], [14.6, 126.0], [14.7, 126.0], [14.8, 127.0], [14.9, 127.0], [15.0, 128.0], [15.1, 128.0], [15.2, 130.0], [15.3, 130.0], [15.4, 131.0], [15.5, 131.0], [15.6, 132.0], [15.7, 133.0], [15.8, 133.0], [15.9, 133.0], [16.0, 134.0], [16.1, 135.0], [16.2, 135.0], [16.3, 136.0], [16.4, 136.0], [16.5, 136.0], [16.6, 136.0], [16.7, 137.0], [16.8, 137.0], [16.9, 137.0], [17.0, 139.0], [17.1, 139.0], [17.2, 139.0], [17.3, 140.0], [17.4, 140.0], [17.5, 142.0], [17.6, 142.0], [17.7, 142.0], [17.8, 143.0], [17.9, 144.0], [18.0, 144.0], [18.1, 145.0], [18.2, 146.0], [18.3, 146.0], [18.4, 147.0], [18.5, 148.0], [18.6, 148.0], [18.7, 148.0], [18.8, 148.0], [18.9, 149.0], [19.0, 150.0], [19.1, 150.0], [19.2, 150.0], [19.3, 151.0], [19.4, 152.0], [19.5, 152.0], [19.6, 153.0], [19.7, 153.0], [19.8, 154.0], [19.9, 154.0], [20.0, 154.0], [20.1, 156.0], [20.2, 156.0], [20.3, 156.0], [20.4, 157.0], [20.5, 158.0], [20.6, 159.0], [20.7, 159.0], [20.8, 159.0], [20.9, 160.0], [21.0, 161.0], [21.1, 161.0], [21.2, 162.0], [21.3, 162.0], [21.4, 163.0], [21.5, 163.0], [21.6, 164.0], [21.7, 164.0], [21.8, 164.0], [21.9, 164.0], [22.0, 165.0], [22.1, 166.0], [22.2, 166.0], [22.3, 166.0], [22.4, 166.0], [22.5, 167.0], [22.6, 167.0], [22.7, 169.0], [22.8, 170.0], [22.9, 171.0], [23.0, 171.0], [23.1, 172.0], [23.2, 172.0], [23.3, 172.0], [23.4, 172.0], [23.5, 173.0], [23.6, 173.0], [23.7, 173.0], [23.8, 173.0], [23.9, 173.0], [24.0, 173.0], [24.1, 173.0], [24.2, 174.0], [24.3, 174.0], [24.4, 175.0], [24.5, 175.0], [24.6, 176.0], [24.7, 176.0], [24.8, 178.0], [24.9, 179.0], [25.0, 179.0], [25.1, 180.0], [25.2, 180.0], [25.3, 181.0], [25.4, 182.0], [25.5, 183.0], [25.6, 184.0], [25.7, 185.0], [25.8, 187.0], [25.9, 187.0], [26.0, 188.0], [26.1, 188.0], [26.2, 189.0], [26.3, 189.0], [26.4, 191.0], [26.5, 191.0], [26.6, 191.0], [26.7, 192.0], [26.8, 193.0], [26.9, 193.0], [27.0, 194.0], [27.1, 195.0], [27.2, 195.0], [27.3, 196.0], [27.4, 197.0], [27.5, 198.0], [27.6, 199.0], [27.7, 199.0], [27.8, 200.0], [27.9, 200.0], [28.0, 201.0], [28.1, 203.0], [28.2, 203.0], [28.3, 204.0], [28.4, 205.0], [28.5, 207.0], [28.6, 208.0], [28.7, 209.0], [28.8, 209.0], [28.9, 210.0], [29.0, 210.0], [29.1, 211.0], [29.2, 211.0], [29.3, 211.0], [29.4, 212.0], [29.5, 212.0], [29.6, 213.0], [29.7, 215.0], [29.8, 216.0], [29.9, 217.0], [30.0, 218.0], [30.1, 220.0], [30.2, 221.0], [30.3, 222.0], [30.4, 222.0], [30.5, 223.0], [30.6, 223.0], [30.7, 223.0], [30.8, 223.0], [30.9, 224.0], [31.0, 226.0], [31.1, 226.0], [31.2, 227.0], [31.3, 228.0], [31.4, 230.0], [31.5, 230.0], [31.6, 233.0], [31.7, 233.0], [31.8, 235.0], [31.9, 235.0], [32.0, 237.0], [32.1, 238.0], [32.2, 238.0], [32.3, 238.0], [32.4, 239.0], [32.5, 241.0], [32.6, 241.0], [32.7, 241.0], [32.8, 241.0], [32.9, 242.0], [33.0, 243.0], [33.1, 243.0], [33.2, 245.0], [33.3, 248.0], [33.4, 251.0], [33.5, 251.0], [33.6, 252.0], [33.7, 258.0], [33.8, 259.0], [33.9, 260.0], [34.0, 261.0], [34.1, 261.0], [34.2, 262.0], [34.3, 264.0], [34.4, 264.0], [34.5, 267.0], [34.6, 268.0], [34.7, 270.0], [34.8, 271.0], [34.9, 272.0], [35.0, 274.0], [35.1, 275.0], [35.2, 275.0], [35.3, 277.0], [35.4, 278.0], [35.5, 281.0], [35.6, 283.0], [35.7, 284.0], [35.8, 285.0], [35.9, 285.0], [36.0, 286.0], [36.1, 287.0], [36.2, 289.0], [36.3, 293.0], [36.4, 295.0], [36.5, 297.0], [36.6, 298.0], [36.7, 299.0], [36.8, 300.0], [36.9, 300.0], [37.0, 303.0], [37.1, 304.0], [37.2, 308.0], [37.3, 309.0], [37.4, 309.0], [37.5, 312.0], [37.6, 315.0], [37.7, 316.0], [37.8, 316.0], [37.9, 316.0], [38.0, 317.0], [38.1, 320.0], [38.2, 321.0], [38.3, 323.0], [38.4, 324.0], [38.5, 324.0], [38.6, 324.0], [38.7, 326.0], [38.8, 328.0], [38.9, 330.0], [39.0, 335.0], [39.1, 338.0], [39.2, 344.0], [39.3, 344.0], [39.4, 345.0], [39.5, 347.0], [39.6, 347.0], [39.7, 347.0], [39.8, 348.0], [39.9, 350.0], [40.0, 354.0], [40.1, 355.0], [40.2, 360.0], [40.3, 361.0], [40.4, 362.0], [40.5, 363.0], [40.6, 367.0], [40.7, 369.0], [40.8, 370.0], [40.9, 376.0], [41.0, 377.0], [41.1, 380.0], [41.2, 382.0], [41.3, 383.0], [41.4, 383.0], [41.5, 387.0], [41.6, 388.0], [41.7, 390.0], [41.8, 391.0], [41.9, 392.0], [42.0, 394.0], [42.1, 394.0], [42.2, 394.0], [42.3, 395.0], [42.4, 396.0], [42.5, 397.0], [42.6, 401.0], [42.7, 402.0], [42.8, 403.0], [42.9, 408.0], [43.0, 411.0], [43.1, 411.0], [43.2, 416.0], [43.3, 419.0], [43.4, 421.0], [43.5, 421.0], [43.6, 424.0], [43.7, 425.0], [43.8, 430.0], [43.9, 435.0], [44.0, 436.0], [44.1, 438.0], [44.2, 441.0], [44.3, 442.0], [44.4, 442.0], [44.5, 442.0], [44.6, 443.0], [44.7, 445.0], [44.8, 445.0], [44.9, 446.0], [45.0, 446.0], [45.1, 448.0], [45.2, 450.0], [45.3, 453.0], [45.4, 453.0], [45.5, 453.0], [45.6, 453.0], [45.7, 454.0], [45.8, 455.0], [45.9, 455.0], [46.0, 456.0], [46.1, 456.0], [46.2, 456.0], [46.3, 457.0], [46.4, 460.0], [46.5, 461.0], [46.6, 461.0], [46.7, 462.0], [46.8, 462.0], [46.9, 463.0], [47.0, 464.0], [47.1, 465.0], [47.2, 467.0], [47.3, 467.0], [47.4, 467.0], [47.5, 469.0], [47.6, 469.0], [47.7, 470.0], [47.8, 471.0], [47.9, 471.0], [48.0, 472.0], [48.1, 474.0], [48.2, 478.0], [48.3, 481.0], [48.4, 484.0], [48.5, 484.0], [48.6, 485.0], [48.7, 485.0], [48.8, 487.0], [48.9, 488.0], [49.0, 488.0], [49.1, 489.0], [49.2, 490.0], [49.3, 492.0], [49.4, 493.0], [49.5, 495.0], [49.6, 499.0], [49.7, 500.0], [49.8, 500.0], [49.9, 500.0], [50.0, 507.0], [50.1, 508.0], [50.2, 509.0], [50.3, 510.0], [50.4, 512.0], [50.5, 516.0], [50.6, 517.0], [50.7, 518.0], [50.8, 518.0], [50.9, 518.0], [51.0, 521.0], [51.1, 521.0], [51.2, 525.0], [51.3, 527.0], [51.4, 529.0], [51.5, 530.0], [51.6, 531.0], [51.7, 534.0], [51.8, 536.0], [51.9, 536.0], [52.0, 538.0], [52.1, 540.0], [52.2, 541.0], [52.3, 541.0], [52.4, 542.0], [52.5, 544.0], [52.6, 544.0], [52.7, 546.0], [52.8, 546.0], [52.9, 547.0], [53.0, 548.0], [53.1, 549.0], [53.2, 549.0], [53.3, 550.0], [53.4, 550.0], [53.5, 554.0], [53.6, 556.0], [53.7, 559.0], [53.8, 559.0], [53.9, 560.0], [54.0, 560.0], [54.1, 562.0], [54.2, 562.0], [54.3, 563.0], [54.4, 563.0], [54.5, 565.0], [54.6, 566.0], [54.7, 567.0], [54.8, 568.0], [54.9, 570.0], [55.0, 571.0], [55.1, 571.0], [55.2, 571.0], [55.3, 572.0], [55.4, 574.0], [55.5, 576.0], [55.6, 577.0], [55.7, 577.0], [55.8, 580.0], [55.9, 584.0], [56.0, 586.0], [56.1, 588.0], [56.2, 591.0], [56.3, 593.0], [56.4, 596.0], [56.5, 598.0], [56.6, 598.0], [56.7, 599.0], [56.8, 601.0], [56.9, 601.0], [57.0, 604.0], [57.1, 608.0], [57.2, 609.0], [57.3, 611.0], [57.4, 612.0], [57.5, 612.0], [57.6, 619.0], [57.7, 619.0], [57.8, 619.0], [57.9, 620.0], [58.0, 620.0], [58.1, 621.0], [58.2, 621.0], [58.3, 623.0], [58.4, 623.0], [58.5, 625.0], [58.6, 625.0], [58.7, 631.0], [58.8, 632.0], [58.9, 632.0], [59.0, 632.0], [59.1, 633.0], [59.2, 634.0], [59.3, 635.0], [59.4, 637.0], [59.5, 638.0], [59.6, 642.0], [59.7, 643.0], [59.8, 643.0], [59.9, 643.0], [60.0, 648.0], [60.1, 648.0], [60.2, 650.0], [60.3, 650.0], [60.4, 650.0], [60.5, 651.0], [60.6, 653.0], [60.7, 654.0], [60.8, 654.0], [60.9, 655.0], [61.0, 657.0], [61.1, 658.0], [61.2, 660.0], [61.3, 660.0], [61.4, 663.0], [61.5, 664.0], [61.6, 665.0], [61.7, 666.0], [61.8, 667.0], [61.9, 668.0], [62.0, 669.0], [62.1, 670.0], [62.2, 670.0], [62.3, 670.0], [62.4, 672.0], [62.5, 672.0], [62.6, 674.0], [62.7, 674.0], [62.8, 676.0], [62.9, 678.0], [63.0, 679.0], [63.1, 679.0], [63.2, 680.0], [63.3, 680.0], [63.4, 682.0], [63.5, 682.0], [63.6, 685.0], [63.7, 686.0], [63.8, 686.0], [63.9, 686.0], [64.0, 686.0], [64.1, 687.0], [64.2, 688.0], [64.3, 689.0], [64.4, 691.0], [64.5, 692.0], [64.6, 695.0], [64.7, 695.0], [64.8, 695.0], [64.9, 696.0], [65.0, 698.0], [65.1, 698.0], [65.2, 698.0], [65.3, 699.0], [65.4, 699.0], [65.5, 700.0], [65.6, 703.0], [65.7, 705.0], [65.8, 705.0], [65.9, 707.0], [66.0, 708.0], [66.1, 708.0], [66.2, 709.0], [66.3, 709.0], [66.4, 709.0], [66.5, 710.0], [66.6, 713.0], [66.7, 715.0], [66.8, 716.0], [66.9, 717.0], [67.0, 718.0], [67.1, 718.0], [67.2, 718.0], [67.3, 719.0], [67.4, 720.0], [67.5, 720.0], [67.6, 721.0], [67.7, 721.0], [67.8, 722.0], [67.9, 723.0], [68.0, 723.0], [68.1, 724.0], [68.2, 724.0], [68.3, 724.0], [68.4, 724.0], [68.5, 726.0], [68.6, 727.0], [68.7, 727.0], [68.8, 728.0], [68.9, 729.0], [69.0, 732.0], [69.1, 732.0], [69.2, 734.0], [69.3, 736.0], [69.4, 740.0], [69.5, 740.0], [69.6, 743.0], [69.7, 747.0], [69.8, 747.0], [69.9, 748.0], [70.0, 748.0], [70.1, 749.0], [70.2, 749.0], [70.3, 750.0], [70.4, 752.0], [70.5, 752.0], [70.6, 754.0], [70.7, 755.0], [70.8, 755.0], [70.9, 756.0], [71.0, 757.0], [71.1, 758.0], [71.2, 759.0], [71.3, 761.0], [71.4, 761.0], [71.5, 763.0], [71.6, 766.0], [71.7, 766.0], [71.8, 769.0], [71.9, 770.0], [72.0, 770.0], [72.1, 771.0], [72.2, 772.0], [72.3, 773.0], [72.4, 774.0], [72.5, 774.0], [72.6, 774.0], [72.7, 780.0], [72.8, 780.0], [72.9, 781.0], [73.0, 781.0], [73.1, 787.0], [73.2, 789.0], [73.3, 789.0], [73.4, 791.0], [73.5, 792.0], [73.6, 793.0], [73.7, 794.0], [73.8, 795.0], [73.9, 796.0], [74.0, 796.0], [74.1, 796.0], [74.2, 797.0], [74.3, 798.0], [74.4, 799.0], [74.5, 800.0], [74.6, 800.0], [74.7, 800.0], [74.8, 800.0], [74.9, 802.0], [75.0, 802.0], [75.1, 803.0], [75.2, 803.0], [75.3, 804.0], [75.4, 805.0], [75.5, 806.0], [75.6, 808.0], [75.7, 808.0], [75.8, 808.0], [75.9, 811.0], [76.0, 811.0], [76.1, 811.0], [76.2, 812.0], [76.3, 812.0], [76.4, 812.0], [76.5, 813.0], [76.6, 813.0], [76.7, 814.0], [76.8, 817.0], [76.9, 819.0], [77.0, 820.0], [77.1, 822.0], [77.2, 824.0], [77.3, 825.0], [77.4, 827.0], [77.5, 829.0], [77.6, 829.0], [77.7, 831.0], [77.8, 832.0], [77.9, 833.0], [78.0, 833.0], [78.1, 833.0], [78.2, 835.0], [78.3, 836.0], [78.4, 837.0], [78.5, 837.0], [78.6, 839.0], [78.7, 839.0], [78.8, 840.0], [78.9, 840.0], [79.0, 842.0], [79.1, 844.0], [79.2, 845.0], [79.3, 847.0], [79.4, 847.0], [79.5, 847.0], [79.6, 847.0], [79.7, 853.0], [79.8, 853.0], [79.9, 855.0], [80.0, 856.0], [80.1, 856.0], [80.2, 856.0], [80.3, 856.0], [80.4, 858.0], [80.5, 859.0], [80.6, 859.0], [80.7, 859.0], [80.8, 862.0], [80.9, 862.0], [81.0, 865.0], [81.1, 869.0], [81.2, 871.0], [81.3, 872.0], [81.4, 872.0], [81.5, 872.0], [81.6, 872.0], [81.7, 874.0], [81.8, 875.0], [81.9, 875.0], [82.0, 875.0], [82.1, 875.0], [82.2, 876.0], [82.3, 877.0], [82.4, 877.0], [82.5, 878.0], [82.6, 879.0], [82.7, 882.0], [82.8, 886.0], [82.9, 888.0], [83.0, 890.0], [83.1, 891.0], [83.2, 891.0], [83.3, 892.0], [83.4, 896.0], [83.5, 897.0], [83.6, 897.0], [83.7, 899.0], [83.8, 900.0], [83.9, 900.0], [84.0, 902.0], [84.1, 903.0], [84.2, 904.0], [84.3, 905.0], [84.4, 917.0], [84.5, 920.0], [84.6, 920.0], [84.7, 921.0], [84.8, 922.0], [84.9, 922.0], [85.0, 922.0], [85.1, 923.0], [85.2, 923.0], [85.3, 926.0], [85.4, 927.0], [85.5, 927.0], [85.6, 928.0], [85.7, 928.0], [85.8, 929.0], [85.9, 929.0], [86.0, 932.0], [86.1, 932.0], [86.2, 934.0], [86.3, 934.0], [86.4, 935.0], [86.5, 939.0], [86.6, 940.0], [86.7, 940.0], [86.8, 941.0], [86.9, 941.0], [87.0, 942.0], [87.1, 943.0], [87.2, 944.0], [87.3, 944.0], [87.4, 944.0], [87.5, 949.0], [87.6, 953.0], [87.7, 955.0], [87.8, 955.0], [87.9, 956.0], [88.0, 958.0], [88.1, 960.0], [88.2, 960.0], [88.3, 960.0], [88.4, 961.0], [88.5, 962.0], [88.6, 966.0], [88.7, 967.0], [88.8, 968.0], [88.9, 969.0], [89.0, 971.0], [89.1, 972.0], [89.2, 973.0], [89.3, 974.0], [89.4, 979.0], [89.5, 980.0], [89.6, 982.0], [89.7, 983.0], [89.8, 985.0], [89.9, 992.0], [90.0, 994.0], [90.1, 1000.0], [90.2, 1007.0], [90.3, 1010.0], [90.4, 1012.0], [90.5, 1012.0], [90.6, 1015.0], [90.7, 1017.0], [90.8, 1022.0], [90.9, 1024.0], [91.0, 1026.0], [91.1, 1028.0], [91.2, 1035.0], [91.3, 1036.0], [91.4, 1045.0], [91.5, 1046.0], [91.6, 1046.0], [91.7, 1046.0], [91.8, 1048.0], [91.9, 1075.0], [92.0, 1082.0], [92.1, 1085.0], [92.2, 1086.0], [92.3, 1087.0], [92.4, 1091.0], [92.5, 1114.0], [92.6, 1126.0], [92.7, 1134.0], [92.8, 1136.0], [92.9, 1137.0], [93.0, 1142.0], [93.1, 1147.0], [93.2, 1150.0], [93.3, 1163.0], [93.4, 1166.0], [93.5, 1167.0], [93.6, 1167.0], [93.7, 1168.0], [93.8, 1171.0], [93.9, 1195.0], [94.0, 1204.0], [94.1, 1217.0], [94.2, 1218.0], [94.3, 1223.0], [94.4, 1232.0], [94.5, 1238.0], [94.6, 1238.0], [94.7, 1244.0], [94.8, 1249.0], [94.9, 1251.0], [95.0, 1252.0], [95.1, 1257.0], [95.2, 1258.0], [95.3, 1259.0], [95.4, 1282.0], [95.5, 1300.0], [95.6, 1304.0], [95.7, 1311.0], [95.8, 1316.0], [95.9, 1356.0], [96.0, 1376.0], [96.1, 1405.0], [96.2, 1412.0], [96.3, 1420.0], [96.4, 1459.0], [96.5, 1469.0], [96.6, 1476.0], [96.7, 1482.0], [96.8, 1534.0], [96.9, 1553.0], [97.0, 1560.0], [97.1, 1571.0], [97.2, 1573.0], [97.3, 1582.0], [97.4, 1603.0], [97.5, 1613.0], [97.6, 1642.0], [97.7, 1694.0], [97.8, 1703.0], [97.9, 1793.0], [98.0, 1849.0], [98.1, 1875.0], [98.2, 1892.0], [98.3, 1906.0], [98.4, 1947.0], [98.5, 1949.0], [98.6, 1974.0], [98.7, 2012.0], [98.8, 2040.0], [98.9, 2046.0], [99.0, 2076.0], [99.1, 2121.0], [99.2, 2141.0], [99.3, 2149.0], [99.4, 2175.0], [99.5, 2196.0], [99.6, 2246.0], [99.7, 2252.0], [99.8, 2330.0], [99.9, 2637.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[0.0, 15.0], [0.1, 16.0], [0.2, 16.0], [0.3, 16.0], [0.4, 18.0], [0.5, 18.0], [0.6, 18.0], [0.7, 19.0], [0.8, 21.0], [0.9, 23.0], [1.0, 23.0], [1.1, 23.0], [1.2, 23.0], [1.3, 23.0], [1.4, 25.0], [1.5, 25.0], [1.6, 26.0], [1.7, 26.0], [1.8, 27.0], [1.9, 27.0], [2.0, 27.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 29.0], [2.5, 30.0], [2.6, 30.0], [2.7, 30.0], [2.8, 30.0], [2.9, 31.0], [3.0, 32.0], [3.1, 32.0], [3.2, 32.0], [3.3, 34.0], [3.4, 35.0], [3.5, 36.0], [3.6, 37.0], [3.7, 37.0], [3.8, 39.0], [3.9, 40.0], [4.0, 40.0], [4.1, 41.0], [4.2, 41.0], [4.3, 41.0], [4.4, 42.0], [4.5, 42.0], [4.6, 42.0], [4.7, 42.0], [4.8, 43.0], [4.9, 43.0], [5.0, 43.0], [5.1, 43.0], [5.2, 46.0], [5.3, 46.0], [5.4, 46.0], [5.5, 46.0], [5.6, 46.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 47.0], [6.1, 47.0], [6.2, 48.0], [6.3, 48.0], [6.4, 48.0], [6.5, 48.0], [6.6, 49.0], [6.7, 49.0], [6.8, 50.0], [6.9, 51.0], [7.0, 51.0], [7.1, 51.0], [7.2, 51.0], [7.3, 51.0], [7.4, 52.0], [7.5, 52.0], [7.6, 52.0], [7.7, 55.0], [7.8, 55.0], [7.9, 55.0], [8.0, 55.0], [8.1, 55.0], [8.2, 55.0], [8.3, 55.0], [8.4, 56.0], [8.5, 56.0], [8.6, 56.0], [8.7, 56.0], [8.8, 57.0], [8.9, 57.0], [9.0, 57.0], [9.1, 57.0], [9.2, 58.0], [9.3, 59.0], [9.4, 59.0], [9.5, 59.0], [9.6, 59.0], [9.7, 60.0], [9.8, 60.0], [9.9, 60.0], [10.0, 60.0], [10.1, 60.0], [10.2, 60.0], [10.3, 61.0], [10.4, 61.0], [10.5, 62.0], [10.6, 62.0], [10.7, 63.0], [10.8, 63.0], [10.9, 63.0], [11.0, 64.0], [11.1, 65.0], [11.2, 65.0], [11.3, 65.0], [11.4, 66.0], [11.5, 66.0], [11.6, 66.0], [11.7, 66.0], [11.8, 67.0], [11.9, 68.0], [12.0, 70.0], [12.1, 70.0], [12.2, 70.0], [12.3, 70.0], [12.4, 70.0], [12.5, 72.0], [12.6, 72.0], [12.7, 72.0], [12.8, 72.0], [12.9, 73.0], [13.0, 73.0], [13.1, 74.0], [13.2, 74.0], [13.3, 75.0], [13.4, 76.0], [13.5, 76.0], [13.6, 77.0], [13.7, 77.0], [13.8, 77.0], [13.9, 78.0], [14.0, 78.0], [14.1, 78.0], [14.2, 79.0], [14.3, 79.0], [14.4, 79.0], [14.5, 80.0], [14.6, 80.0], [14.7, 80.0], [14.8, 80.0], [14.9, 80.0], [15.0, 80.0], [15.1, 81.0], [15.2, 81.0], [15.3, 82.0], [15.4, 84.0], [15.5, 84.0], [15.6, 84.0], [15.7, 84.0], [15.8, 84.0], [15.9, 84.0], [16.0, 85.0], [16.1, 85.0], [16.2, 85.0], [16.3, 85.0], [16.4, 85.0], [16.5, 85.0], [16.6, 85.0], [16.7, 86.0], [16.8, 86.0], [16.9, 86.0], [17.0, 86.0], [17.1, 87.0], [17.2, 87.0], [17.3, 87.0], [17.4, 87.0], [17.5, 87.0], [17.6, 88.0], [17.7, 88.0], [17.8, 88.0], [17.9, 88.0], [18.0, 88.0], [18.1, 88.0], [18.2, 88.0], [18.3, 89.0], [18.4, 89.0], [18.5, 89.0], [18.6, 90.0], [18.7, 90.0], [18.8, 90.0], [18.9, 91.0], [19.0, 91.0], [19.1, 92.0], [19.2, 92.0], [19.3, 93.0], [19.4, 93.0], [19.5, 93.0], [19.6, 94.0], [19.7, 94.0], [19.8, 94.0], [19.9, 95.0], [20.0, 95.0], [20.1, 95.0], [20.2, 96.0], [20.3, 96.0], [20.4, 96.0], [20.5, 96.0], [20.6, 97.0], [20.7, 97.0], [20.8, 98.0], [20.9, 98.0], [21.0, 99.0], [21.1, 100.0], [21.2, 100.0], [21.3, 101.0], [21.4, 102.0], [21.5, 102.0], [21.6, 102.0], [21.7, 102.0], [21.8, 103.0], [21.9, 103.0], [22.0, 103.0], [22.1, 104.0], [22.2, 104.0], [22.3, 104.0], [22.4, 105.0], [22.5, 105.0], [22.6, 106.0], [22.7, 106.0], [22.8, 106.0], [22.9, 106.0], [23.0, 107.0], [23.1, 107.0], [23.2, 107.0], [23.3, 107.0], [23.4, 108.0], [23.5, 109.0], [23.6, 109.0], [23.7, 109.0], [23.8, 109.0], [23.9, 110.0], [24.0, 110.0], [24.1, 110.0], [24.2, 110.0], [24.3, 110.0], [24.4, 110.0], [24.5, 111.0], [24.6, 111.0], [24.7, 111.0], [24.8, 112.0], [24.9, 113.0], [25.0, 113.0], [25.1, 113.0], [25.2, 113.0], [25.3, 114.0], [25.4, 114.0], [25.5, 114.0], [25.6, 114.0], [25.7, 114.0], [25.8, 115.0], [25.9, 115.0], [26.0, 115.0], [26.1, 116.0], [26.2, 116.0], [26.3, 117.0], [26.4, 117.0], [26.5, 117.0], [26.6, 118.0], [26.7, 118.0], [26.8, 119.0], [26.9, 120.0], [27.0, 120.0], [27.1, 120.0], [27.2, 120.0], [27.3, 121.0], [27.4, 121.0], [27.5, 122.0], [27.6, 122.0], [27.7, 122.0], [27.8, 123.0], [27.9, 123.0], [28.0, 123.0], [28.1, 123.0], [28.2, 123.0], [28.3, 124.0], [28.4, 124.0], [28.5, 124.0], [28.6, 124.0], [28.7, 125.0], [28.8, 125.0], [28.9, 125.0], [29.0, 125.0], [29.1, 125.0], [29.2, 126.0], [29.3, 126.0], [29.4, 126.0], [29.5, 126.0], [29.6, 126.0], [29.7, 126.0], [29.8, 127.0], [29.9, 127.0], [30.0, 128.0], [30.1, 128.0], [30.2, 128.0], [30.3, 129.0], [30.4, 129.0], [30.5, 129.0], [30.6, 130.0], [30.7, 130.0], [30.8, 130.0], [30.9, 131.0], [31.0, 131.0], [31.1, 131.0], [31.2, 131.0], [31.3, 132.0], [31.4, 132.0], [31.5, 132.0], [31.6, 133.0], [31.7, 133.0], [31.8, 133.0], [31.9, 134.0], [32.0, 134.0], [32.1, 134.0], [32.2, 134.0], [32.3, 134.0], [32.4, 135.0], [32.5, 135.0], [32.6, 135.0], [32.7, 135.0], [32.8, 136.0], [32.9, 136.0], [33.0, 136.0], [33.1, 136.0], [33.2, 136.0], [33.3, 136.0], [33.4, 137.0], [33.5, 137.0], [33.6, 139.0], [33.7, 140.0], [33.8, 140.0], [33.9, 140.0], [34.0, 140.0], [34.1, 140.0], [34.2, 140.0], [34.3, 140.0], [34.4, 141.0], [34.5, 141.0], [34.6, 141.0], [34.7, 142.0], [34.8, 142.0], [34.9, 142.0], [35.0, 142.0], [35.1, 143.0], [35.2, 143.0], [35.3, 143.0], [35.4, 143.0], [35.5, 143.0], [35.6, 143.0], [35.7, 143.0], [35.8, 143.0], [35.9, 143.0], [36.0, 144.0], [36.1, 144.0], [36.2, 145.0], [36.3, 145.0], [36.4, 146.0], [36.5, 146.0], [36.6, 146.0], [36.7, 146.0], [36.8, 146.0], [36.9, 146.0], [37.0, 146.0], [37.1, 147.0], [37.2, 147.0], [37.3, 147.0], [37.4, 148.0], [37.5, 149.0], [37.6, 149.0], [37.7, 150.0], [37.8, 150.0], [37.9, 150.0], [38.0, 150.0], [38.1, 150.0], [38.2, 150.0], [38.3, 150.0], [38.4, 150.0], [38.5, 151.0], [38.6, 152.0], [38.7, 152.0], [38.8, 152.0], [38.9, 153.0], [39.0, 153.0], [39.1, 154.0], [39.2, 154.0], [39.3, 154.0], [39.4, 155.0], [39.5, 155.0], [39.6, 155.0], [39.7, 156.0], [39.8, 156.0], [39.9, 156.0], [40.0, 156.0], [40.1, 156.0], [40.2, 157.0], [40.3, 157.0], [40.4, 157.0], [40.5, 157.0], [40.6, 157.0], [40.7, 158.0], [40.8, 159.0], [40.9, 159.0], [41.0, 159.0], [41.1, 159.0], [41.2, 159.0], [41.3, 160.0], [41.4, 161.0], [41.5, 161.0], [41.6, 161.0], [41.7, 161.0], [41.8, 161.0], [41.9, 162.0], [42.0, 163.0], [42.1, 163.0], [42.2, 163.0], [42.3, 163.0], [42.4, 163.0], [42.5, 163.0], [42.6, 164.0], [42.7, 165.0], [42.8, 165.0], [42.9, 165.0], [43.0, 165.0], [43.1, 165.0], [43.2, 165.0], [43.3, 165.0], [43.4, 165.0], [43.5, 166.0], [43.6, 166.0], [43.7, 166.0], [43.8, 166.0], [43.9, 166.0], [44.0, 167.0], [44.1, 168.0], [44.2, 168.0], [44.3, 168.0], [44.4, 168.0], [44.5, 168.0], [44.6, 169.0], [44.7, 169.0], [44.8, 169.0], [44.9, 169.0], [45.0, 169.0], [45.1, 169.0], [45.2, 169.0], [45.3, 169.0], [45.4, 170.0], [45.5, 170.0], [45.6, 171.0], [45.7, 171.0], [45.8, 171.0], [45.9, 172.0], [46.0, 172.0], [46.1, 172.0], [46.2, 172.0], [46.3, 172.0], [46.4, 173.0], [46.5, 173.0], [46.6, 173.0], [46.7, 173.0], [46.8, 173.0], [46.9, 173.0], [47.0, 174.0], [47.1, 174.0], [47.2, 175.0], [47.3, 175.0], [47.4, 175.0], [47.5, 175.0], [47.6, 176.0], [47.7, 176.0], [47.8, 177.0], [47.9, 178.0], [48.0, 178.0], [48.1, 178.0], [48.2, 179.0], [48.3, 179.0], [48.4, 179.0], [48.5, 179.0], [48.6, 179.0], [48.7, 179.0], [48.8, 180.0], [48.9, 180.0], [49.0, 180.0], [49.1, 180.0], [49.2, 180.0], [49.3, 180.0], [49.4, 180.0], [49.5, 181.0], [49.6, 181.0], [49.7, 181.0], [49.8, 181.0], [49.9, 182.0], [50.0, 182.0], [50.1, 182.0], [50.2, 182.0], [50.3, 182.0], [50.4, 183.0], [50.5, 183.0], [50.6, 183.0], [50.7, 183.0], [50.8, 184.0], [50.9, 184.0], [51.0, 184.0], [51.1, 184.0], [51.2, 184.0], [51.3, 185.0], [51.4, 185.0], [51.5, 186.0], [51.6, 186.0], [51.7, 186.0], [51.8, 187.0], [51.9, 187.0], [52.0, 187.0], [52.1, 187.0], [52.2, 189.0], [52.3, 189.0], [52.4, 189.0], [52.5, 190.0], [52.6, 190.0], [52.7, 190.0], [52.8, 190.0], [52.9, 190.0], [53.0, 190.0], [53.1, 191.0], [53.2, 191.0], [53.3, 191.0], [53.4, 191.0], [53.5, 191.0], [53.6, 192.0], [53.7, 192.0], [53.8, 192.0], [53.9, 192.0], [54.0, 194.0], [54.1, 194.0], [54.2, 195.0], [54.3, 195.0], [54.4, 196.0], [54.5, 196.0], [54.6, 197.0], [54.7, 197.0], [54.8, 197.0], [54.9, 197.0], [55.0, 197.0], [55.1, 197.0], [55.2, 197.0], [55.3, 197.0], [55.4, 198.0], [55.5, 199.0], [55.6, 199.0], [55.7, 200.0], [55.8, 200.0], [55.9, 200.0], [56.0, 200.0], [56.1, 201.0], [56.2, 201.0], [56.3, 201.0], [56.4, 201.0], [56.5, 201.0], [56.6, 201.0], [56.7, 201.0], [56.8, 201.0], [56.9, 202.0], [57.0, 202.0], [57.1, 202.0], [57.2, 203.0], [57.3, 203.0], [57.4, 203.0], [57.5, 203.0], [57.6, 203.0], [57.7, 204.0], [57.8, 204.0], [57.9, 204.0], [58.0, 204.0], [58.1, 205.0], [58.2, 205.0], [58.3, 205.0], [58.4, 205.0], [58.5, 205.0], [58.6, 205.0], [58.7, 205.0], [58.8, 205.0], [58.9, 206.0], [59.0, 206.0], [59.1, 206.0], [59.2, 207.0], [59.3, 207.0], [59.4, 207.0], [59.5, 207.0], [59.6, 207.0], [59.7, 208.0], [59.8, 208.0], [59.9, 209.0], [60.0, 210.0], [60.1, 210.0], [60.2, 211.0], [60.3, 211.0], [60.4, 211.0], [60.5, 212.0], [60.6, 213.0], [60.7, 213.0], [60.8, 213.0], [60.9, 214.0], [61.0, 214.0], [61.1, 214.0], [61.2, 214.0], [61.3, 214.0], [61.4, 214.0], [61.5, 215.0], [61.6, 215.0], [61.7, 215.0], [61.8, 215.0], [61.9, 215.0], [62.0, 216.0], [62.1, 217.0], [62.2, 218.0], [62.3, 218.0], [62.4, 219.0], [62.5, 219.0], [62.6, 219.0], [62.7, 219.0], [62.8, 221.0], [62.9, 221.0], [63.0, 221.0], [63.1, 222.0], [63.2, 222.0], [63.3, 222.0], [63.4, 222.0], [63.5, 222.0], [63.6, 223.0], [63.7, 224.0], [63.8, 224.0], [63.9, 225.0], [64.0, 225.0], [64.1, 225.0], [64.2, 226.0], [64.3, 226.0], [64.4, 227.0], [64.5, 227.0], [64.6, 227.0], [64.7, 227.0], [64.8, 227.0], [64.9, 228.0], [65.0, 228.0], [65.1, 228.0], [65.2, 229.0], [65.3, 230.0], [65.4, 230.0], [65.5, 230.0], [65.6, 230.0], [65.7, 230.0], [65.8, 230.0], [65.9, 230.0], [66.0, 230.0], [66.1, 231.0], [66.2, 232.0], [66.3, 232.0], [66.4, 233.0], [66.5, 233.0], [66.6, 234.0], [66.7, 235.0], [66.8, 236.0], [66.9, 236.0], [67.0, 236.0], [67.1, 236.0], [67.2, 236.0], [67.3, 237.0], [67.4, 238.0], [67.5, 239.0], [67.6, 240.0], [67.7, 241.0], [67.8, 241.0], [67.9, 241.0], [68.0, 242.0], [68.1, 243.0], [68.2, 243.0], [68.3, 243.0], [68.4, 243.0], [68.5, 244.0], [68.6, 244.0], [68.7, 245.0], [68.8, 245.0], [68.9, 245.0], [69.0, 245.0], [69.1, 245.0], [69.2, 246.0], [69.3, 246.0], [69.4, 246.0], [69.5, 247.0], [69.6, 247.0], [69.7, 248.0], [69.8, 248.0], [69.9, 248.0], [70.0, 248.0], [70.1, 249.0], [70.2, 250.0], [70.3, 251.0], [70.4, 251.0], [70.5, 251.0], [70.6, 252.0], [70.7, 252.0], [70.8, 252.0], [70.9, 253.0], [71.0, 253.0], [71.1, 253.0], [71.2, 253.0], [71.3, 254.0], [71.4, 254.0], [71.5, 255.0], [71.6, 255.0], [71.7, 255.0], [71.8, 256.0], [71.9, 257.0], [72.0, 257.0], [72.1, 258.0], [72.2, 259.0], [72.3, 259.0], [72.4, 259.0], [72.5, 259.0], [72.6, 259.0], [72.7, 260.0], [72.8, 260.0], [72.9, 261.0], [73.0, 261.0], [73.1, 261.0], [73.2, 262.0], [73.3, 263.0], [73.4, 263.0], [73.5, 263.0], [73.6, 264.0], [73.7, 264.0], [73.8, 265.0], [73.9, 265.0], [74.0, 266.0], [74.1, 267.0], [74.2, 267.0], [74.3, 267.0], [74.4, 267.0], [74.5, 267.0], [74.6, 268.0], [74.7, 268.0], [74.8, 269.0], [74.9, 269.0], [75.0, 270.0], [75.1, 270.0], [75.2, 270.0], [75.3, 270.0], [75.4, 270.0], [75.5, 271.0], [75.6, 271.0], [75.7, 271.0], [75.8, 271.0], [75.9, 272.0], [76.0, 272.0], [76.1, 273.0], [76.2, 273.0], [76.3, 275.0], [76.4, 275.0], [76.5, 275.0], [76.6, 275.0], [76.7, 277.0], [76.8, 278.0], [76.9, 278.0], [77.0, 278.0], [77.1, 278.0], [77.2, 279.0], [77.3, 280.0], [77.4, 280.0], [77.5, 280.0], [77.6, 280.0], [77.7, 280.0], [77.8, 281.0], [77.9, 281.0], [78.0, 282.0], [78.1, 282.0], [78.2, 282.0], [78.3, 283.0], [78.4, 283.0], [78.5, 283.0], [78.6, 283.0], [78.7, 283.0], [78.8, 283.0], [78.9, 283.0], [79.0, 284.0], [79.1, 284.0], [79.2, 284.0], [79.3, 284.0], [79.4, 284.0], [79.5, 284.0], [79.6, 285.0], [79.7, 285.0], [79.8, 285.0], [79.9, 286.0], [80.0, 286.0], [80.1, 286.0], [80.2, 286.0], [80.3, 286.0], [80.4, 287.0], [80.5, 287.0], [80.6, 287.0], [80.7, 288.0], [80.8, 288.0], [80.9, 289.0], [81.0, 289.0], [81.1, 289.0], [81.2, 290.0], [81.3, 291.0], [81.4, 291.0], [81.5, 291.0], [81.6, 291.0], [81.7, 291.0], [81.8, 291.0], [81.9, 292.0], [82.0, 292.0], [82.1, 292.0], [82.2, 292.0], [82.3, 293.0], [82.4, 294.0], [82.5, 294.0], [82.6, 294.0], [82.7, 296.0], [82.8, 296.0], [82.9, 297.0], [83.0, 297.0], [83.1, 297.0], [83.2, 298.0], [83.3, 298.0], [83.4, 301.0], [83.5, 301.0], [83.6, 301.0], [83.7, 301.0], [83.8, 302.0], [83.9, 302.0], [84.0, 302.0], [84.1, 303.0], [84.2, 305.0], [84.3, 306.0], [84.4, 306.0], [84.5, 306.0], [84.6, 306.0], [84.7, 306.0], [84.8, 307.0], [84.9, 307.0], [85.0, 307.0], [85.1, 307.0], [85.2, 308.0], [85.3, 308.0], [85.4, 308.0], [85.5, 308.0], [85.6, 308.0], [85.7, 309.0], [85.8, 309.0], [85.9, 310.0], [86.0, 311.0], [86.1, 311.0], [86.2, 311.0], [86.3, 311.0], [86.4, 312.0], [86.5, 314.0], [86.6, 314.0], [86.7, 314.0], [86.8, 314.0], [86.9, 314.0], [87.0, 314.0], [87.1, 315.0], [87.2, 315.0], [87.3, 317.0], [87.4, 317.0], [87.5, 319.0], [87.6, 320.0], [87.7, 320.0], [87.8, 320.0], [87.9, 321.0], [88.0, 321.0], [88.1, 321.0], [88.2, 321.0], [88.3, 322.0], [88.4, 323.0], [88.5, 323.0], [88.6, 324.0], [88.7, 325.0], [88.8, 326.0], [88.9, 326.0], [89.0, 326.0], [89.1, 327.0], [89.2, 329.0], [89.3, 331.0], [89.4, 331.0], [89.5, 331.0], [89.6, 332.0], [89.7, 332.0], [89.8, 333.0], [89.9, 334.0], [90.0, 334.0], [90.1, 334.0], [90.2, 334.0], [90.3, 334.0], [90.4, 335.0], [90.5, 335.0], [90.6, 335.0], [90.7, 335.0], [90.8, 335.0], [90.9, 336.0], [91.0, 337.0], [91.1, 338.0], [91.2, 338.0], [91.3, 338.0], [91.4, 338.0], [91.5, 339.0], [91.6, 339.0], [91.7, 339.0], [91.8, 341.0], [91.9, 342.0], [92.0, 344.0], [92.1, 344.0], [92.2, 344.0], [92.3, 345.0], [92.4, 347.0], [92.5, 347.0], [92.6, 348.0], [92.7, 348.0], [92.8, 348.0], [92.9, 349.0], [93.0, 349.0], [93.1, 353.0], [93.2, 354.0], [93.3, 354.0], [93.4, 356.0], [93.5, 358.0], [93.6, 358.0], [93.7, 359.0], [93.8, 361.0], [93.9, 362.0], [94.0, 365.0], [94.1, 368.0], [94.2, 379.0], [94.3, 379.0], [94.4, 380.0], [94.5, 382.0], [94.6, 384.0], [94.7, 385.0], [94.8, 385.0], [94.9, 386.0], [95.0, 387.0], [95.1, 387.0], [95.2, 388.0], [95.3, 389.0], [95.4, 391.0], [95.5, 392.0], [95.6, 393.0], [95.7, 393.0], [95.8, 394.0], [95.9, 394.0], [96.0, 399.0], [96.1, 400.0], [96.2, 401.0], [96.3, 402.0], [96.4, 403.0], [96.5, 404.0], [96.6, 406.0], [96.7, 410.0], [96.8, 411.0], [96.9, 414.0], [97.0, 416.0], [97.1, 417.0], [97.2, 420.0], [97.3, 427.0], [97.4, 431.0], [97.5, 434.0], [97.6, 436.0], [97.7, 450.0], [97.8, 451.0], [97.9, 456.0], [98.0, 457.0], [98.1, 461.0], [98.2, 463.0], [98.3, 467.0], [98.4, 468.0], [98.5, 471.0], [98.6, 471.0], [98.7, 475.0], [98.8, 476.0], [98.9, 476.0], [99.0, 476.0], [99.1, 479.0], [99.2, 480.0], [99.3, 481.0], [99.4, 484.0], [99.5, 487.0], [99.6, 496.0], [99.7, 502.0], [99.8, 510.0], [99.9, 511.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 345.0, "series": [{"data": [[600.0, 6.0], [700.0, 78.0], [200.0, 8.0], [800.0, 13.0], [900.0, 66.0], [1000.0, 142.0], [1100.0, 101.0], [300.0, 105.0], [1200.0, 52.0], [1300.0, 82.0], [1400.0, 19.0], [1500.0, 51.0], [100.0, 1.0], [400.0, 90.0], [1600.0, 130.0], [1700.0, 30.0], [1800.0, 1.0], [500.0, 25.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[0.0, 99.0], [600.0, 87.0], [700.0, 90.0], [800.0, 94.0], [900.0, 63.0], [1000.0, 24.0], [1100.0, 15.0], [1200.0, 15.0], [1300.0, 6.0], [1400.0, 7.0], [1500.0, 6.0], [100.0, 179.0], [1600.0, 4.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 4.0], [2100.0, 5.0], [2200.0, 2.0], [2300.0, 1.0], [2600.0, 1.0], [200.0, 89.0], [300.0, 58.0], [400.0, 71.0], [500.0, 71.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[0.0, 211.0], [300.0, 127.0], [100.0, 345.0], [200.0, 278.0], [400.0, 36.0], [500.0, 3.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 244.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1700.0, "series": [{"data": [[0.0, 1700.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1056.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 244.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 155.409, "minX": 1.69851432E12, "maxY": 155.409, "series": [{"data": [[1.69851432E12, 155.409]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851432E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15.0, "minX": 2.0, "maxY": 1699.0, "series": [{"data": [[44.0, 225.75], [45.0, 248.0], [46.0, 259.0], [47.0, 274.0], [49.0, 289.5], [51.0, 314.0], [50.0, 364.0], [52.0, 379.6], [53.0, 436.875], [55.0, 405.0], [54.0, 429.0], [56.0, 407.0], [57.0, 409.5], [58.0, 409.75], [59.0, 407.3333333333333], [60.0, 534.6666666666666], [61.0, 419.66666666666663], [62.0, 436.0], [63.0, 427.6666666666667], [64.0, 410.75], [66.0, 395.75], [65.0, 429.0], [67.0, 367.25], [68.0, 399.75], [69.0, 1081.4285714285713], [70.0, 384.6666666666667], [71.0, 891.1428571428571], [72.0, 369.5], [73.0, 839.375], [74.0, 928.5454545454545], [75.0, 331.0], [76.0, 345.3333333333333], [77.0, 321.0], [79.0, 1645.0], [78.0, 1631.6666666666667], [80.0, 1224.0], [81.0, 1500.75], [83.0, 396.0], [85.0, 401.0], [87.0, 913.8], [88.0, 809.0], [90.0, 820.0], [91.0, 349.5], [92.0, 370.45454545454544], [93.0, 388.125], [94.0, 436.4], [95.0, 1053.0], [99.0, 452.6666666666667], [97.0, 1174.0], [98.0, 1077.0], [100.0, 449.5], [102.0, 465.0], [103.0, 459.5], [101.0, 463.5], [104.0, 774.25], [107.0, 516.6666666666666], [108.0, 1384.75], [111.0, 1062.5], [110.0, 1699.0], [112.0, 1308.3333333333333], [115.0, 559.0], [114.0, 535.0], [118.0, 536.25], [117.0, 1379.7142857142858], [116.0, 969.0], [119.0, 556.6666666666666], [121.0, 586.0], [123.0, 519.0], [122.0, 573.0], [126.0, 635.0], [133.0, 697.0], [135.0, 990.8571428571429], [134.0, 1582.5555555555557], [138.0, 757.6666666666666], [140.0, 737.0], [139.0, 777.0], [141.0, 686.5], [142.0, 737.0], [143.0, 766.3333333333334], [137.0, 1652.75], [144.0, 1326.8333333333333], [145.0, 770.0], [146.0, 767.2222222222222], [147.0, 734.5], [149.0, 795.0], [150.0, 759.7692307692308], [151.0, 765.0], [153.0, 751.0], [152.0, 791.1666666666666], [158.0, 962.4000000000001], [155.0, 1064.8947368421052], [154.0, 1172.3333333333333], [159.0, 1200.6666666666667], [156.0, 1007.6], [157.0, 998.0], [162.0, 999.1666666666666], [165.0, 1012.3684210526316], [166.0, 999.4166666666666], [164.0, 961.5], [163.0, 1001.25], [167.0, 1330.3333333333333], [160.0, 1202.75], [161.0, 1042.0], [170.0, 969.375], [173.0, 1041.8124999999998], [172.0, 1061.888888888889], [169.0, 1069.7999999999997], [168.0, 1070.1428571428573], [171.0, 1081.9285714285713], [174.0, 1097.6153846153845], [175.0, 1154.8333333333333], [178.0, 1068.1], [177.0, 1093.8], [180.0, 1196.5], [176.0, 1094.2222222222222], [179.0, 1068.2857142857142], [183.0, 1667.0], [181.0, 1661.142857142857], [185.0, 1159.6249999999998], [186.0, 1099.8000000000002], [187.0, 1082.5000000000002], [184.0, 1143.0], [189.0, 1073.5], [191.0, 1004.5], [188.0, 1103.0], [190.0, 1098.0], [192.0, 1063.0], [196.0, 1108.0], [195.0, 1104.0], [199.0, 1470.6666666666667], [198.0, 1182.0], [200.0, 1533.1875], [201.0, 1414.5], [203.0, 1257.3076923076924], [204.0, 1334.7777777777778], [206.0, 1248.5000000000002], [207.0, 1284.375], [205.0, 1324.9], [202.0, 1343.533333333333], [210.0, 1262.5], [208.0, 1276.0], [209.0, 1267.0], [214.0, 1349.0], [212.0, 1440.5714285714287], [211.0, 1423.0], [215.0, 1425.0], [213.0, 1624.0], [222.0, 1509.7692307692307], [216.0, 1333.1666666666665], [217.0, 1368.6], [219.0, 1444.6666666666667], [220.0, 1360.6666666666667], [218.0, 1338.3333333333333], [221.0, 1426.0], [223.0, 1373.2], [225.0, 1320.5], [224.0, 1452.75], [226.0, 1339.0], [227.0, 1346.2307692307693], [228.0, 1303.8], [229.0, 1455.0], [230.0, 1504.0], [231.0, 1510.8333333333335], [232.0, 1480.5714285714287], [236.0, 1420.1666666666667], [238.0, 1576.3333333333333], [237.0, 1586.0], [235.0, 1613.0], [234.0, 1584.0], [246.0, 1630.5], [244.0, 1604.5], [243.0, 1604.0], [241.0, 1616.5], [240.0, 1635.0], [255.0, 1658.7272727272727], [254.0, 1648.0], [256.0, 1634.3333333333333], [259.0, 1654.6666666666667]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[155.47199999999978, 1046.250000000001]], "isOverall": false, "label": "Express Js Http Call-Aggregated", "isController": false}, {"data": [[9.0, 589.5], [14.0, 605.0], [17.0, 443.0], [20.0, 477.14285714285717], [23.0, 435.99999999999994], [25.0, 445.0], [27.0, 540.0], [33.0, 498.57142857142856], [35.0, 376.0], [37.0, 571.0], [36.0, 521.0], [46.0, 22.5], [47.0, 424.0], [49.0, 32.0], [48.0, 489.0], [51.0, 245.44444444444446], [50.0, 69.0], [52.0, 61.0], [53.0, 47.666666666666664], [55.0, 65.2], [54.0, 107.75], [56.0, 41.0], [57.0, 151.0], [58.0, 84.66666666666666], [59.0, 120.41666666666666], [60.0, 109.33333333333333], [61.0, 73.57142857142857], [63.0, 109.75], [64.0, 271.75], [66.0, 144.33333333333331], [65.0, 65.0], [67.0, 255.33333333333334], [68.0, 148.42857142857144], [69.0, 141.2], [70.0, 300.0], [71.0, 245.66666666666666], [74.0, 167.6], [75.0, 290.0], [73.0, 214.0], [76.0, 313.3333333333333], [79.0, 172.0], [78.0, 102.5], [81.0, 493.3636363636364], [80.0, 637.0], [85.0, 382.75], [84.0, 174.0], [87.0, 434.57142857142856], [90.0, 323.875], [91.0, 163.0], [89.0, 305.75], [88.0, 314.4], [92.0, 399.2], [93.0, 391.71428571428567], [95.0, 360.7142857142857], [94.0, 241.0], [99.0, 581.5], [98.0, 563.4], [97.0, 95.0], [100.0, 306.75], [102.0, 436.5], [103.0, 410.66666666666663], [104.0, 318.5], [106.0, 729.0], [107.0, 548.0], [111.0, 670.5], [112.0, 486.5], [115.0, 391.0], [113.0, 303.0], [116.0, 286.0], [118.0, 438.5], [119.0, 292.5], [117.0, 358.75], [121.0, 812.0], [125.0, 756.0], [126.0, 698.0], [129.0, 512.125], [132.0, 949.0], [133.0, 979.0], [135.0, 616.5], [134.0, 529.1666666666667], [128.0, 523.5], [136.0, 438.0], [138.0, 638.6666666666666], [137.0, 498.33333333333337], [140.0, 706.8], [141.0, 550.0], [142.0, 884.5], [143.0, 574.75], [144.0, 380.75], [145.0, 973.0], [146.0, 764.0], [147.0, 241.0], [149.0, 727.0], [148.0, 898.5], [150.0, 624.1538461538461], [151.0, 521.6666666666666], [154.0, 464.0909090909091], [158.0, 482.6666666666666], [159.0, 323.87500000000006], [157.0, 393.14285714285717], [155.0, 348.375], [156.0, 350.2], [153.0, 212.5], [160.0, 451.0], [163.0, 678.7272727272727], [162.0, 559.2857142857143], [165.0, 586.375], [166.0, 456.93333333333345], [167.0, 647.2222222222222], [164.0, 449.2], [161.0, 359.3333333333333], [170.0, 574.7142857142857], [171.0, 242.4], [172.0, 499.3333333333333], [169.0, 682.5454545454545], [168.0, 486.9499999999999], [174.0, 452.91666666666663], [173.0, 325.1], [175.0, 389.875], [177.0, 604.8421052631579], [178.0, 573.2], [176.0, 442.4], [179.0, 95.0], [183.0, 488.6666666666667], [181.0, 172.0], [185.0, 574.5333333333333], [186.0, 588.0], [187.0, 482.85714285714283], [184.0, 133.0], [190.0, 542.0], [188.0, 814.0], [191.0, 654.4285714285714], [189.0, 125.25], [192.0, 848.2], [193.0, 449.6], [196.0, 609.6], [198.0, 791.0], [199.0, 530.5714285714286], [202.0, 685.6363636363636], [201.0, 1172.5], [200.0, 606.6153846153846], [204.0, 647.6666666666666], [205.0, 696.7142857142857], [207.0, 386.3], [206.0, 893.2499999999999], [203.0, 595.3333333333333], [210.0, 125.0], [208.0, 1010.6666666666667], [212.0, 526.6666666666666], [213.0, 913.8], [215.0, 927.0], [217.0, 855.25], [220.0, 1145.8333333333335], [219.0, 904.375], [221.0, 1408.4285714285713], [222.0, 895.6666666666666], [216.0, 1030.0], [218.0, 978.3333333333334], [223.0, 928.5], [225.0, 873.5833333333333], [227.0, 807.2272727272726], [228.0, 775.9], [230.0, 1121.7333333333333], [226.0, 1018.6666666666666], [224.0, 736.0], [229.0, 210.5], [234.0, 1304.0], [232.0, 720.75], [236.0, 815.5], [238.0, 684.6875], [237.0, 814.5], [239.0, 872.0], [242.0, 793.0], [243.0, 1013.3333333333334], [240.0, 877.8571428571429], [241.0, 754.6666666666666], [244.0, 829.5], [249.0, 669.3333333333334], [252.0, 1048.0], [253.0, 943.0], [254.0, 961.1428571428571], [255.0, 492.0], [256.0, 692.0], [259.0, 442.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[155.986, 549.2970000000003]], "isOverall": false, "label": "Gin Gonic Http Call-Aggregated", "isController": false}, {"data": [[2.0, 18.0], [4.0, 20.5], [5.0, 25.0], [6.0, 40.0], [9.0, 48.666666666666664], [11.0, 39.0], [13.0, 28.0], [14.0, 27.0], [17.0, 47.0], [19.0, 39.5], [20.0, 48.0], [21.0, 41.0], [22.0, 23.0], [23.0, 23.0], [24.0, 16.0], [25.0, 31.0], [26.0, 32.0], [27.0, 28.0], [28.0, 23.0], [29.0, 23.0], [31.0, 19.5], [33.0, 26.0], [32.0, 15.0], [35.0, 18.0], [34.0, 19.0], [37.0, 34.0], [36.0, 25.0], [38.0, 32.0], [41.0, 43.0], [40.0, 28.5], [42.0, 88.0], [45.0, 81.33333333333333], [47.0, 72.0], [49.0, 113.0], [48.0, 140.0], [51.0, 65.0], [50.0, 90.5], [52.0, 42.0], [53.0, 75.8], [55.0, 69.72727272727273], [54.0, 73.66666666666667], [56.0, 45.6], [57.0, 41.0], [59.0, 66.83333333333334], [58.0, 107.66666666666666], [60.0, 72.0], [61.0, 62.888888888888886], [62.0, 76.2], [63.0, 69.5], [64.0, 81.0], [67.0, 91.0], [66.0, 108.125], [65.0, 66.0], [68.0, 107.5], [69.0, 91.4], [70.0, 107.0], [71.0, 137.5], [72.0, 102.0], [74.0, 123.5], [75.0, 127.5], [73.0, 128.5], [77.0, 78.0], [76.0, 105.83333333333333], [79.0, 128.0], [78.0, 114.0], [81.0, 131.0], [80.0, 163.0], [85.0, 182.4], [86.0, 143.5], [87.0, 165.0], [89.0, 148.0], [91.0, 209.5], [90.0, 306.0], [88.0, 200.0], [93.0, 143.66666666666666], [92.0, 160.5], [94.0, 193.77777777777777], [95.0, 182.85714285714286], [99.0, 254.6], [98.0, 225.14285714285714], [97.0, 218.33333333333334], [96.0, 189.66666666666666], [100.0, 253.33333333333334], [103.0, 261.4], [104.0, 293.25], [105.0, 314.75], [106.0, 252.0], [111.0, 271.0], [110.0, 236.0], [109.0, 311.0], [108.0, 199.0], [112.0, 295.0], [115.0, 285.25], [114.0, 310.0], [118.0, 343.0], [117.0, 286.0], [119.0, 347.0], [120.0, 351.5], [122.0, 291.0], [123.0, 310.3333333333333], [124.0, 330.6666666666667], [126.0, 222.0], [133.0, 302.5], [134.0, 314.6666666666667], [135.0, 248.0], [132.0, 169.0], [130.0, 194.0], [129.0, 221.0], [128.0, 293.0], [136.0, 450.0], [138.0, 265.5], [140.0, 385.5], [141.0, 257.0], [139.0, 385.5], [143.0, 258.3333333333333], [142.0, 280.0], [137.0, 134.0], [144.0, 265.8333333333333], [146.0, 290.0], [148.0, 258.6666666666667], [147.0, 239.0], [149.0, 302.6666666666667], [151.0, 309.8181818181818], [150.0, 271.0], [154.0, 194.8125], [159.0, 235.14285714285717], [158.0, 283.375], [157.0, 210.5], [156.0, 322.0], [155.0, 225.8095238095238], [153.0, 289.3333333333333], [152.0, 321.0], [160.0, 238.2], [163.0, 214.25], [162.0, 281.6666666666667], [166.0, 229.6923076923077], [167.0, 212.72222222222223], [164.0, 249.375], [165.0, 238.6], [161.0, 229.0], [170.0, 187.9375], [173.0, 183.8235294117647], [171.0, 136.42857142857144], [172.0, 215.2666666666667], [169.0, 169.5], [168.0, 212.27272727272728], [174.0, 186.36363636363637], [175.0, 141.0], [178.0, 158.27777777777777], [181.0, 173.0], [180.0, 258.0], [177.0, 147.23076923076923], [176.0, 138.8], [179.0, 116.28571428571429], [183.0, 148.0], [182.0, 150.0], [185.0, 127.16666666666666], [186.0, 137.75], [187.0, 129.36363636363635], [191.0, 121.375], [190.0, 117.5], [189.0, 110.4], [188.0, 104.0], [184.0, 174.0], [192.0, 136.66666666666666], [193.0, 87.66666666666667], [196.0, 93.0], [195.0, 65.0], [194.0, 65.0], [199.0, 159.72727272727275], [200.0, 122.8], [202.0, 163.25], [201.0, 210.5], [207.0, 211.8], [206.0, 78.28571428571428], [205.0, 111.81818181818183], [203.0, 103.69999999999999], [204.0, 160.8], [210.0, 218.2], [208.0, 187.9], [209.0, 209.6], [213.0, 267.83333333333337], [212.0, 258.6666666666667], [211.0, 266.6], [215.0, 266.3333333333333], [214.0, 268.5], [220.0, 216.0], [219.0, 295.66666666666663], [221.0, 237.0], [222.0, 229.0909090909091], [218.0, 281.49999999999994], [216.0, 221.0], [217.0, 281.25], [223.0, 275.0], [224.0, 226.16666666666669], [225.0, 200.72727272727275], [227.0, 199.45454545454547], [228.0, 236.9], [229.0, 206.33333333333334], [231.0, 259.5], [230.0, 181.8], [226.0, 244.5], [236.0, 210.5], [235.0, 213.25], [234.0, 191.75], [233.0, 189.0], [232.0, 257.3333333333333], [239.0, 311.0], [238.0, 229.85714285714286], [237.0, 185.0], [247.0, 414.0], [246.0, 422.0], [244.0, 277.3333333333333], [243.0, 173.0], [242.0, 258.5], [241.0, 253.33333333333334], [240.0, 284.25], [252.0, 358.5], [254.0, 438.75], [255.0, 454.25], [253.0, 482.6], [249.0, 471.0], [257.0, 464.5], [256.0, 448.0], [259.0, 486.0], [258.0, 481.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}, {"data": [[154.76799999999972, 193.89000000000004]], "isOverall": false, "label": "Spring Boot Http Call-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 259.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6750.0, "minX": 1.69851432E12, "maxY": 910416.6666666666, "series": [{"data": [[1.69851432E12, 910416.6666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69851432E12, 6750.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851432E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 193.89000000000004, "minX": 1.69851432E12, "maxY": 1046.250000000001, "series": [{"data": [[1.69851432E12, 1046.250000000001]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.69851432E12, 549.2970000000003]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.69851432E12, 193.89000000000004]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851432E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 190.5840000000001, "minX": 1.69851432E12, "maxY": 1045.7600000000002, "series": [{"data": [[1.69851432E12, 1045.7600000000002]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.69851432E12, 547.3100000000014]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.69851432E12, 190.5840000000001]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851432E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.735999999999999, "minX": 1.69851432E12, "maxY": 3.8640000000000034, "series": [{"data": [[1.69851432E12, 3.8640000000000034]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.69851432E12, 1.735999999999999]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.69851432E12, 1.8149999999999997]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851432E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.69851432E12, "maxY": 2637.0, "series": [{"data": [[1.69851432E12, 2637.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69851432E12, 1355.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69851432E12, 1759.9399999999987]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69851432E12, 1630.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69851432E12, 15.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69851432E12, 399.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851432E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 124.0, "minX": 175.0, "maxY": 980.0, "series": [{"data": [[264.0, 630.5], [265.0, 707.0], [305.0, 467.0], [175.0, 435.0], [344.0, 486.5], [196.0, 124.0], [233.0, 715.0], [239.0, 734.0], [237.0, 471.0], [250.0, 334.0], [255.0, 980.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 344.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 121.0, "minX": 175.0, "maxY": 980.0, "series": [{"data": [[264.0, 630.0], [265.0, 699.0], [305.0, 462.0], [175.0, 435.0], [344.0, 486.5], [196.0, 121.0], [233.0, 711.0], [239.0, 734.0], [237.0, 461.5], [250.0, 332.0], [255.0, 980.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 344.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.69851432E12, "maxY": 50.0, "series": [{"data": [[1.69851432E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851432E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.69851432E12, "maxY": 50.0, "series": [{"data": [[1.69851432E12, 50.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851432E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.69851432E12, "maxY": 16.666666666666668, "series": [{"data": [[1.69851432E12, 16.666666666666668]], "isOverall": false, "label": "Gin Gonic Http Call-success", "isController": false}, {"data": [[1.69851432E12, 16.666666666666668]], "isOverall": false, "label": "Spring Boot Http Call-success", "isController": false}, {"data": [[1.69851432E12, 16.666666666666668]], "isOverall": false, "label": "Express Js Http Call-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851432E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.69851432E12, "maxY": 50.0, "series": [{"data": [[1.69851432E12, 50.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851432E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

