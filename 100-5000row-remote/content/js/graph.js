/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1869.0, "minX": 0.0, "maxY": 101752.0, "series": [{"data": [[0.0, 2641.0], [0.1, 2641.0], [0.2, 2641.0], [0.3, 2641.0], [0.4, 2641.0], [0.5, 2641.0], [0.6, 2641.0], [0.7, 2641.0], [0.8, 2641.0], [0.9, 2641.0], [1.0, 2761.0], [1.1, 2761.0], [1.2, 2761.0], [1.3, 2761.0], [1.4, 2761.0], [1.5, 2761.0], [1.6, 2761.0], [1.7, 2761.0], [1.8, 2761.0], [1.9, 2761.0], [2.0, 2918.0], [2.1, 2918.0], [2.2, 2918.0], [2.3, 2918.0], [2.4, 2918.0], [2.5, 2918.0], [2.6, 2918.0], [2.7, 2918.0], [2.8, 2918.0], [2.9, 2918.0], [3.0, 3122.0], [3.1, 3122.0], [3.2, 3122.0], [3.3, 3122.0], [3.4, 3122.0], [3.5, 3122.0], [3.6, 3122.0], [3.7, 3122.0], [3.8, 3122.0], [3.9, 3122.0], [4.0, 4723.0], [4.1, 4723.0], [4.2, 4723.0], [4.3, 4723.0], [4.4, 4723.0], [4.5, 4723.0], [4.6, 4723.0], [4.7, 4723.0], [4.8, 4723.0], [4.9, 4723.0], [5.0, 4776.0], [5.1, 4776.0], [5.2, 4776.0], [5.3, 4776.0], [5.4, 4776.0], [5.5, 4776.0], [5.6, 4776.0], [5.7, 4776.0], [5.8, 4776.0], [5.9, 4776.0], [6.0, 5785.0], [6.1, 5785.0], [6.2, 5785.0], [6.3, 5785.0], [6.4, 5785.0], [6.5, 5785.0], [6.6, 5785.0], [6.7, 5785.0], [6.8, 5785.0], [6.9, 5785.0], [7.0, 6658.0], [7.1, 6658.0], [7.2, 6658.0], [7.3, 6658.0], [7.4, 6658.0], [7.5, 6658.0], [7.6, 6658.0], [7.7, 6658.0], [7.8, 6658.0], [7.9, 6658.0], [8.0, 6720.0], [8.1, 6720.0], [8.2, 6720.0], [8.3, 6720.0], [8.4, 6720.0], [8.5, 6720.0], [8.6, 6720.0], [8.7, 6720.0], [8.8, 6720.0], [8.9, 6720.0], [9.0, 6760.0], [9.1, 6760.0], [9.2, 6760.0], [9.3, 6760.0], [9.4, 6760.0], [9.5, 6760.0], [9.6, 6760.0], [9.7, 6760.0], [9.8, 6760.0], [9.9, 6760.0], [10.0, 6799.0], [10.1, 6799.0], [10.2, 6799.0], [10.3, 6799.0], [10.4, 6799.0], [10.5, 6799.0], [10.6, 6799.0], [10.7, 6799.0], [10.8, 6799.0], [10.9, 6799.0], [11.0, 7460.0], [11.1, 7460.0], [11.2, 7460.0], [11.3, 7460.0], [11.4, 7460.0], [11.5, 7460.0], [11.6, 7460.0], [11.7, 7460.0], [11.8, 7460.0], [11.9, 7460.0], [12.0, 12041.0], [12.1, 12041.0], [12.2, 12041.0], [12.3, 12041.0], [12.4, 12041.0], [12.5, 12041.0], [12.6, 12041.0], [12.7, 12041.0], [12.8, 12041.0], [12.9, 12041.0], [13.0, 12249.0], [13.1, 12249.0], [13.2, 12249.0], [13.3, 12249.0], [13.4, 12249.0], [13.5, 12249.0], [13.6, 12249.0], [13.7, 12249.0], [13.8, 12249.0], [13.9, 12249.0], [14.0, 12509.0], [14.1, 12509.0], [14.2, 12509.0], [14.3, 12509.0], [14.4, 12509.0], [14.5, 12509.0], [14.6, 12509.0], [14.7, 12509.0], [14.8, 12509.0], [14.9, 12509.0], [15.0, 14030.0], [15.1, 14030.0], [15.2, 14030.0], [15.3, 14030.0], [15.4, 14030.0], [15.5, 14030.0], [15.6, 14030.0], [15.7, 14030.0], [15.8, 14030.0], [15.9, 14030.0], [16.0, 15201.0], [16.1, 15201.0], [16.2, 15201.0], [16.3, 15201.0], [16.4, 15201.0], [16.5, 15201.0], [16.6, 15201.0], [16.7, 15201.0], [16.8, 15201.0], [16.9, 15201.0], [17.0, 15956.0], [17.1, 15956.0], [17.2, 15956.0], [17.3, 15956.0], [17.4, 15956.0], [17.5, 15956.0], [17.6, 15956.0], [17.7, 15956.0], [17.8, 15956.0], [17.9, 15956.0], [18.0, 16045.0], [18.1, 16045.0], [18.2, 16045.0], [18.3, 16045.0], [18.4, 16045.0], [18.5, 16045.0], [18.6, 16045.0], [18.7, 16045.0], [18.8, 16045.0], [18.9, 16045.0], [19.0, 17091.0], [19.1, 17091.0], [19.2, 17091.0], [19.3, 17091.0], [19.4, 17091.0], [19.5, 17091.0], [19.6, 17091.0], [19.7, 17091.0], [19.8, 17091.0], [19.9, 17091.0], [20.0, 18011.0], [20.1, 18011.0], [20.2, 18011.0], [20.3, 18011.0], [20.4, 18011.0], [20.5, 18011.0], [20.6, 18011.0], [20.7, 18011.0], [20.8, 18011.0], [20.9, 18011.0], [21.0, 22032.0], [21.1, 22032.0], [21.2, 22032.0], [21.3, 22032.0], [21.4, 22032.0], [21.5, 22032.0], [21.6, 22032.0], [21.7, 22032.0], [21.8, 22032.0], [21.9, 22032.0], [22.0, 22132.0], [22.1, 22132.0], [22.2, 22132.0], [22.3, 22132.0], [22.4, 22132.0], [22.5, 22132.0], [22.6, 22132.0], [22.7, 22132.0], [22.8, 22132.0], [22.9, 22132.0], [23.0, 23578.0], [23.1, 23578.0], [23.2, 23578.0], [23.3, 23578.0], [23.4, 23578.0], [23.5, 23578.0], [23.6, 23578.0], [23.7, 23578.0], [23.8, 23578.0], [23.9, 23578.0], [24.0, 24957.0], [24.1, 24957.0], [24.2, 24957.0], [24.3, 24957.0], [24.4, 24957.0], [24.5, 24957.0], [24.6, 24957.0], [24.7, 24957.0], [24.8, 24957.0], [24.9, 24957.0], [25.0, 25570.0], [25.1, 25570.0], [25.2, 25570.0], [25.3, 25570.0], [25.4, 25570.0], [25.5, 25570.0], [25.6, 25570.0], [25.7, 25570.0], [25.8, 25570.0], [25.9, 25570.0], [26.0, 26143.0], [26.1, 26143.0], [26.2, 26143.0], [26.3, 26143.0], [26.4, 26143.0], [26.5, 26143.0], [26.6, 26143.0], [26.7, 26143.0], [26.8, 26143.0], [26.9, 26143.0], [27.0, 26500.0], [27.1, 26500.0], [27.2, 26500.0], [27.3, 26500.0], [27.4, 26500.0], [27.5, 26500.0], [27.6, 26500.0], [27.7, 26500.0], [27.8, 26500.0], [27.9, 26500.0], [28.0, 26690.0], [28.1, 26690.0], [28.2, 26690.0], [28.3, 26690.0], [28.4, 26690.0], [28.5, 26690.0], [28.6, 26690.0], [28.7, 26690.0], [28.8, 26690.0], [28.9, 26690.0], [29.0, 28602.0], [29.1, 28602.0], [29.2, 28602.0], [29.3, 28602.0], [29.4, 28602.0], [29.5, 28602.0], [29.6, 28602.0], [29.7, 28602.0], [29.8, 28602.0], [29.9, 28602.0], [30.0, 30149.0], [30.1, 30149.0], [30.2, 30149.0], [30.3, 30149.0], [30.4, 30149.0], [30.5, 30149.0], [30.6, 30149.0], [30.7, 30149.0], [30.8, 30149.0], [30.9, 30149.0], [31.0, 31383.0], [31.1, 31383.0], [31.2, 31383.0], [31.3, 31383.0], [31.4, 31383.0], [31.5, 31383.0], [31.6, 31383.0], [31.7, 31383.0], [31.8, 31383.0], [31.9, 31383.0], [32.0, 31760.0], [32.1, 31760.0], [32.2, 31760.0], [32.3, 31760.0], [32.4, 31760.0], [32.5, 31760.0], [32.6, 31760.0], [32.7, 31760.0], [32.8, 31760.0], [32.9, 31760.0], [33.0, 32356.0], [33.1, 32356.0], [33.2, 32356.0], [33.3, 32356.0], [33.4, 32356.0], [33.5, 32356.0], [33.6, 32356.0], [33.7, 32356.0], [33.8, 32356.0], [33.9, 32356.0], [34.0, 36517.0], [34.1, 36517.0], [34.2, 36517.0], [34.3, 36517.0], [34.4, 36517.0], [34.5, 36517.0], [34.6, 36517.0], [34.7, 36517.0], [34.8, 36517.0], [34.9, 36517.0], [35.0, 37518.0], [35.1, 37518.0], [35.2, 37518.0], [35.3, 37518.0], [35.4, 37518.0], [35.5, 37518.0], [35.6, 37518.0], [35.7, 37518.0], [35.8, 37518.0], [35.9, 37518.0], [36.0, 37600.0], [36.1, 37600.0], [36.2, 37600.0], [36.3, 37600.0], [36.4, 37600.0], [36.5, 37600.0], [36.6, 37600.0], [36.7, 37600.0], [36.8, 37600.0], [36.9, 37600.0], [37.0, 38271.0], [37.1, 38271.0], [37.2, 38271.0], [37.3, 38271.0], [37.4, 38271.0], [37.5, 38271.0], [37.6, 38271.0], [37.7, 38271.0], [37.8, 38271.0], [37.9, 38271.0], [38.0, 39707.0], [38.1, 39707.0], [38.2, 39707.0], [38.3, 39707.0], [38.4, 39707.0], [38.5, 39707.0], [38.6, 39707.0], [38.7, 39707.0], [38.8, 39707.0], [38.9, 39707.0], [39.0, 39795.0], [39.1, 39795.0], [39.2, 39795.0], [39.3, 39795.0], [39.4, 39795.0], [39.5, 39795.0], [39.6, 39795.0], [39.7, 39795.0], [39.8, 39795.0], [39.9, 39795.0], [40.0, 40151.0], [40.1, 40151.0], [40.2, 40151.0], [40.3, 40151.0], [40.4, 40151.0], [40.5, 40151.0], [40.6, 40151.0], [40.7, 40151.0], [40.8, 40151.0], [40.9, 40151.0], [41.0, 40360.0], [41.1, 40360.0], [41.2, 40360.0], [41.3, 40360.0], [41.4, 40360.0], [41.5, 40360.0], [41.6, 40360.0], [41.7, 40360.0], [41.8, 40360.0], [41.9, 40360.0], [42.0, 40607.0], [42.1, 40607.0], [42.2, 40607.0], [42.3, 40607.0], [42.4, 40607.0], [42.5, 40607.0], [42.6, 40607.0], [42.7, 40607.0], [42.8, 40607.0], [42.9, 40607.0], [43.0, 45736.0], [43.1, 45736.0], [43.2, 45736.0], [43.3, 45736.0], [43.4, 45736.0], [43.5, 45736.0], [43.6, 45736.0], [43.7, 45736.0], [43.8, 45736.0], [43.9, 45736.0], [44.0, 46564.0], [44.1, 46564.0], [44.2, 46564.0], [44.3, 46564.0], [44.4, 46564.0], [44.5, 46564.0], [44.6, 46564.0], [44.7, 46564.0], [44.8, 46564.0], [44.9, 46564.0], [45.0, 47686.0], [45.1, 47686.0], [45.2, 47686.0], [45.3, 47686.0], [45.4, 47686.0], [45.5, 47686.0], [45.6, 47686.0], [45.7, 47686.0], [45.8, 47686.0], [45.9, 47686.0], [46.0, 48239.0], [46.1, 48239.0], [46.2, 48239.0], [46.3, 48239.0], [46.4, 48239.0], [46.5, 48239.0], [46.6, 48239.0], [46.7, 48239.0], [46.8, 48239.0], [46.9, 48239.0], [47.0, 48935.0], [47.1, 48935.0], [47.2, 48935.0], [47.3, 48935.0], [47.4, 48935.0], [47.5, 48935.0], [47.6, 48935.0], [47.7, 48935.0], [47.8, 48935.0], [47.9, 48935.0], [48.0, 49051.0], [48.1, 49051.0], [48.2, 49051.0], [48.3, 49051.0], [48.4, 49051.0], [48.5, 49051.0], [48.6, 49051.0], [48.7, 49051.0], [48.8, 49051.0], [48.9, 49051.0], [49.0, 49592.0], [49.1, 49592.0], [49.2, 49592.0], [49.3, 49592.0], [49.4, 49592.0], [49.5, 49592.0], [49.6, 49592.0], [49.7, 49592.0], [49.8, 49592.0], [49.9, 49592.0], [50.0, 50782.0], [50.1, 50782.0], [50.2, 50782.0], [50.3, 50782.0], [50.4, 50782.0], [50.5, 50782.0], [50.6, 50782.0], [50.7, 50782.0], [50.8, 50782.0], [50.9, 50782.0], [51.0, 51763.0], [51.1, 51763.0], [51.2, 51763.0], [51.3, 51763.0], [51.4, 51763.0], [51.5, 51763.0], [51.6, 51763.0], [51.7, 51763.0], [51.8, 51763.0], [51.9, 51763.0], [52.0, 54677.0], [52.1, 54677.0], [52.2, 54677.0], [52.3, 54677.0], [52.4, 54677.0], [52.5, 54677.0], [52.6, 54677.0], [52.7, 54677.0], [52.8, 54677.0], [52.9, 54677.0], [53.0, 56607.0], [53.1, 56607.0], [53.2, 56607.0], [53.3, 56607.0], [53.4, 56607.0], [53.5, 56607.0], [53.6, 56607.0], [53.7, 56607.0], [53.8, 56607.0], [53.9, 56607.0], [54.0, 57465.0], [54.1, 57465.0], [54.2, 57465.0], [54.3, 57465.0], [54.4, 57465.0], [54.5, 57465.0], [54.6, 57465.0], [54.7, 57465.0], [54.8, 57465.0], [54.9, 57465.0], [55.0, 58051.0], [55.1, 58051.0], [55.2, 58051.0], [55.3, 58051.0], [55.4, 58051.0], [55.5, 58051.0], [55.6, 58051.0], [55.7, 58051.0], [55.8, 58051.0], [55.9, 58051.0], [56.0, 58463.0], [56.1, 58463.0], [56.2, 58463.0], [56.3, 58463.0], [56.4, 58463.0], [56.5, 58463.0], [56.6, 58463.0], [56.7, 58463.0], [56.8, 58463.0], [56.9, 58463.0], [57.0, 59505.0], [57.1, 59505.0], [57.2, 59505.0], [57.3, 59505.0], [57.4, 59505.0], [57.5, 59505.0], [57.6, 59505.0], [57.7, 59505.0], [57.8, 59505.0], [57.9, 59505.0], [58.0, 61075.0], [58.1, 61075.0], [58.2, 61075.0], [58.3, 61075.0], [58.4, 61075.0], [58.5, 61075.0], [58.6, 61075.0], [58.7, 61075.0], [58.8, 61075.0], [58.9, 61075.0], [59.0, 62763.0], [59.1, 62763.0], [59.2, 62763.0], [59.3, 62763.0], [59.4, 62763.0], [59.5, 62763.0], [59.6, 62763.0], [59.7, 62763.0], [59.8, 62763.0], [59.9, 62763.0], [60.0, 62870.0], [60.1, 62870.0], [60.2, 62870.0], [60.3, 62870.0], [60.4, 62870.0], [60.5, 62870.0], [60.6, 62870.0], [60.7, 62870.0], [60.8, 62870.0], [60.9, 62870.0], [61.0, 65437.0], [61.1, 65437.0], [61.2, 65437.0], [61.3, 65437.0], [61.4, 65437.0], [61.5, 65437.0], [61.6, 65437.0], [61.7, 65437.0], [61.8, 65437.0], [61.9, 65437.0], [62.0, 65693.0], [62.1, 65693.0], [62.2, 65693.0], [62.3, 65693.0], [62.4, 65693.0], [62.5, 65693.0], [62.6, 65693.0], [62.7, 65693.0], [62.8, 65693.0], [62.9, 65693.0], [63.0, 65716.0], [63.1, 65716.0], [63.2, 65716.0], [63.3, 65716.0], [63.4, 65716.0], [63.5, 65716.0], [63.6, 65716.0], [63.7, 65716.0], [63.8, 65716.0], [63.9, 65716.0], [64.0, 66149.0], [64.1, 66149.0], [64.2, 66149.0], [64.3, 66149.0], [64.4, 66149.0], [64.5, 66149.0], [64.6, 66149.0], [64.7, 66149.0], [64.8, 66149.0], [64.9, 66149.0], [65.0, 67442.0], [65.1, 67442.0], [65.2, 67442.0], [65.3, 67442.0], [65.4, 67442.0], [65.5, 67442.0], [65.6, 67442.0], [65.7, 67442.0], [65.8, 67442.0], [65.9, 67442.0], [66.0, 67690.0], [66.1, 67690.0], [66.2, 67690.0], [66.3, 67690.0], [66.4, 67690.0], [66.5, 67690.0], [66.6, 67690.0], [66.7, 67690.0], [66.8, 67690.0], [66.9, 67690.0], [67.0, 67804.0], [67.1, 67804.0], [67.2, 67804.0], [67.3, 67804.0], [67.4, 67804.0], [67.5, 67804.0], [67.6, 67804.0], [67.7, 67804.0], [67.8, 67804.0], [67.9, 67804.0], [68.0, 68944.0], [68.1, 68944.0], [68.2, 68944.0], [68.3, 68944.0], [68.4, 68944.0], [68.5, 68944.0], [68.6, 68944.0], [68.7, 68944.0], [68.8, 68944.0], [68.9, 68944.0], [69.0, 70190.0], [69.1, 70190.0], [69.2, 70190.0], [69.3, 70190.0], [69.4, 70190.0], [69.5, 70190.0], [69.6, 70190.0], [69.7, 70190.0], [69.8, 70190.0], [69.9, 70190.0], [70.0, 70492.0], [70.1, 70492.0], [70.2, 70492.0], [70.3, 70492.0], [70.4, 70492.0], [70.5, 70492.0], [70.6, 70492.0], [70.7, 70492.0], [70.8, 70492.0], [70.9, 70492.0], [71.0, 72407.0], [71.1, 72407.0], [71.2, 72407.0], [71.3, 72407.0], [71.4, 72407.0], [71.5, 72407.0], [71.6, 72407.0], [71.7, 72407.0], [71.8, 72407.0], [71.9, 72407.0], [72.0, 73233.0], [72.1, 73233.0], [72.2, 73233.0], [72.3, 73233.0], [72.4, 73233.0], [72.5, 73233.0], [72.6, 73233.0], [72.7, 73233.0], [72.8, 73233.0], [72.9, 73233.0], [73.0, 75138.0], [73.1, 75138.0], [73.2, 75138.0], [73.3, 75138.0], [73.4, 75138.0], [73.5, 75138.0], [73.6, 75138.0], [73.7, 75138.0], [73.8, 75138.0], [73.9, 75138.0], [74.0, 76617.0], [74.1, 76617.0], [74.2, 76617.0], [74.3, 76617.0], [74.4, 76617.0], [74.5, 76617.0], [74.6, 76617.0], [74.7, 76617.0], [74.8, 76617.0], [74.9, 76617.0], [75.0, 77228.0], [75.1, 77228.0], [75.2, 77228.0], [75.3, 77228.0], [75.4, 77228.0], [75.5, 77228.0], [75.6, 77228.0], [75.7, 77228.0], [75.8, 77228.0], [75.9, 77228.0], [76.0, 77480.0], [76.1, 77480.0], [76.2, 77480.0], [76.3, 77480.0], [76.4, 77480.0], [76.5, 77480.0], [76.6, 77480.0], [76.7, 77480.0], [76.8, 77480.0], [76.9, 77480.0], [77.0, 78650.0], [77.1, 78650.0], [77.2, 78650.0], [77.3, 78650.0], [77.4, 78650.0], [77.5, 78650.0], [77.6, 78650.0], [77.7, 78650.0], [77.8, 78650.0], [77.9, 78650.0], [78.0, 78811.0], [78.1, 78811.0], [78.2, 78811.0], [78.3, 78811.0], [78.4, 78811.0], [78.5, 78811.0], [78.6, 78811.0], [78.7, 78811.0], [78.8, 78811.0], [78.9, 78811.0], [79.0, 79806.0], [79.1, 79806.0], [79.2, 79806.0], [79.3, 79806.0], [79.4, 79806.0], [79.5, 79806.0], [79.6, 79806.0], [79.7, 79806.0], [79.8, 79806.0], [79.9, 79806.0], [80.0, 80737.0], [80.1, 80737.0], [80.2, 80737.0], [80.3, 80737.0], [80.4, 80737.0], [80.5, 80737.0], [80.6, 80737.0], [80.7, 80737.0], [80.8, 80737.0], [80.9, 80737.0], [81.0, 82408.0], [81.1, 82408.0], [81.2, 82408.0], [81.3, 82408.0], [81.4, 82408.0], [81.5, 82408.0], [81.6, 82408.0], [81.7, 82408.0], [81.8, 82408.0], [81.9, 82408.0], [82.0, 85854.0], [82.1, 85854.0], [82.2, 85854.0], [82.3, 85854.0], [82.4, 85854.0], [82.5, 85854.0], [82.6, 85854.0], [82.7, 85854.0], [82.8, 85854.0], [82.9, 85854.0], [83.0, 87921.0], [83.1, 87921.0], [83.2, 87921.0], [83.3, 87921.0], [83.4, 87921.0], [83.5, 87921.0], [83.6, 87921.0], [83.7, 87921.0], [83.8, 87921.0], [83.9, 87921.0], [84.0, 89619.0], [84.1, 89619.0], [84.2, 89619.0], [84.3, 89619.0], [84.4, 89619.0], [84.5, 89619.0], [84.6, 89619.0], [84.7, 89619.0], [84.8, 89619.0], [84.9, 89619.0], [85.0, 90109.0], [85.1, 90109.0], [85.2, 90109.0], [85.3, 90109.0], [85.4, 90109.0], [85.5, 90109.0], [85.6, 90109.0], [85.7, 90109.0], [85.8, 90109.0], [85.9, 90109.0], [86.0, 90685.0], [86.1, 90685.0], [86.2, 90685.0], [86.3, 90685.0], [86.4, 90685.0], [86.5, 90685.0], [86.6, 90685.0], [86.7, 90685.0], [86.8, 90685.0], [86.9, 90685.0], [87.0, 91175.0], [87.1, 91175.0], [87.2, 91175.0], [87.3, 91175.0], [87.4, 91175.0], [87.5, 91175.0], [87.6, 91175.0], [87.7, 91175.0], [87.8, 91175.0], [87.9, 91175.0], [88.0, 91188.0], [88.1, 91188.0], [88.2, 91188.0], [88.3, 91188.0], [88.4, 91188.0], [88.5, 91188.0], [88.6, 91188.0], [88.7, 91188.0], [88.8, 91188.0], [88.9, 91188.0], [89.0, 92248.0], [89.1, 92248.0], [89.2, 92248.0], [89.3, 92248.0], [89.4, 92248.0], [89.5, 92248.0], [89.6, 92248.0], [89.7, 92248.0], [89.8, 92248.0], [89.9, 92248.0], [90.0, 92639.0], [90.1, 92639.0], [90.2, 92639.0], [90.3, 92639.0], [90.4, 92639.0], [90.5, 92639.0], [90.6, 92639.0], [90.7, 92639.0], [90.8, 92639.0], [90.9, 92639.0], [91.0, 95703.0], [91.1, 95703.0], [91.2, 95703.0], [91.3, 95703.0], [91.4, 95703.0], [91.5, 95703.0], [91.6, 95703.0], [91.7, 95703.0], [91.8, 95703.0], [91.9, 95703.0], [92.0, 98573.0], [92.1, 98573.0], [92.2, 98573.0], [92.3, 98573.0], [92.4, 98573.0], [92.5, 98573.0], [92.6, 98573.0], [92.7, 98573.0], [92.8, 98573.0], [92.9, 98573.0], [93.0, 99237.0], [93.1, 99237.0], [93.2, 99237.0], [93.3, 99237.0], [93.4, 99237.0], [93.5, 99237.0], [93.6, 99237.0], [93.7, 99237.0], [93.8, 99237.0], [93.9, 99237.0], [94.0, 99417.0], [94.1, 99417.0], [94.2, 99417.0], [94.3, 99417.0], [94.4, 99417.0], [94.5, 99417.0], [94.6, 99417.0], [94.7, 99417.0], [94.8, 99417.0], [94.9, 99417.0], [95.0, 99564.0], [95.1, 99564.0], [95.2, 99564.0], [95.3, 99564.0], [95.4, 99564.0], [95.5, 99564.0], [95.6, 99564.0], [95.7, 99564.0], [95.8, 99564.0], [95.9, 99564.0], [96.0, 100189.0], [96.1, 100189.0], [96.2, 100189.0], [96.3, 100189.0], [96.4, 100189.0], [96.5, 100189.0], [96.6, 100189.0], [96.7, 100189.0], [96.8, 100189.0], [96.9, 100189.0], [97.0, 100272.0], [97.1, 100272.0], [97.2, 100272.0], [97.3, 100272.0], [97.4, 100272.0], [97.5, 100272.0], [97.6, 100272.0], [97.7, 100272.0], [97.8, 100272.0], [97.9, 100272.0], [98.0, 101289.0], [98.1, 101289.0], [98.2, 101289.0], [98.3, 101289.0], [98.4, 101289.0], [98.5, 101289.0], [98.6, 101289.0], [98.7, 101289.0], [98.8, 101289.0], [98.9, 101289.0], [99.0, 101752.0], [99.1, 101752.0], [99.2, 101752.0], [99.3, 101752.0], [99.4, 101752.0], [99.5, 101752.0], [99.6, 101752.0], [99.7, 101752.0], [99.8, 101752.0], [99.9, 101752.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[0.0, 1869.0], [0.1, 1869.0], [0.2, 1869.0], [0.3, 1869.0], [0.4, 1869.0], [0.5, 1869.0], [0.6, 1869.0], [0.7, 1869.0], [0.8, 1869.0], [0.9, 1869.0], [1.0, 2170.0], [1.1, 2170.0], [1.2, 2170.0], [1.3, 2170.0], [1.4, 2170.0], [1.5, 2170.0], [1.6, 2170.0], [1.7, 2170.0], [1.8, 2170.0], [1.9, 2170.0], [2.0, 2251.0], [2.1, 2251.0], [2.2, 2251.0], [2.3, 2251.0], [2.4, 2251.0], [2.5, 2251.0], [2.6, 2251.0], [2.7, 2251.0], [2.8, 2251.0], [2.9, 2251.0], [3.0, 2582.0], [3.1, 2582.0], [3.2, 2582.0], [3.3, 2582.0], [3.4, 2582.0], [3.5, 2582.0], [3.6, 2582.0], [3.7, 2582.0], [3.8, 2582.0], [3.9, 2582.0], [4.0, 2585.0], [4.1, 2585.0], [4.2, 2585.0], [4.3, 2585.0], [4.4, 2585.0], [4.5, 2585.0], [4.6, 2585.0], [4.7, 2585.0], [4.8, 2585.0], [4.9, 2585.0], [5.0, 2696.0], [5.1, 2696.0], [5.2, 2696.0], [5.3, 2696.0], [5.4, 2696.0], [5.5, 2696.0], [5.6, 2696.0], [5.7, 2696.0], [5.8, 2696.0], [5.9, 2696.0], [6.0, 2777.0], [6.1, 2777.0], [6.2, 2777.0], [6.3, 2777.0], [6.4, 2777.0], [6.5, 2777.0], [6.6, 2777.0], [6.7, 2777.0], [6.8, 2777.0], [6.9, 2777.0], [7.0, 2961.0], [7.1, 2961.0], [7.2, 2961.0], [7.3, 2961.0], [7.4, 2961.0], [7.5, 2961.0], [7.6, 2961.0], [7.7, 2961.0], [7.8, 2961.0], [7.9, 2961.0], [8.0, 3221.0], [8.1, 3221.0], [8.2, 3221.0], [8.3, 3221.0], [8.4, 3221.0], [8.5, 3221.0], [8.6, 3221.0], [8.7, 3221.0], [8.8, 3221.0], [8.9, 3221.0], [9.0, 3260.0], [9.1, 3260.0], [9.2, 3260.0], [9.3, 3260.0], [9.4, 3260.0], [9.5, 3260.0], [9.6, 3260.0], [9.7, 3260.0], [9.8, 3260.0], [9.9, 3260.0], [10.0, 3359.0], [10.1, 3359.0], [10.2, 3359.0], [10.3, 3359.0], [10.4, 3359.0], [10.5, 3359.0], [10.6, 3359.0], [10.7, 3359.0], [10.8, 3359.0], [10.9, 3359.0], [11.0, 3674.0], [11.1, 3674.0], [11.2, 3674.0], [11.3, 3674.0], [11.4, 3674.0], [11.5, 3674.0], [11.6, 3674.0], [11.7, 3674.0], [11.8, 3674.0], [11.9, 3674.0], [12.0, 3749.0], [12.1, 3749.0], [12.2, 3749.0], [12.3, 3749.0], [12.4, 3749.0], [12.5, 3749.0], [12.6, 3749.0], [12.7, 3749.0], [12.8, 3749.0], [12.9, 3749.0], [13.0, 3815.0], [13.1, 3815.0], [13.2, 3815.0], [13.3, 3815.0], [13.4, 3815.0], [13.5, 3815.0], [13.6, 3815.0], [13.7, 3815.0], [13.8, 3815.0], [13.9, 3815.0], [14.0, 3817.0], [14.1, 3817.0], [14.2, 3817.0], [14.3, 3817.0], [14.4, 3817.0], [14.5, 3817.0], [14.6, 3817.0], [14.7, 3817.0], [14.8, 3817.0], [14.9, 3817.0], [15.0, 3851.0], [15.1, 3851.0], [15.2, 3851.0], [15.3, 3851.0], [15.4, 3851.0], [15.5, 3851.0], [15.6, 3851.0], [15.7, 3851.0], [15.8, 3851.0], [15.9, 3851.0], [16.0, 3965.0], [16.1, 3965.0], [16.2, 3965.0], [16.3, 3965.0], [16.4, 3965.0], [16.5, 3965.0], [16.6, 3965.0], [16.7, 3965.0], [16.8, 3965.0], [16.9, 3965.0], [17.0, 4446.0], [17.1, 4446.0], [17.2, 4446.0], [17.3, 4446.0], [17.4, 4446.0], [17.5, 4446.0], [17.6, 4446.0], [17.7, 4446.0], [17.8, 4446.0], [17.9, 4446.0], [18.0, 4452.0], [18.1, 4452.0], [18.2, 4452.0], [18.3, 4452.0], [18.4, 4452.0], [18.5, 4452.0], [18.6, 4452.0], [18.7, 4452.0], [18.8, 4452.0], [18.9, 4452.0], [19.0, 4520.0], [19.1, 4520.0], [19.2, 4520.0], [19.3, 4520.0], [19.4, 4520.0], [19.5, 4520.0], [19.6, 4520.0], [19.7, 4520.0], [19.8, 4520.0], [19.9, 4520.0], [20.0, 4543.0], [20.1, 4543.0], [20.2, 4543.0], [20.3, 4543.0], [20.4, 4543.0], [20.5, 4543.0], [20.6, 4543.0], [20.7, 4543.0], [20.8, 4543.0], [20.9, 4543.0], [21.0, 4697.0], [21.1, 4697.0], [21.2, 4697.0], [21.3, 4697.0], [21.4, 4697.0], [21.5, 4697.0], [21.6, 4697.0], [21.7, 4697.0], [21.8, 4697.0], [21.9, 4697.0], [22.0, 4699.0], [22.1, 4699.0], [22.2, 4699.0], [22.3, 4699.0], [22.4, 4699.0], [22.5, 4699.0], [22.6, 4699.0], [22.7, 4699.0], [22.8, 4699.0], [22.9, 4699.0], [23.0, 4832.0], [23.1, 4832.0], [23.2, 4832.0], [23.3, 4832.0], [23.4, 4832.0], [23.5, 4832.0], [23.6, 4832.0], [23.7, 4832.0], [23.8, 4832.0], [23.9, 4832.0], [24.0, 4929.0], [24.1, 4929.0], [24.2, 4929.0], [24.3, 4929.0], [24.4, 4929.0], [24.5, 4929.0], [24.6, 4929.0], [24.7, 4929.0], [24.8, 4929.0], [24.9, 4929.0], [25.0, 5092.0], [25.1, 5092.0], [25.2, 5092.0], [25.3, 5092.0], [25.4, 5092.0], [25.5, 5092.0], [25.6, 5092.0], [25.7, 5092.0], [25.8, 5092.0], [25.9, 5092.0], [26.0, 5143.0], [26.1, 5143.0], [26.2, 5143.0], [26.3, 5143.0], [26.4, 5143.0], [26.5, 5143.0], [26.6, 5143.0], [26.7, 5143.0], [26.8, 5143.0], [26.9, 5143.0], [27.0, 5303.0], [27.1, 5303.0], [27.2, 5303.0], [27.3, 5303.0], [27.4, 5303.0], [27.5, 5303.0], [27.6, 5303.0], [27.7, 5303.0], [27.8, 5303.0], [27.9, 5303.0], [28.0, 5306.0], [28.1, 5306.0], [28.2, 5306.0], [28.3, 5306.0], [28.4, 5306.0], [28.5, 5306.0], [28.6, 5306.0], [28.7, 5306.0], [28.8, 5306.0], [28.9, 5306.0], [29.0, 5313.0], [29.1, 5313.0], [29.2, 5313.0], [29.3, 5313.0], [29.4, 5313.0], [29.5, 5313.0], [29.6, 5313.0], [29.7, 5313.0], [29.8, 5313.0], [29.9, 5313.0], [30.0, 5335.0], [30.1, 5335.0], [30.2, 5335.0], [30.3, 5335.0], [30.4, 5335.0], [30.5, 5335.0], [30.6, 5335.0], [30.7, 5335.0], [30.8, 5335.0], [30.9, 5335.0], [31.0, 5349.0], [31.1, 5349.0], [31.2, 5349.0], [31.3, 5349.0], [31.4, 5349.0], [31.5, 5349.0], [31.6, 5349.0], [31.7, 5349.0], [31.8, 5349.0], [31.9, 5349.0], [32.0, 5361.0], [32.1, 5361.0], [32.2, 5361.0], [32.3, 5361.0], [32.4, 5361.0], [32.5, 5361.0], [32.6, 5361.0], [32.7, 5361.0], [32.8, 5361.0], [32.9, 5361.0], [33.0, 5527.0], [33.1, 5527.0], [33.2, 5527.0], [33.3, 5527.0], [33.4, 5527.0], [33.5, 5527.0], [33.6, 5527.0], [33.7, 5527.0], [33.8, 5527.0], [33.9, 5527.0], [34.0, 5756.0], [34.1, 5756.0], [34.2, 5756.0], [34.3, 5756.0], [34.4, 5756.0], [34.5, 5756.0], [34.6, 5756.0], [34.7, 5756.0], [34.8, 5756.0], [34.9, 5756.0], [35.0, 5811.0], [35.1, 5811.0], [35.2, 5811.0], [35.3, 5811.0], [35.4, 5811.0], [35.5, 5811.0], [35.6, 5811.0], [35.7, 5811.0], [35.8, 5811.0], [35.9, 5811.0], [36.0, 5829.0], [36.1, 5829.0], [36.2, 5829.0], [36.3, 5829.0], [36.4, 5829.0], [36.5, 5829.0], [36.6, 5829.0], [36.7, 5829.0], [36.8, 5829.0], [36.9, 5829.0], [37.0, 5927.0], [37.1, 5927.0], [37.2, 5927.0], [37.3, 5927.0], [37.4, 5927.0], [37.5, 5927.0], [37.6, 5927.0], [37.7, 5927.0], [37.8, 5927.0], [37.9, 5927.0], [38.0, 5974.0], [38.1, 5974.0], [38.2, 5974.0], [38.3, 5974.0], [38.4, 5974.0], [38.5, 5974.0], [38.6, 5974.0], [38.7, 5974.0], [38.8, 5974.0], [38.9, 5974.0], [39.0, 6023.0], [39.1, 6023.0], [39.2, 6023.0], [39.3, 6023.0], [39.4, 6023.0], [39.5, 6023.0], [39.6, 6023.0], [39.7, 6023.0], [39.8, 6023.0], [39.9, 6023.0], [40.0, 6040.0], [40.1, 6040.0], [40.2, 6040.0], [40.3, 6040.0], [40.4, 6040.0], [40.5, 6040.0], [40.6, 6040.0], [40.7, 6040.0], [40.8, 6040.0], [40.9, 6040.0], [41.0, 6148.0], [41.1, 6148.0], [41.2, 6148.0], [41.3, 6148.0], [41.4, 6148.0], [41.5, 6148.0], [41.6, 6148.0], [41.7, 6148.0], [41.8, 6148.0], [41.9, 6148.0], [42.0, 6200.0], [42.1, 6200.0], [42.2, 6200.0], [42.3, 6200.0], [42.4, 6200.0], [42.5, 6200.0], [42.6, 6200.0], [42.7, 6200.0], [42.8, 6200.0], [42.9, 6200.0], [43.0, 6278.0], [43.1, 6278.0], [43.2, 6278.0], [43.3, 6278.0], [43.4, 6278.0], [43.5, 6278.0], [43.6, 6278.0], [43.7, 6278.0], [43.8, 6278.0], [43.9, 6278.0], [44.0, 6459.0], [44.1, 6459.0], [44.2, 6459.0], [44.3, 6459.0], [44.4, 6459.0], [44.5, 6459.0], [44.6, 6459.0], [44.7, 6459.0], [44.8, 6459.0], [44.9, 6459.0], [45.0, 6501.0], [45.1, 6501.0], [45.2, 6501.0], [45.3, 6501.0], [45.4, 6501.0], [45.5, 6501.0], [45.6, 6501.0], [45.7, 6501.0], [45.8, 6501.0], [45.9, 6501.0], [46.0, 6561.0], [46.1, 6561.0], [46.2, 6561.0], [46.3, 6561.0], [46.4, 6561.0], [46.5, 6561.0], [46.6, 6561.0], [46.7, 6561.0], [46.8, 6561.0], [46.9, 6561.0], [47.0, 6590.0], [47.1, 6590.0], [47.2, 6590.0], [47.3, 6590.0], [47.4, 6590.0], [47.5, 6590.0], [47.6, 6590.0], [47.7, 6590.0], [47.8, 6590.0], [47.9, 6590.0], [48.0, 6795.0], [48.1, 6795.0], [48.2, 6795.0], [48.3, 6795.0], [48.4, 6795.0], [48.5, 6795.0], [48.6, 6795.0], [48.7, 6795.0], [48.8, 6795.0], [48.9, 6795.0], [49.0, 6841.0], [49.1, 6841.0], [49.2, 6841.0], [49.3, 6841.0], [49.4, 6841.0], [49.5, 6841.0], [49.6, 6841.0], [49.7, 6841.0], [49.8, 6841.0], [49.9, 6841.0], [50.0, 6885.0], [50.1, 6885.0], [50.2, 6885.0], [50.3, 6885.0], [50.4, 6885.0], [50.5, 6885.0], [50.6, 6885.0], [50.7, 6885.0], [50.8, 6885.0], [50.9, 6885.0], [51.0, 6946.0], [51.1, 6946.0], [51.2, 6946.0], [51.3, 6946.0], [51.4, 6946.0], [51.5, 6946.0], [51.6, 6946.0], [51.7, 6946.0], [51.8, 6946.0], [51.9, 6946.0], [52.0, 6966.0], [52.1, 6966.0], [52.2, 6966.0], [52.3, 6966.0], [52.4, 6966.0], [52.5, 6966.0], [52.6, 6966.0], [52.7, 6966.0], [52.8, 6966.0], [52.9, 6966.0], [53.0, 7061.0], [53.1, 7061.0], [53.2, 7061.0], [53.3, 7061.0], [53.4, 7061.0], [53.5, 7061.0], [53.6, 7061.0], [53.7, 7061.0], [53.8, 7061.0], [53.9, 7061.0], [54.0, 7219.0], [54.1, 7219.0], [54.2, 7219.0], [54.3, 7219.0], [54.4, 7219.0], [54.5, 7219.0], [54.6, 7219.0], [54.7, 7219.0], [54.8, 7219.0], [54.9, 7219.0], [55.0, 7275.0], [55.1, 7275.0], [55.2, 7275.0], [55.3, 7275.0], [55.4, 7275.0], [55.5, 7275.0], [55.6, 7275.0], [55.7, 7275.0], [55.8, 7275.0], [55.9, 7275.0], [56.0, 7433.0], [56.1, 7433.0], [56.2, 7433.0], [56.3, 7433.0], [56.4, 7433.0], [56.5, 7433.0], [56.6, 7433.0], [56.7, 7433.0], [56.8, 7433.0], [56.9, 7433.0], [57.0, 7557.0], [57.1, 7557.0], [57.2, 7557.0], [57.3, 7557.0], [57.4, 7557.0], [57.5, 7557.0], [57.6, 7557.0], [57.7, 7557.0], [57.8, 7557.0], [57.9, 7557.0], [58.0, 7711.0], [58.1, 7711.0], [58.2, 7711.0], [58.3, 7711.0], [58.4, 7711.0], [58.5, 7711.0], [58.6, 7711.0], [58.7, 7711.0], [58.8, 7711.0], [58.9, 7711.0], [59.0, 7719.0], [59.1, 7719.0], [59.2, 7719.0], [59.3, 7719.0], [59.4, 7719.0], [59.5, 7719.0], [59.6, 7719.0], [59.7, 7719.0], [59.8, 7719.0], [59.9, 7719.0], [60.0, 7835.0], [60.1, 7835.0], [60.2, 7835.0], [60.3, 7835.0], [60.4, 7835.0], [60.5, 7835.0], [60.6, 7835.0], [60.7, 7835.0], [60.8, 7835.0], [60.9, 7835.0], [61.0, 7879.0], [61.1, 7879.0], [61.2, 7879.0], [61.3, 7879.0], [61.4, 7879.0], [61.5, 7879.0], [61.6, 7879.0], [61.7, 7879.0], [61.8, 7879.0], [61.9, 7879.0], [62.0, 7997.0], [62.1, 7997.0], [62.2, 7997.0], [62.3, 7997.0], [62.4, 7997.0], [62.5, 7997.0], [62.6, 7997.0], [62.7, 7997.0], [62.8, 7997.0], [62.9, 7997.0], [63.0, 8049.0], [63.1, 8049.0], [63.2, 8049.0], [63.3, 8049.0], [63.4, 8049.0], [63.5, 8049.0], [63.6, 8049.0], [63.7, 8049.0], [63.8, 8049.0], [63.9, 8049.0], [64.0, 8092.0], [64.1, 8092.0], [64.2, 8092.0], [64.3, 8092.0], [64.4, 8092.0], [64.5, 8092.0], [64.6, 8092.0], [64.7, 8092.0], [64.8, 8092.0], [64.9, 8092.0], [65.0, 8150.0], [65.1, 8150.0], [65.2, 8150.0], [65.3, 8150.0], [65.4, 8150.0], [65.5, 8150.0], [65.6, 8150.0], [65.7, 8150.0], [65.8, 8150.0], [65.9, 8150.0], [66.0, 8155.0], [66.1, 8155.0], [66.2, 8155.0], [66.3, 8155.0], [66.4, 8155.0], [66.5, 8155.0], [66.6, 8155.0], [66.7, 8155.0], [66.8, 8155.0], [66.9, 8155.0], [67.0, 8240.0], [67.1, 8240.0], [67.2, 8240.0], [67.3, 8240.0], [67.4, 8240.0], [67.5, 8240.0], [67.6, 8240.0], [67.7, 8240.0], [67.8, 8240.0], [67.9, 8240.0], [68.0, 8268.0], [68.1, 8268.0], [68.2, 8268.0], [68.3, 8268.0], [68.4, 8268.0], [68.5, 8268.0], [68.6, 8268.0], [68.7, 8268.0], [68.8, 8268.0], [68.9, 8268.0], [69.0, 8279.0], [69.1, 8279.0], [69.2, 8279.0], [69.3, 8279.0], [69.4, 8279.0], [69.5, 8279.0], [69.6, 8279.0], [69.7, 8279.0], [69.8, 8279.0], [69.9, 8279.0], [70.0, 8329.0], [70.1, 8329.0], [70.2, 8329.0], [70.3, 8329.0], [70.4, 8329.0], [70.5, 8329.0], [70.6, 8329.0], [70.7, 8329.0], [70.8, 8329.0], [70.9, 8329.0], [71.0, 8425.0], [71.1, 8425.0], [71.2, 8425.0], [71.3, 8425.0], [71.4, 8425.0], [71.5, 8425.0], [71.6, 8425.0], [71.7, 8425.0], [71.8, 8425.0], [71.9, 8425.0], [72.0, 8425.0], [72.1, 8425.0], [72.2, 8425.0], [72.3, 8425.0], [72.4, 8425.0], [72.5, 8425.0], [72.6, 8425.0], [72.7, 8425.0], [72.8, 8425.0], [72.9, 8425.0], [73.0, 8488.0], [73.1, 8488.0], [73.2, 8488.0], [73.3, 8488.0], [73.4, 8488.0], [73.5, 8488.0], [73.6, 8488.0], [73.7, 8488.0], [73.8, 8488.0], [73.9, 8488.0], [74.0, 8738.0], [74.1, 8738.0], [74.2, 8738.0], [74.3, 8738.0], [74.4, 8738.0], [74.5, 8738.0], [74.6, 8738.0], [74.7, 8738.0], [74.8, 8738.0], [74.9, 8738.0], [75.0, 8982.0], [75.1, 8982.0], [75.2, 8982.0], [75.3, 8982.0], [75.4, 8982.0], [75.5, 8982.0], [75.6, 8982.0], [75.7, 8982.0], [75.8, 8982.0], [75.9, 8982.0], [76.0, 8995.0], [76.1, 8995.0], [76.2, 8995.0], [76.3, 8995.0], [76.4, 8995.0], [76.5, 8995.0], [76.6, 8995.0], [76.7, 8995.0], [76.8, 8995.0], [76.9, 8995.0], [77.0, 9033.0], [77.1, 9033.0], [77.2, 9033.0], [77.3, 9033.0], [77.4, 9033.0], [77.5, 9033.0], [77.6, 9033.0], [77.7, 9033.0], [77.8, 9033.0], [77.9, 9033.0], [78.0, 9098.0], [78.1, 9098.0], [78.2, 9098.0], [78.3, 9098.0], [78.4, 9098.0], [78.5, 9098.0], [78.6, 9098.0], [78.7, 9098.0], [78.8, 9098.0], [78.9, 9098.0], [79.0, 9172.0], [79.1, 9172.0], [79.2, 9172.0], [79.3, 9172.0], [79.4, 9172.0], [79.5, 9172.0], [79.6, 9172.0], [79.7, 9172.0], [79.8, 9172.0], [79.9, 9172.0], [80.0, 9224.0], [80.1, 9224.0], [80.2, 9224.0], [80.3, 9224.0], [80.4, 9224.0], [80.5, 9224.0], [80.6, 9224.0], [80.7, 9224.0], [80.8, 9224.0], [80.9, 9224.0], [81.0, 9243.0], [81.1, 9243.0], [81.2, 9243.0], [81.3, 9243.0], [81.4, 9243.0], [81.5, 9243.0], [81.6, 9243.0], [81.7, 9243.0], [81.8, 9243.0], [81.9, 9243.0], [82.0, 9295.0], [82.1, 9295.0], [82.2, 9295.0], [82.3, 9295.0], [82.4, 9295.0], [82.5, 9295.0], [82.6, 9295.0], [82.7, 9295.0], [82.8, 9295.0], [82.9, 9295.0], [83.0, 9310.0], [83.1, 9310.0], [83.2, 9310.0], [83.3, 9310.0], [83.4, 9310.0], [83.5, 9310.0], [83.6, 9310.0], [83.7, 9310.0], [83.8, 9310.0], [83.9, 9310.0], [84.0, 9395.0], [84.1, 9395.0], [84.2, 9395.0], [84.3, 9395.0], [84.4, 9395.0], [84.5, 9395.0], [84.6, 9395.0], [84.7, 9395.0], [84.8, 9395.0], [84.9, 9395.0], [85.0, 9645.0], [85.1, 9645.0], [85.2, 9645.0], [85.3, 9645.0], [85.4, 9645.0], [85.5, 9645.0], [85.6, 9645.0], [85.7, 9645.0], [85.8, 9645.0], [85.9, 9645.0], [86.0, 10419.0], [86.1, 10419.0], [86.2, 10419.0], [86.3, 10419.0], [86.4, 10419.0], [86.5, 10419.0], [86.6, 10419.0], [86.7, 10419.0], [86.8, 10419.0], [86.9, 10419.0], [87.0, 10881.0], [87.1, 10881.0], [87.2, 10881.0], [87.3, 10881.0], [87.4, 10881.0], [87.5, 10881.0], [87.6, 10881.0], [87.7, 10881.0], [87.8, 10881.0], [87.9, 10881.0], [88.0, 10921.0], [88.1, 10921.0], [88.2, 10921.0], [88.3, 10921.0], [88.4, 10921.0], [88.5, 10921.0], [88.6, 10921.0], [88.7, 10921.0], [88.8, 10921.0], [88.9, 10921.0], [89.0, 11037.0], [89.1, 11037.0], [89.2, 11037.0], [89.3, 11037.0], [89.4, 11037.0], [89.5, 11037.0], [89.6, 11037.0], [89.7, 11037.0], [89.8, 11037.0], [89.9, 11037.0], [90.0, 11233.0], [90.1, 11233.0], [90.2, 11233.0], [90.3, 11233.0], [90.4, 11233.0], [90.5, 11233.0], [90.6, 11233.0], [90.7, 11233.0], [90.8, 11233.0], [90.9, 11233.0], [91.0, 12295.0], [91.1, 12295.0], [91.2, 12295.0], [91.3, 12295.0], [91.4, 12295.0], [91.5, 12295.0], [91.6, 12295.0], [91.7, 12295.0], [91.8, 12295.0], [91.9, 12295.0], [92.0, 12415.0], [92.1, 12415.0], [92.2, 12415.0], [92.3, 12415.0], [92.4, 12415.0], [92.5, 12415.0], [92.6, 12415.0], [92.7, 12415.0], [92.8, 12415.0], [92.9, 12415.0], [93.0, 12523.0], [93.1, 12523.0], [93.2, 12523.0], [93.3, 12523.0], [93.4, 12523.0], [93.5, 12523.0], [93.6, 12523.0], [93.7, 12523.0], [93.8, 12523.0], [93.9, 12523.0], [94.0, 12809.0], [94.1, 12809.0], [94.2, 12809.0], [94.3, 12809.0], [94.4, 12809.0], [94.5, 12809.0], [94.6, 12809.0], [94.7, 12809.0], [94.8, 12809.0], [94.9, 12809.0], [95.0, 14598.0], [95.1, 14598.0], [95.2, 14598.0], [95.3, 14598.0], [95.4, 14598.0], [95.5, 14598.0], [95.6, 14598.0], [95.7, 14598.0], [95.8, 14598.0], [95.9, 14598.0], [96.0, 14599.0], [96.1, 14599.0], [96.2, 14599.0], [96.3, 14599.0], [96.4, 14599.0], [96.5, 14599.0], [96.6, 14599.0], [96.7, 14599.0], [96.8, 14599.0], [96.9, 14599.0], [97.0, 14905.0], [97.1, 14905.0], [97.2, 14905.0], [97.3, 14905.0], [97.4, 14905.0], [97.5, 14905.0], [97.6, 14905.0], [97.7, 14905.0], [97.8, 14905.0], [97.9, 14905.0], [98.0, 15272.0], [98.1, 15272.0], [98.2, 15272.0], [98.3, 15272.0], [98.4, 15272.0], [98.5, 15272.0], [98.6, 15272.0], [98.7, 15272.0], [98.8, 15272.0], [98.9, 15272.0], [99.0, 16469.0], [99.1, 16469.0], [99.2, 16469.0], [99.3, 16469.0], [99.4, 16469.0], [99.5, 16469.0], [99.6, 16469.0], [99.7, 16469.0], [99.8, 16469.0], [99.9, 16469.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[0.0, 2641.0], [0.1, 2641.0], [0.2, 2641.0], [0.3, 2641.0], [0.4, 2641.0], [0.5, 2641.0], [0.6, 2641.0], [0.7, 2641.0], [0.8, 2641.0], [0.9, 2641.0], [1.0, 3111.0], [1.1, 3111.0], [1.2, 3111.0], [1.3, 3111.0], [1.4, 3111.0], [1.5, 3111.0], [1.6, 3111.0], [1.7, 3111.0], [1.8, 3111.0], [1.9, 3111.0], [2.0, 3321.0], [2.1, 3321.0], [2.2, 3321.0], [2.3, 3321.0], [2.4, 3321.0], [2.5, 3321.0], [2.6, 3321.0], [2.7, 3321.0], [2.8, 3321.0], [2.9, 3321.0], [3.0, 3325.0], [3.1, 3325.0], [3.2, 3325.0], [3.3, 3325.0], [3.4, 3325.0], [3.5, 3325.0], [3.6, 3325.0], [3.7, 3325.0], [3.8, 3325.0], [3.9, 3325.0], [4.0, 3663.0], [4.1, 3663.0], [4.2, 3663.0], [4.3, 3663.0], [4.4, 3663.0], [4.5, 3663.0], [4.6, 3663.0], [4.7, 3663.0], [4.8, 3663.0], [4.9, 3663.0], [5.0, 4006.0], [5.1, 4006.0], [5.2, 4006.0], [5.3, 4006.0], [5.4, 4006.0], [5.5, 4006.0], [5.6, 4006.0], [5.7, 4006.0], [5.8, 4006.0], [5.9, 4006.0], [6.0, 4301.0], [6.1, 4301.0], [6.2, 4301.0], [6.3, 4301.0], [6.4, 4301.0], [6.5, 4301.0], [6.6, 4301.0], [6.7, 4301.0], [6.8, 4301.0], [6.9, 4301.0], [7.0, 4391.0], [7.1, 4391.0], [7.2, 4391.0], [7.3, 4391.0], [7.4, 4391.0], [7.5, 4391.0], [7.6, 4391.0], [7.7, 4391.0], [7.8, 4391.0], [7.9, 4391.0], [8.0, 4461.0], [8.1, 4461.0], [8.2, 4461.0], [8.3, 4461.0], [8.4, 4461.0], [8.5, 4461.0], [8.6, 4461.0], [8.7, 4461.0], [8.8, 4461.0], [8.9, 4461.0], [9.0, 4526.0], [9.1, 4526.0], [9.2, 4526.0], [9.3, 4526.0], [9.4, 4526.0], [9.5, 4526.0], [9.6, 4526.0], [9.7, 4526.0], [9.8, 4526.0], [9.9, 4526.0], [10.0, 4763.0], [10.1, 4763.0], [10.2, 4763.0], [10.3, 4763.0], [10.4, 4763.0], [10.5, 4763.0], [10.6, 4763.0], [10.7, 4763.0], [10.8, 4763.0], [10.9, 4763.0], [11.0, 4787.0], [11.1, 4787.0], [11.2, 4787.0], [11.3, 4787.0], [11.4, 4787.0], [11.5, 4787.0], [11.6, 4787.0], [11.7, 4787.0], [11.8, 4787.0], [11.9, 4787.0], [12.0, 4846.0], [12.1, 4846.0], [12.2, 4846.0], [12.3, 4846.0], [12.4, 4846.0], [12.5, 4846.0], [12.6, 4846.0], [12.7, 4846.0], [12.8, 4846.0], [12.9, 4846.0], [13.0, 5012.0], [13.1, 5012.0], [13.2, 5012.0], [13.3, 5012.0], [13.4, 5012.0], [13.5, 5012.0], [13.6, 5012.0], [13.7, 5012.0], [13.8, 5012.0], [13.9, 5012.0], [14.0, 5112.0], [14.1, 5112.0], [14.2, 5112.0], [14.3, 5112.0], [14.4, 5112.0], [14.5, 5112.0], [14.6, 5112.0], [14.7, 5112.0], [14.8, 5112.0], [14.9, 5112.0], [15.0, 5413.0], [15.1, 5413.0], [15.2, 5413.0], [15.3, 5413.0], [15.4, 5413.0], [15.5, 5413.0], [15.6, 5413.0], [15.7, 5413.0], [15.8, 5413.0], [15.9, 5413.0], [16.0, 5568.0], [16.1, 5568.0], [16.2, 5568.0], [16.3, 5568.0], [16.4, 5568.0], [16.5, 5568.0], [16.6, 5568.0], [16.7, 5568.0], [16.8, 5568.0], [16.9, 5568.0], [17.0, 5600.0], [17.1, 5600.0], [17.2, 5600.0], [17.3, 5600.0], [17.4, 5600.0], [17.5, 5600.0], [17.6, 5600.0], [17.7, 5600.0], [17.8, 5600.0], [17.9, 5600.0], [18.0, 5733.0], [18.1, 5733.0], [18.2, 5733.0], [18.3, 5733.0], [18.4, 5733.0], [18.5, 5733.0], [18.6, 5733.0], [18.7, 5733.0], [18.8, 5733.0], [18.9, 5733.0], [19.0, 5756.0], [19.1, 5756.0], [19.2, 5756.0], [19.3, 5756.0], [19.4, 5756.0], [19.5, 5756.0], [19.6, 5756.0], [19.7, 5756.0], [19.8, 5756.0], [19.9, 5756.0], [20.0, 5778.0], [20.1, 5778.0], [20.2, 5778.0], [20.3, 5778.0], [20.4, 5778.0], [20.5, 5778.0], [20.6, 5778.0], [20.7, 5778.0], [20.8, 5778.0], [20.9, 5778.0], [21.0, 6034.0], [21.1, 6034.0], [21.2, 6034.0], [21.3, 6034.0], [21.4, 6034.0], [21.5, 6034.0], [21.6, 6034.0], [21.7, 6034.0], [21.8, 6034.0], [21.9, 6034.0], [22.0, 6134.0], [22.1, 6134.0], [22.2, 6134.0], [22.3, 6134.0], [22.4, 6134.0], [22.5, 6134.0], [22.6, 6134.0], [22.7, 6134.0], [22.8, 6134.0], [22.9, 6134.0], [23.0, 6582.0], [23.1, 6582.0], [23.2, 6582.0], [23.3, 6582.0], [23.4, 6582.0], [23.5, 6582.0], [23.6, 6582.0], [23.7, 6582.0], [23.8, 6582.0], [23.9, 6582.0], [24.0, 6582.0], [24.1, 6582.0], [24.2, 6582.0], [24.3, 6582.0], [24.4, 6582.0], [24.5, 6582.0], [24.6, 6582.0], [24.7, 6582.0], [24.8, 6582.0], [24.9, 6582.0], [25.0, 6591.0], [25.1, 6591.0], [25.2, 6591.0], [25.3, 6591.0], [25.4, 6591.0], [25.5, 6591.0], [25.6, 6591.0], [25.7, 6591.0], [25.8, 6591.0], [25.9, 6591.0], [26.0, 6634.0], [26.1, 6634.0], [26.2, 6634.0], [26.3, 6634.0], [26.4, 6634.0], [26.5, 6634.0], [26.6, 6634.0], [26.7, 6634.0], [26.8, 6634.0], [26.9, 6634.0], [27.0, 6667.0], [27.1, 6667.0], [27.2, 6667.0], [27.3, 6667.0], [27.4, 6667.0], [27.5, 6667.0], [27.6, 6667.0], [27.7, 6667.0], [27.8, 6667.0], [27.9, 6667.0], [28.0, 6667.0], [28.1, 6667.0], [28.2, 6667.0], [28.3, 6667.0], [28.4, 6667.0], [28.5, 6667.0], [28.6, 6667.0], [28.7, 6667.0], [28.8, 6667.0], [28.9, 6667.0], [29.0, 7105.0], [29.1, 7105.0], [29.2, 7105.0], [29.3, 7105.0], [29.4, 7105.0], [29.5, 7105.0], [29.6, 7105.0], [29.7, 7105.0], [29.8, 7105.0], [29.9, 7105.0], [30.0, 7298.0], [30.1, 7298.0], [30.2, 7298.0], [30.3, 7298.0], [30.4, 7298.0], [30.5, 7298.0], [30.6, 7298.0], [30.7, 7298.0], [30.8, 7298.0], [30.9, 7298.0], [31.0, 7384.0], [31.1, 7384.0], [31.2, 7384.0], [31.3, 7384.0], [31.4, 7384.0], [31.5, 7384.0], [31.6, 7384.0], [31.7, 7384.0], [31.8, 7384.0], [31.9, 7384.0], [32.0, 7394.0], [32.1, 7394.0], [32.2, 7394.0], [32.3, 7394.0], [32.4, 7394.0], [32.5, 7394.0], [32.6, 7394.0], [32.7, 7394.0], [32.8, 7394.0], [32.9, 7394.0], [33.0, 7409.0], [33.1, 7409.0], [33.2, 7409.0], [33.3, 7409.0], [33.4, 7409.0], [33.5, 7409.0], [33.6, 7409.0], [33.7, 7409.0], [33.8, 7409.0], [33.9, 7409.0], [34.0, 7430.0], [34.1, 7430.0], [34.2, 7430.0], [34.3, 7430.0], [34.4, 7430.0], [34.5, 7430.0], [34.6, 7430.0], [34.7, 7430.0], [34.8, 7430.0], [34.9, 7430.0], [35.0, 7432.0], [35.1, 7432.0], [35.2, 7432.0], [35.3, 7432.0], [35.4, 7432.0], [35.5, 7432.0], [35.6, 7432.0], [35.7, 7432.0], [35.8, 7432.0], [35.9, 7432.0], [36.0, 7471.0], [36.1, 7471.0], [36.2, 7471.0], [36.3, 7471.0], [36.4, 7471.0], [36.5, 7471.0], [36.6, 7471.0], [36.7, 7471.0], [36.8, 7471.0], [36.9, 7471.0], [37.0, 7479.0], [37.1, 7479.0], [37.2, 7479.0], [37.3, 7479.0], [37.4, 7479.0], [37.5, 7479.0], [37.6, 7479.0], [37.7, 7479.0], [37.8, 7479.0], [37.9, 7479.0], [38.0, 7498.0], [38.1, 7498.0], [38.2, 7498.0], [38.3, 7498.0], [38.4, 7498.0], [38.5, 7498.0], [38.6, 7498.0], [38.7, 7498.0], [38.8, 7498.0], [38.9, 7498.0], [39.0, 7689.0], [39.1, 7689.0], [39.2, 7689.0], [39.3, 7689.0], [39.4, 7689.0], [39.5, 7689.0], [39.6, 7689.0], [39.7, 7689.0], [39.8, 7689.0], [39.9, 7689.0], [40.0, 7710.0], [40.1, 7710.0], [40.2, 7710.0], [40.3, 7710.0], [40.4, 7710.0], [40.5, 7710.0], [40.6, 7710.0], [40.7, 7710.0], [40.8, 7710.0], [40.9, 7710.0], [41.0, 7909.0], [41.1, 7909.0], [41.2, 7909.0], [41.3, 7909.0], [41.4, 7909.0], [41.5, 7909.0], [41.6, 7909.0], [41.7, 7909.0], [41.8, 7909.0], [41.9, 7909.0], [42.0, 7920.0], [42.1, 7920.0], [42.2, 7920.0], [42.3, 7920.0], [42.4, 7920.0], [42.5, 7920.0], [42.6, 7920.0], [42.7, 7920.0], [42.8, 7920.0], [42.9, 7920.0], [43.0, 7924.0], [43.1, 7924.0], [43.2, 7924.0], [43.3, 7924.0], [43.4, 7924.0], [43.5, 7924.0], [43.6, 7924.0], [43.7, 7924.0], [43.8, 7924.0], [43.9, 7924.0], [44.0, 7935.0], [44.1, 7935.0], [44.2, 7935.0], [44.3, 7935.0], [44.4, 7935.0], [44.5, 7935.0], [44.6, 7935.0], [44.7, 7935.0], [44.8, 7935.0], [44.9, 7935.0], [45.0, 7969.0], [45.1, 7969.0], [45.2, 7969.0], [45.3, 7969.0], [45.4, 7969.0], [45.5, 7969.0], [45.6, 7969.0], [45.7, 7969.0], [45.8, 7969.0], [45.9, 7969.0], [46.0, 8305.0], [46.1, 8305.0], [46.2, 8305.0], [46.3, 8305.0], [46.4, 8305.0], [46.5, 8305.0], [46.6, 8305.0], [46.7, 8305.0], [46.8, 8305.0], [46.9, 8305.0], [47.0, 8461.0], [47.1, 8461.0], [47.2, 8461.0], [47.3, 8461.0], [47.4, 8461.0], [47.5, 8461.0], [47.6, 8461.0], [47.7, 8461.0], [47.8, 8461.0], [47.9, 8461.0], [48.0, 8476.0], [48.1, 8476.0], [48.2, 8476.0], [48.3, 8476.0], [48.4, 8476.0], [48.5, 8476.0], [48.6, 8476.0], [48.7, 8476.0], [48.8, 8476.0], [48.9, 8476.0], [49.0, 8639.0], [49.1, 8639.0], [49.2, 8639.0], [49.3, 8639.0], [49.4, 8639.0], [49.5, 8639.0], [49.6, 8639.0], [49.7, 8639.0], [49.8, 8639.0], [49.9, 8639.0], [50.0, 8677.0], [50.1, 8677.0], [50.2, 8677.0], [50.3, 8677.0], [50.4, 8677.0], [50.5, 8677.0], [50.6, 8677.0], [50.7, 8677.0], [50.8, 8677.0], [50.9, 8677.0], [51.0, 8713.0], [51.1, 8713.0], [51.2, 8713.0], [51.3, 8713.0], [51.4, 8713.0], [51.5, 8713.0], [51.6, 8713.0], [51.7, 8713.0], [51.8, 8713.0], [51.9, 8713.0], [52.0, 8773.0], [52.1, 8773.0], [52.2, 8773.0], [52.3, 8773.0], [52.4, 8773.0], [52.5, 8773.0], [52.6, 8773.0], [52.7, 8773.0], [52.8, 8773.0], [52.9, 8773.0], [53.0, 8904.0], [53.1, 8904.0], [53.2, 8904.0], [53.3, 8904.0], [53.4, 8904.0], [53.5, 8904.0], [53.6, 8904.0], [53.7, 8904.0], [53.8, 8904.0], [53.9, 8904.0], [54.0, 9022.0], [54.1, 9022.0], [54.2, 9022.0], [54.3, 9022.0], [54.4, 9022.0], [54.5, 9022.0], [54.6, 9022.0], [54.7, 9022.0], [54.8, 9022.0], [54.9, 9022.0], [55.0, 9113.0], [55.1, 9113.0], [55.2, 9113.0], [55.3, 9113.0], [55.4, 9113.0], [55.5, 9113.0], [55.6, 9113.0], [55.7, 9113.0], [55.8, 9113.0], [55.9, 9113.0], [56.0, 9246.0], [56.1, 9246.0], [56.2, 9246.0], [56.3, 9246.0], [56.4, 9246.0], [56.5, 9246.0], [56.6, 9246.0], [56.7, 9246.0], [56.8, 9246.0], [56.9, 9246.0], [57.0, 9252.0], [57.1, 9252.0], [57.2, 9252.0], [57.3, 9252.0], [57.4, 9252.0], [57.5, 9252.0], [57.6, 9252.0], [57.7, 9252.0], [57.8, 9252.0], [57.9, 9252.0], [58.0, 9364.0], [58.1, 9364.0], [58.2, 9364.0], [58.3, 9364.0], [58.4, 9364.0], [58.5, 9364.0], [58.6, 9364.0], [58.7, 9364.0], [58.8, 9364.0], [58.9, 9364.0], [59.0, 9538.0], [59.1, 9538.0], [59.2, 9538.0], [59.3, 9538.0], [59.4, 9538.0], [59.5, 9538.0], [59.6, 9538.0], [59.7, 9538.0], [59.8, 9538.0], [59.9, 9538.0], [60.0, 9631.0], [60.1, 9631.0], [60.2, 9631.0], [60.3, 9631.0], [60.4, 9631.0], [60.5, 9631.0], [60.6, 9631.0], [60.7, 9631.0], [60.8, 9631.0], [60.9, 9631.0], [61.0, 9632.0], [61.1, 9632.0], [61.2, 9632.0], [61.3, 9632.0], [61.4, 9632.0], [61.5, 9632.0], [61.6, 9632.0], [61.7, 9632.0], [61.8, 9632.0], [61.9, 9632.0], [62.0, 9707.0], [62.1, 9707.0], [62.2, 9707.0], [62.3, 9707.0], [62.4, 9707.0], [62.5, 9707.0], [62.6, 9707.0], [62.7, 9707.0], [62.8, 9707.0], [62.9, 9707.0], [63.0, 9780.0], [63.1, 9780.0], [63.2, 9780.0], [63.3, 9780.0], [63.4, 9780.0], [63.5, 9780.0], [63.6, 9780.0], [63.7, 9780.0], [63.8, 9780.0], [63.9, 9780.0], [64.0, 9801.0], [64.1, 9801.0], [64.2, 9801.0], [64.3, 9801.0], [64.4, 9801.0], [64.5, 9801.0], [64.6, 9801.0], [64.7, 9801.0], [64.8, 9801.0], [64.9, 9801.0], [65.0, 9865.0], [65.1, 9865.0], [65.2, 9865.0], [65.3, 9865.0], [65.4, 9865.0], [65.5, 9865.0], [65.6, 9865.0], [65.7, 9865.0], [65.8, 9865.0], [65.9, 9865.0], [66.0, 10235.0], [66.1, 10235.0], [66.2, 10235.0], [66.3, 10235.0], [66.4, 10235.0], [66.5, 10235.0], [66.6, 10235.0], [66.7, 10235.0], [66.8, 10235.0], [66.9, 10235.0], [67.0, 10269.0], [67.1, 10269.0], [67.2, 10269.0], [67.3, 10269.0], [67.4, 10269.0], [67.5, 10269.0], [67.6, 10269.0], [67.7, 10269.0], [67.8, 10269.0], [67.9, 10269.0], [68.0, 10396.0], [68.1, 10396.0], [68.2, 10396.0], [68.3, 10396.0], [68.4, 10396.0], [68.5, 10396.0], [68.6, 10396.0], [68.7, 10396.0], [68.8, 10396.0], [68.9, 10396.0], [69.0, 10466.0], [69.1, 10466.0], [69.2, 10466.0], [69.3, 10466.0], [69.4, 10466.0], [69.5, 10466.0], [69.6, 10466.0], [69.7, 10466.0], [69.8, 10466.0], [69.9, 10466.0], [70.0, 10677.0], [70.1, 10677.0], [70.2, 10677.0], [70.3, 10677.0], [70.4, 10677.0], [70.5, 10677.0], [70.6, 10677.0], [70.7, 10677.0], [70.8, 10677.0], [70.9, 10677.0], [71.0, 10736.0], [71.1, 10736.0], [71.2, 10736.0], [71.3, 10736.0], [71.4, 10736.0], [71.5, 10736.0], [71.6, 10736.0], [71.7, 10736.0], [71.8, 10736.0], [71.9, 10736.0], [72.0, 10750.0], [72.1, 10750.0], [72.2, 10750.0], [72.3, 10750.0], [72.4, 10750.0], [72.5, 10750.0], [72.6, 10750.0], [72.7, 10750.0], [72.8, 10750.0], [72.9, 10750.0], [73.0, 10858.0], [73.1, 10858.0], [73.2, 10858.0], [73.3, 10858.0], [73.4, 10858.0], [73.5, 10858.0], [73.6, 10858.0], [73.7, 10858.0], [73.8, 10858.0], [73.9, 10858.0], [74.0, 11037.0], [74.1, 11037.0], [74.2, 11037.0], [74.3, 11037.0], [74.4, 11037.0], [74.5, 11037.0], [74.6, 11037.0], [74.7, 11037.0], [74.8, 11037.0], [74.9, 11037.0], [75.0, 11159.0], [75.1, 11159.0], [75.2, 11159.0], [75.3, 11159.0], [75.4, 11159.0], [75.5, 11159.0], [75.6, 11159.0], [75.7, 11159.0], [75.8, 11159.0], [75.9, 11159.0], [76.0, 11175.0], [76.1, 11175.0], [76.2, 11175.0], [76.3, 11175.0], [76.4, 11175.0], [76.5, 11175.0], [76.6, 11175.0], [76.7, 11175.0], [76.8, 11175.0], [76.9, 11175.0], [77.0, 11339.0], [77.1, 11339.0], [77.2, 11339.0], [77.3, 11339.0], [77.4, 11339.0], [77.5, 11339.0], [77.6, 11339.0], [77.7, 11339.0], [77.8, 11339.0], [77.9, 11339.0], [78.0, 11381.0], [78.1, 11381.0], [78.2, 11381.0], [78.3, 11381.0], [78.4, 11381.0], [78.5, 11381.0], [78.6, 11381.0], [78.7, 11381.0], [78.8, 11381.0], [78.9, 11381.0], [79.0, 11445.0], [79.1, 11445.0], [79.2, 11445.0], [79.3, 11445.0], [79.4, 11445.0], [79.5, 11445.0], [79.6, 11445.0], [79.7, 11445.0], [79.8, 11445.0], [79.9, 11445.0], [80.0, 11514.0], [80.1, 11514.0], [80.2, 11514.0], [80.3, 11514.0], [80.4, 11514.0], [80.5, 11514.0], [80.6, 11514.0], [80.7, 11514.0], [80.8, 11514.0], [80.9, 11514.0], [81.0, 11589.0], [81.1, 11589.0], [81.2, 11589.0], [81.3, 11589.0], [81.4, 11589.0], [81.5, 11589.0], [81.6, 11589.0], [81.7, 11589.0], [81.8, 11589.0], [81.9, 11589.0], [82.0, 11630.0], [82.1, 11630.0], [82.2, 11630.0], [82.3, 11630.0], [82.4, 11630.0], [82.5, 11630.0], [82.6, 11630.0], [82.7, 11630.0], [82.8, 11630.0], [82.9, 11630.0], [83.0, 11641.0], [83.1, 11641.0], [83.2, 11641.0], [83.3, 11641.0], [83.4, 11641.0], [83.5, 11641.0], [83.6, 11641.0], [83.7, 11641.0], [83.8, 11641.0], [83.9, 11641.0], [84.0, 11736.0], [84.1, 11736.0], [84.2, 11736.0], [84.3, 11736.0], [84.4, 11736.0], [84.5, 11736.0], [84.6, 11736.0], [84.7, 11736.0], [84.8, 11736.0], [84.9, 11736.0], [85.0, 11946.0], [85.1, 11946.0], [85.2, 11946.0], [85.3, 11946.0], [85.4, 11946.0], [85.5, 11946.0], [85.6, 11946.0], [85.7, 11946.0], [85.8, 11946.0], [85.9, 11946.0], [86.0, 12082.0], [86.1, 12082.0], [86.2, 12082.0], [86.3, 12082.0], [86.4, 12082.0], [86.5, 12082.0], [86.6, 12082.0], [86.7, 12082.0], [86.8, 12082.0], [86.9, 12082.0], [87.0, 12086.0], [87.1, 12086.0], [87.2, 12086.0], [87.3, 12086.0], [87.4, 12086.0], [87.5, 12086.0], [87.6, 12086.0], [87.7, 12086.0], [87.8, 12086.0], [87.9, 12086.0], [88.0, 12229.0], [88.1, 12229.0], [88.2, 12229.0], [88.3, 12229.0], [88.4, 12229.0], [88.5, 12229.0], [88.6, 12229.0], [88.7, 12229.0], [88.8, 12229.0], [88.9, 12229.0], [89.0, 12494.0], [89.1, 12494.0], [89.2, 12494.0], [89.3, 12494.0], [89.4, 12494.0], [89.5, 12494.0], [89.6, 12494.0], [89.7, 12494.0], [89.8, 12494.0], [89.9, 12494.0], [90.0, 12848.0], [90.1, 12848.0], [90.2, 12848.0], [90.3, 12848.0], [90.4, 12848.0], [90.5, 12848.0], [90.6, 12848.0], [90.7, 12848.0], [90.8, 12848.0], [90.9, 12848.0], [91.0, 13216.0], [91.1, 13216.0], [91.2, 13216.0], [91.3, 13216.0], [91.4, 13216.0], [91.5, 13216.0], [91.6, 13216.0], [91.7, 13216.0], [91.8, 13216.0], [91.9, 13216.0], [92.0, 13353.0], [92.1, 13353.0], [92.2, 13353.0], [92.3, 13353.0], [92.4, 13353.0], [92.5, 13353.0], [92.6, 13353.0], [92.7, 13353.0], [92.8, 13353.0], [92.9, 13353.0], [93.0, 13732.0], [93.1, 13732.0], [93.2, 13732.0], [93.3, 13732.0], [93.4, 13732.0], [93.5, 13732.0], [93.6, 13732.0], [93.7, 13732.0], [93.8, 13732.0], [93.9, 13732.0], [94.0, 13804.0], [94.1, 13804.0], [94.2, 13804.0], [94.3, 13804.0], [94.4, 13804.0], [94.5, 13804.0], [94.6, 13804.0], [94.7, 13804.0], [94.8, 13804.0], [94.9, 13804.0], [95.0, 13901.0], [95.1, 13901.0], [95.2, 13901.0], [95.3, 13901.0], [95.4, 13901.0], [95.5, 13901.0], [95.6, 13901.0], [95.7, 13901.0], [95.8, 13901.0], [95.9, 13901.0], [96.0, 13942.0], [96.1, 13942.0], [96.2, 13942.0], [96.3, 13942.0], [96.4, 13942.0], [96.5, 13942.0], [96.6, 13942.0], [96.7, 13942.0], [96.8, 13942.0], [96.9, 13942.0], [97.0, 14227.0], [97.1, 14227.0], [97.2, 14227.0], [97.3, 14227.0], [97.4, 14227.0], [97.5, 14227.0], [97.6, 14227.0], [97.7, 14227.0], [97.8, 14227.0], [97.9, 14227.0], [98.0, 17187.0], [98.1, 17187.0], [98.2, 17187.0], [98.3, 17187.0], [98.4, 17187.0], [98.5, 17187.0], [98.6, 17187.0], [98.7, 17187.0], [98.8, 17187.0], [98.9, 17187.0], [99.0, 17693.0], [99.1, 17693.0], [99.2, 17693.0], [99.3, 17693.0], [99.4, 17693.0], [99.5, 17693.0], [99.6, 17693.0], [99.7, 17693.0], [99.8, 17693.0], [99.9, 17693.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1800.0, "maxY": 6.0, "series": [{"data": [[2600.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [65700.0, 1.0], [66100.0, 1.0], [68900.0, 1.0], [70100.0, 1.0], [4700.0, 2.0], [75100.0, 1.0], [80700.0, 1.0], [87900.0, 1.0], [90100.0, 1.0], [5700.0, 1.0], [91100.0, 2.0], [95700.0, 1.0], [98500.0, 1.0], [99500.0, 1.0], [100100.0, 1.0], [101700.0, 1.0], [6600.0, 1.0], [6700.0, 3.0], [7400.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12500.0, 1.0], [14000.0, 1.0], [15200.0, 1.0], [15900.0, 1.0], [16000.0, 1.0], [17000.0, 1.0], [18000.0, 1.0], [22000.0, 1.0], [22100.0, 1.0], [23500.0, 1.0], [24900.0, 1.0], [25500.0, 1.0], [26100.0, 1.0], [26500.0, 1.0], [26600.0, 1.0], [28600.0, 1.0], [30100.0, 1.0], [31300.0, 1.0], [31700.0, 1.0], [32300.0, 1.0], [36500.0, 1.0], [37500.0, 1.0], [37600.0, 1.0], [38200.0, 1.0], [39700.0, 2.0], [40100.0, 1.0], [40300.0, 1.0], [40600.0, 1.0], [45700.0, 1.0], [46500.0, 1.0], [47600.0, 1.0], [48200.0, 1.0], [48900.0, 1.0], [49000.0, 1.0], [49500.0, 1.0], [50700.0, 1.0], [51700.0, 1.0], [54600.0, 1.0], [56600.0, 1.0], [57400.0, 1.0], [58000.0, 1.0], [58400.0, 1.0], [59500.0, 1.0], [61000.0, 1.0], [62700.0, 1.0], [62800.0, 1.0], [65400.0, 1.0], [65600.0, 1.0], [67400.0, 1.0], [67600.0, 1.0], [67800.0, 1.0], [70400.0, 1.0], [72400.0, 1.0], [73200.0, 1.0], [76600.0, 1.0], [77200.0, 1.0], [77400.0, 1.0], [78600.0, 1.0], [78800.0, 1.0], [79800.0, 1.0], [82400.0, 1.0], [85800.0, 1.0], [89600.0, 1.0], [90600.0, 1.0], [92200.0, 1.0], [92600.0, 1.0], [99200.0, 1.0], [99400.0, 1.0], [100200.0, 1.0], [101200.0, 1.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1800.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2500.0, 2.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3200.0, 2.0], [3300.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 3.0], [3900.0, 1.0], [4500.0, 2.0], [4400.0, 2.0], [4600.0, 2.0], [4800.0, 1.0], [4900.0, 1.0], [5000.0, 1.0], [5100.0, 1.0], [5300.0, 6.0], [5500.0, 1.0], [5800.0, 2.0], [5700.0, 1.0], [6000.0, 2.0], [6100.0, 1.0], [5900.0, 2.0], [6200.0, 2.0], [6500.0, 3.0], [6400.0, 1.0], [6900.0, 2.0], [6700.0, 1.0], [6800.0, 2.0], [7000.0, 1.0], [7400.0, 1.0], [7200.0, 2.0], [7500.0, 1.0], [7800.0, 2.0], [7900.0, 1.0], [7700.0, 2.0], [8100.0, 2.0], [8000.0, 2.0], [8200.0, 3.0], [8400.0, 3.0], [8300.0, 1.0], [8700.0, 1.0], [9200.0, 3.0], [8900.0, 2.0], [9000.0, 2.0], [9100.0, 1.0], [9600.0, 1.0], [9300.0, 2.0], [10400.0, 1.0], [11000.0, 1.0], [10800.0, 1.0], [10900.0, 1.0], [11200.0, 1.0], [12200.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [12800.0, 1.0], [14500.0, 2.0], [14900.0, 1.0], [15200.0, 1.0], [16400.0, 1.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[2600.0, 1.0], [3100.0, 1.0], [3300.0, 2.0], [3600.0, 1.0], [4000.0, 1.0], [4300.0, 2.0], [4400.0, 1.0], [4500.0, 1.0], [4700.0, 2.0], [4800.0, 1.0], [5100.0, 1.0], [5000.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5600.0, 1.0], [5700.0, 3.0], [6000.0, 1.0], [6100.0, 1.0], [6500.0, 3.0], [6600.0, 3.0], [7100.0, 1.0], [7400.0, 6.0], [7300.0, 2.0], [7200.0, 1.0], [7600.0, 1.0], [7900.0, 5.0], [7700.0, 1.0], [8300.0, 1.0], [8600.0, 2.0], [8700.0, 2.0], [8400.0, 2.0], [8900.0, 1.0], [9200.0, 2.0], [9000.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [9700.0, 2.0], [9600.0, 2.0], [9800.0, 2.0], [10200.0, 2.0], [10400.0, 1.0], [10700.0, 2.0], [10600.0, 1.0], [10300.0, 1.0], [11100.0, 2.0], [10800.0, 1.0], [11000.0, 1.0], [11500.0, 2.0], [11300.0, 2.0], [11700.0, 1.0], [11600.0, 2.0], [11400.0, 1.0], [12200.0, 1.0], [12000.0, 2.0], [11900.0, 1.0], [12400.0, 1.0], [13300.0, 1.0], [12800.0, 1.0], [13200.0, 1.0], [13700.0, 1.0], [13800.0, 1.0], [13900.0, 2.0], [14200.0, 1.0], [17100.0, 1.0], [17600.0, 1.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 101700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 300.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 300.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 300.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.52459016393443, "minX": 1.69851798E12, "maxY": 93.7333333333333, "series": [{"data": [[1.6985181E12, 17.52459016393443], [1.69851798E12, 93.7333333333333], [1.69851804E12, 56.18902439024389]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6985181E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1869.0, "minX": 1.0, "maxY": 101752.0, "series": [{"data": [[33.0, 85854.0], [32.0, 87921.0], [35.0, 82408.0], [38.0, 79501.0], [40.0, 77354.0], [42.0, 76617.0], [45.0, 75138.0], [47.0, 71029.66666666667], [46.0, 73233.0], [49.0, 67747.0], [48.0, 68944.0], [50.0, 66087.4], [54.0, 62816.5], [59.0, 59505.0], [58.0, 61075.0], [61.0, 57374.333333333336], [60.0, 58463.0], [67.0, 51763.0], [64.0, 54677.0], [71.0, 45736.0], [70.0, 47125.0], [69.0, 48954.25], [68.0, 50782.0], [75.0, 40124.0], [79.0, 37796.333333333336], [80.0, 36517.0], [87.0, 25556.666666666668], [86.0, 26595.0], [85.0, 30044.666666666668], [84.0, 32058.0], [89.0, 22580.666666666668], [99.0, 12266.333333333334], [98.0, 15664.6], [96.0, 18011.0], [100.0, 5093.583333333333], [17.0, 101752.0], [18.0, 101289.0], [19.0, 100230.5], [21.0, 99197.75], [23.0, 95703.0], [26.0, 92443.5], [28.0, 91181.5], [30.0, 90397.0], [31.0, 89619.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[64.33000000000006, 51019.64]], "isOverall": false, "label": "Express Js Http Call-Aggregated", "isController": false}, {"data": [[8.0, 8425.0], [10.0, 4697.0], [13.0, 6993.666666666667], [16.0, 3230.0], [17.0, 9295.0], [18.0, 1869.0], [21.0, 7711.0], [22.0, 8049.0], [23.0, 7545.4], [25.0, 8268.0], [26.0, 7697.0], [33.0, 8430.333333333334], [32.0, 7719.0], [35.0, 5974.0], [34.0, 5143.0], [36.0, 10883.75], [38.0, 4832.0], [43.0, 5756.0], [44.0, 7978.5], [47.0, 6605.666666666667], [49.0, 6966.0], [48.0, 7495.5], [50.0, 8329.0], [53.0, 5186.0], [55.0, 14599.0], [59.0, 8488.0], [58.0, 4582.0], [61.0, 12013.0], [60.0, 8982.0], [63.0, 7061.0], [67.0, 6148.0], [65.0, 5988.5], [64.0, 3817.0], [71.0, 6060.0], [70.0, 14905.0], [69.0, 10138.0], [68.0, 10921.0], [75.0, 7969.333333333333], [73.0, 3851.0], [72.0, 6841.0], [79.0, 12523.0], [80.0, 5902.0], [87.0, 8103.0], [86.0, 10419.0], [85.0, 6518.25], [91.0, 6795.0], [89.0, 6200.0], [92.0, 8279.0], [99.0, 7042.333333333333], [98.0, 7202.0], [97.0, 5306.0], [96.0, 6946.0], [100.0, 3670.8333333333335]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[58.29999999999999, 7150.709999999999]], "isOverall": false, "label": "Gin Gonic Http Call-Aggregated", "isController": false}, {"data": [[2.0, 4846.0], [3.0, 4006.0], [4.0, 3111.0], [5.0, 3663.0], [6.0, 4301.0], [7.0, 12494.0], [8.0, 5756.0], [9.0, 3325.0], [10.0, 2641.0], [11.0, 7498.0], [12.0, 4763.0], [13.0, 7689.0], [14.0, 7479.0], [15.0, 7430.0], [16.0, 11589.0], [17.0, 7471.0], [18.0, 7394.0], [19.0, 6582.0], [20.0, 4391.0], [21.0, 11445.0], [22.0, 13216.0], [23.0, 11159.0], [24.0, 11641.0], [25.0, 13901.0], [26.0, 12848.0], [27.0, 10396.0], [28.0, 5012.0], [29.0, 8476.0], [30.0, 11037.0], [31.0, 17693.0], [33.0, 10677.0], [32.0, 7909.0], [35.0, 7298.0], [34.0, 12086.0], [37.0, 9252.0], [36.0, 6134.0], [39.0, 10269.0], [38.0, 9113.0], [41.0, 10235.0], [40.0, 9780.0], [43.0, 5600.0], [42.0, 4787.0], [45.0, 11630.0], [44.0, 6582.0], [47.0, 9022.0], [46.0, 13804.0], [49.0, 9632.0], [48.0, 7920.0], [51.0, 9246.0], [50.0, 8461.0], [53.0, 10736.0], [52.0, 4526.0], [55.0, 5733.0], [54.0, 7105.0], [57.0, 10750.0], [56.0, 5778.0], [59.0, 14227.0], [58.0, 11736.0], [61.0, 5112.0], [60.0, 9865.0], [63.0, 4461.0], [62.0, 11946.0], [67.0, 7710.0], [66.0, 8773.0], [65.0, 13732.0], [64.0, 8904.0], [71.0, 9801.0], [70.0, 7969.0], [69.0, 12229.0], [68.0, 12082.0], [75.0, 11339.0], [74.0, 13353.0], [73.0, 13942.0], [72.0, 7924.0], [79.0, 17187.0], [78.0, 10466.0], [77.0, 7935.0], [76.0, 9631.0], [83.0, 9707.0], [82.0, 6034.0], [81.0, 10858.0], [80.0, 6667.0], [87.0, 5568.0], [86.0, 8713.0], [85.0, 11381.0], [84.0, 6634.0], [91.0, 8677.0], [90.0, 11514.0], [89.0, 9538.0], [88.0, 6667.0], [95.0, 9740.0], [93.0, 5413.0], [92.0, 8639.0], [99.0, 7409.0], [98.0, 9364.0], [97.0, 7432.0], [96.0, 7384.0], [100.0, 6591.0], [1.0, 3321.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}, {"data": [[50.51, 8746.33]], "isOverall": false, "label": "Spring Boot Http Call-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 139.28333333333333, "minX": 1.69851798E12, "maxY": 4917940.6, "series": [{"data": [[1.6985181E12, 1810626.5833333333], [1.69851798E12, 2274047.816666667], [1.69851804E12, 4917940.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6985181E12, 139.28333333333333], [1.69851798E12, 171.25], [1.69851804E12, 374.46666666666664]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6985181E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6323.392857142858, "minX": 1.69851798E12, "maxY": 97172.76923076923, "series": [{"data": [[1.6985181E12, 97172.76923076923], [1.69851798E12, 15062.25], [1.69851804E12, 61031.38181818183]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.6985181E12, 6605.299999999999], [1.69851798E12, 6323.392857142858], [1.69851804E12, 7805.961538461537]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.6985181E12, 7477.428571428571], [1.69851798E12, 8159.266666666666], [1.69851804E12, 9524.140350877193]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6985181E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6289.607142857143, "minX": 1.69851798E12, "maxY": 97131.84615384616, "series": [{"data": [[1.6985181E12, 97131.84615384616], [1.69851798E12, 15027.468749999998], [1.69851804E12, 60993.54545454546]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.6985181E12, 6571.85], [1.69851798E12, 6289.607142857143], [1.69851804E12, 7767.500000000001]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.6985181E12, 7445.464285714286], [1.69851798E12, 8126.133333333333], [1.69851804E12, 9487.526315789471]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6985181E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.7499999999999999, "minX": 1.69851798E12, "maxY": 22.968750000000007, "series": [{"data": [[1.6985181E12, 0.8461538461538461], [1.69851798E12, 22.968750000000007], [1.69851804E12, 0.8181818181818182]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.6985181E12, 1.05], [1.69851798E12, 0.7499999999999999], [1.69851804E12, 1.3076923076923077]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.6985181E12, 0.8928571428571427], [1.69851798E12, 1.0], [1.69851804E12, 1.0350877192982455]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6985181E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1869.0, "minX": 1.69851798E12, "maxY": 101752.0, "series": [{"data": [[1.6985181E12, 101752.0], [1.69851798E12, 31383.0], [1.69851804E12, 90685.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6985181E12, 99381.0], [1.69851798E12, 25202.200000000004], [1.69851804E12, 71449.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6985181E12, 101752.0], [1.69851798E12, 31383.0], [1.69851804E12, 90310.59999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6985181E12, 100263.7], [1.69851798E12, 27072.400000000005], [1.69851804E12, 79557.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6985181E12, 1869.0], [1.69851798E12, 2170.0], [1.69851804E12, 2696.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6985181E12, 7711.0], [1.69851798E12, 7433.0], [1.69851804E12, 10804.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6985181E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6946.0, "minX": 1.0, "maxY": 11040.0, "series": [{"data": [[1.0, 6946.0], [2.0, 11040.0], [8.0, 8316.5], [4.0, 9337.0], [5.0, 7604.0], [3.0, 9323.5], [6.0, 9838.0], [7.0, 9632.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6916.0, "minX": 1.0, "maxY": 11008.5, "series": [{"data": [[1.0, 6916.0], [2.0, 11008.5], [8.0, 8278.5], [4.0, 9294.5], [5.0, 7571.0], [3.0, 9285.0], [6.0, 9795.5], [7.0, 9598.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.69851798E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.6985181E12, 0.55], [1.69851798E12, 2.6666666666666665], [1.69851804E12, 1.7833333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6985181E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.69851798E12, "maxY": 2.7333333333333334, "series": [{"data": [[1.6985181E12, 1.0166666666666666], [1.69851798E12, 1.25], [1.69851804E12, 2.7333333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6985181E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.69851798E12, "maxY": 0.95, "series": [{"data": [[1.6985181E12, 0.3333333333333333], [1.69851798E12, 0.4666666666666667], [1.69851804E12, 0.8666666666666667]], "isOverall": false, "label": "Gin Gonic Http Call-success", "isController": false}, {"data": [[1.6985181E12, 0.4666666666666667], [1.69851798E12, 0.25], [1.69851804E12, 0.95]], "isOverall": false, "label": "Spring Boot Http Call-success", "isController": false}, {"data": [[1.6985181E12, 0.21666666666666667], [1.69851798E12, 0.5333333333333333], [1.69851804E12, 0.9166666666666666]], "isOverall": false, "label": "Express Js Http Call-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6985181E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.69851798E12, "maxY": 2.7333333333333334, "series": [{"data": [[1.6985181E12, 1.0166666666666666], [1.69851798E12, 1.25], [1.69851804E12, 2.7333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6985181E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

