/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 112.0, "minX": 0.0, "maxY": 14775.0, "series": [{"data": [[0.0, 400.0], [0.1, 400.0], [0.2, 400.0], [0.3, 400.0], [0.4, 400.0], [0.5, 400.0], [0.6, 400.0], [0.7, 400.0], [0.8, 400.0], [0.9, 400.0], [1.0, 552.0], [1.1, 552.0], [1.2, 552.0], [1.3, 552.0], [1.4, 552.0], [1.5, 552.0], [1.6, 552.0], [1.7, 552.0], [1.8, 552.0], [1.9, 552.0], [2.0, 716.0], [2.1, 716.0], [2.2, 716.0], [2.3, 716.0], [2.4, 716.0], [2.5, 716.0], [2.6, 716.0], [2.7, 716.0], [2.8, 716.0], [2.9, 716.0], [3.0, 927.0], [3.1, 927.0], [3.2, 927.0], [3.3, 927.0], [3.4, 927.0], [3.5, 927.0], [3.6, 927.0], [3.7, 927.0], [3.8, 927.0], [3.9, 927.0], [4.0, 1098.0], [4.1, 1098.0], [4.2, 1098.0], [4.3, 1098.0], [4.4, 1098.0], [4.5, 1098.0], [4.6, 1098.0], [4.7, 1098.0], [4.8, 1098.0], [4.9, 1098.0], [5.0, 1163.0], [5.1, 1163.0], [5.2, 1163.0], [5.3, 1163.0], [5.4, 1163.0], [5.5, 1163.0], [5.6, 1163.0], [5.7, 1163.0], [5.8, 1163.0], [5.9, 1163.0], [6.0, 1404.0], [6.1, 1404.0], [6.2, 1404.0], [6.3, 1404.0], [6.4, 1404.0], [6.5, 1404.0], [6.6, 1404.0], [6.7, 1404.0], [6.8, 1404.0], [6.9, 1404.0], [7.0, 1529.0], [7.1, 1529.0], [7.2, 1529.0], [7.3, 1529.0], [7.4, 1529.0], [7.5, 1529.0], [7.6, 1529.0], [7.7, 1529.0], [7.8, 1529.0], [7.9, 1529.0], [8.0, 1726.0], [8.1, 1726.0], [8.2, 1726.0], [8.3, 1726.0], [8.4, 1726.0], [8.5, 1726.0], [8.6, 1726.0], [8.7, 1726.0], [8.8, 1726.0], [8.9, 1726.0], [9.0, 1822.0], [9.1, 1822.0], [9.2, 1822.0], [9.3, 1822.0], [9.4, 1822.0], [9.5, 1822.0], [9.6, 1822.0], [9.7, 1822.0], [9.8, 1822.0], [9.9, 1822.0], [10.0, 1981.0], [10.1, 1981.0], [10.2, 1981.0], [10.3, 1981.0], [10.4, 1981.0], [10.5, 1981.0], [10.6, 1981.0], [10.7, 1981.0], [10.8, 1981.0], [10.9, 1981.0], [11.0, 2249.0], [11.1, 2249.0], [11.2, 2249.0], [11.3, 2249.0], [11.4, 2249.0], [11.5, 2249.0], [11.6, 2249.0], [11.7, 2249.0], [11.8, 2249.0], [11.9, 2249.0], [12.0, 2422.0], [12.1, 2422.0], [12.2, 2422.0], [12.3, 2422.0], [12.4, 2422.0], [12.5, 2422.0], [12.6, 2422.0], [12.7, 2422.0], [12.8, 2422.0], [12.9, 2422.0], [13.0, 2579.0], [13.1, 2579.0], [13.2, 2579.0], [13.3, 2579.0], [13.4, 2579.0], [13.5, 2579.0], [13.6, 2579.0], [13.7, 2579.0], [13.8, 2579.0], [13.9, 2579.0], [14.0, 2725.0], [14.1, 2725.0], [14.2, 2725.0], [14.3, 2725.0], [14.4, 2725.0], [14.5, 2725.0], [14.6, 2725.0], [14.7, 2725.0], [14.8, 2725.0], [14.9, 2725.0], [15.0, 2914.0], [15.1, 2914.0], [15.2, 2914.0], [15.3, 2914.0], [15.4, 2914.0], [15.5, 2914.0], [15.6, 2914.0], [15.7, 2914.0], [15.8, 2914.0], [15.9, 2914.0], [16.0, 3035.0], [16.1, 3035.0], [16.2, 3035.0], [16.3, 3035.0], [16.4, 3035.0], [16.5, 3035.0], [16.6, 3035.0], [16.7, 3035.0], [16.8, 3035.0], [16.9, 3035.0], [17.0, 3179.0], [17.1, 3179.0], [17.2, 3179.0], [17.3, 3179.0], [17.4, 3179.0], [17.5, 3179.0], [17.6, 3179.0], [17.7, 3179.0], [17.8, 3179.0], [17.9, 3179.0], [18.0, 3285.0], [18.1, 3285.0], [18.2, 3285.0], [18.3, 3285.0], [18.4, 3285.0], [18.5, 3285.0], [18.6, 3285.0], [18.7, 3285.0], [18.8, 3285.0], [18.9, 3285.0], [19.0, 3390.0], [19.1, 3390.0], [19.2, 3390.0], [19.3, 3390.0], [19.4, 3390.0], [19.5, 3390.0], [19.6, 3390.0], [19.7, 3390.0], [19.8, 3390.0], [19.9, 3390.0], [20.0, 3454.0], [20.1, 3454.0], [20.2, 3454.0], [20.3, 3454.0], [20.4, 3454.0], [20.5, 3454.0], [20.6, 3454.0], [20.7, 3454.0], [20.8, 3454.0], [20.9, 3454.0], [21.0, 3578.0], [21.1, 3578.0], [21.2, 3578.0], [21.3, 3578.0], [21.4, 3578.0], [21.5, 3578.0], [21.6, 3578.0], [21.7, 3578.0], [21.8, 3578.0], [21.9, 3578.0], [22.0, 3822.0], [22.1, 3822.0], [22.2, 3822.0], [22.3, 3822.0], [22.4, 3822.0], [22.5, 3822.0], [22.6, 3822.0], [22.7, 3822.0], [22.8, 3822.0], [22.9, 3822.0], [23.0, 3946.0], [23.1, 3946.0], [23.2, 3946.0], [23.3, 3946.0], [23.4, 3946.0], [23.5, 3946.0], [23.6, 3946.0], [23.7, 3946.0], [23.8, 3946.0], [23.9, 3946.0], [24.0, 4055.0], [24.1, 4055.0], [24.2, 4055.0], [24.3, 4055.0], [24.4, 4055.0], [24.5, 4055.0], [24.6, 4055.0], [24.7, 4055.0], [24.8, 4055.0], [24.9, 4055.0], [25.0, 4178.0], [25.1, 4178.0], [25.2, 4178.0], [25.3, 4178.0], [25.4, 4178.0], [25.5, 4178.0], [25.6, 4178.0], [25.7, 4178.0], [25.8, 4178.0], [25.9, 4178.0], [26.0, 4303.0], [26.1, 4303.0], [26.2, 4303.0], [26.3, 4303.0], [26.4, 4303.0], [26.5, 4303.0], [26.6, 4303.0], [26.7, 4303.0], [26.8, 4303.0], [26.9, 4303.0], [27.0, 4418.0], [27.1, 4418.0], [27.2, 4418.0], [27.3, 4418.0], [27.4, 4418.0], [27.5, 4418.0], [27.6, 4418.0], [27.7, 4418.0], [27.8, 4418.0], [27.9, 4418.0], [28.0, 4548.0], [28.1, 4548.0], [28.2, 4548.0], [28.3, 4548.0], [28.4, 4548.0], [28.5, 4548.0], [28.6, 4548.0], [28.7, 4548.0], [28.8, 4548.0], [28.9, 4548.0], [29.0, 4705.0], [29.1, 4705.0], [29.2, 4705.0], [29.3, 4705.0], [29.4, 4705.0], [29.5, 4705.0], [29.6, 4705.0], [29.7, 4705.0], [29.8, 4705.0], [29.9, 4705.0], [30.0, 4908.0], [30.1, 4908.0], [30.2, 4908.0], [30.3, 4908.0], [30.4, 4908.0], [30.5, 4908.0], [30.6, 4908.0], [30.7, 4908.0], [30.8, 4908.0], [30.9, 4908.0], [31.0, 5147.0], [31.1, 5147.0], [31.2, 5147.0], [31.3, 5147.0], [31.4, 5147.0], [31.5, 5147.0], [31.6, 5147.0], [31.7, 5147.0], [31.8, 5147.0], [31.9, 5147.0], [32.0, 5241.0], [32.1, 5241.0], [32.2, 5241.0], [32.3, 5241.0], [32.4, 5241.0], [32.5, 5241.0], [32.6, 5241.0], [32.7, 5241.0], [32.8, 5241.0], [32.9, 5241.0], [33.0, 5460.0], [33.1, 5460.0], [33.2, 5460.0], [33.3, 5460.0], [33.4, 5460.0], [33.5, 5460.0], [33.6, 5460.0], [33.7, 5460.0], [33.8, 5460.0], [33.9, 5460.0], [34.0, 5555.0], [34.1, 5555.0], [34.2, 5555.0], [34.3, 5555.0], [34.4, 5555.0], [34.5, 5555.0], [34.6, 5555.0], [34.7, 5555.0], [34.8, 5555.0], [34.9, 5555.0], [35.0, 5752.0], [35.1, 5752.0], [35.2, 5752.0], [35.3, 5752.0], [35.4, 5752.0], [35.5, 5752.0], [35.6, 5752.0], [35.7, 5752.0], [35.8, 5752.0], [35.9, 5752.0], [36.0, 6071.0], [36.1, 6071.0], [36.2, 6071.0], [36.3, 6071.0], [36.4, 6071.0], [36.5, 6071.0], [36.6, 6071.0], [36.7, 6071.0], [36.8, 6071.0], [36.9, 6071.0], [37.0, 6220.0], [37.1, 6220.0], [37.2, 6220.0], [37.3, 6220.0], [37.4, 6220.0], [37.5, 6220.0], [37.6, 6220.0], [37.7, 6220.0], [37.8, 6220.0], [37.9, 6220.0], [38.0, 6269.0], [38.1, 6269.0], [38.2, 6269.0], [38.3, 6269.0], [38.4, 6269.0], [38.5, 6269.0], [38.6, 6269.0], [38.7, 6269.0], [38.8, 6269.0], [38.9, 6269.0], [39.0, 6419.0], [39.1, 6419.0], [39.2, 6419.0], [39.3, 6419.0], [39.4, 6419.0], [39.5, 6419.0], [39.6, 6419.0], [39.7, 6419.0], [39.8, 6419.0], [39.9, 6419.0], [40.0, 6552.0], [40.1, 6552.0], [40.2, 6552.0], [40.3, 6552.0], [40.4, 6552.0], [40.5, 6552.0], [40.6, 6552.0], [40.7, 6552.0], [40.8, 6552.0], [40.9, 6552.0], [41.0, 6659.0], [41.1, 6659.0], [41.2, 6659.0], [41.3, 6659.0], [41.4, 6659.0], [41.5, 6659.0], [41.6, 6659.0], [41.7, 6659.0], [41.8, 6659.0], [41.9, 6659.0], [42.0, 6807.0], [42.1, 6807.0], [42.2, 6807.0], [42.3, 6807.0], [42.4, 6807.0], [42.5, 6807.0], [42.6, 6807.0], [42.7, 6807.0], [42.8, 6807.0], [42.9, 6807.0], [43.0, 6999.0], [43.1, 6999.0], [43.2, 6999.0], [43.3, 6999.0], [43.4, 6999.0], [43.5, 6999.0], [43.6, 6999.0], [43.7, 6999.0], [43.8, 6999.0], [43.9, 6999.0], [44.0, 7113.0], [44.1, 7113.0], [44.2, 7113.0], [44.3, 7113.0], [44.4, 7113.0], [44.5, 7113.0], [44.6, 7113.0], [44.7, 7113.0], [44.8, 7113.0], [44.9, 7113.0], [45.0, 7437.0], [45.1, 7437.0], [45.2, 7437.0], [45.3, 7437.0], [45.4, 7437.0], [45.5, 7437.0], [45.6, 7437.0], [45.7, 7437.0], [45.8, 7437.0], [45.9, 7437.0], [46.0, 7517.0], [46.1, 7517.0], [46.2, 7517.0], [46.3, 7517.0], [46.4, 7517.0], [46.5, 7517.0], [46.6, 7517.0], [46.7, 7517.0], [46.8, 7517.0], [46.9, 7517.0], [47.0, 7599.0], [47.1, 7599.0], [47.2, 7599.0], [47.3, 7599.0], [47.4, 7599.0], [47.5, 7599.0], [47.6, 7599.0], [47.7, 7599.0], [47.8, 7599.0], [47.9, 7599.0], [48.0, 7729.0], [48.1, 7729.0], [48.2, 7729.0], [48.3, 7729.0], [48.4, 7729.0], [48.5, 7729.0], [48.6, 7729.0], [48.7, 7729.0], [48.8, 7729.0], [48.9, 7729.0], [49.0, 7869.0], [49.1, 7869.0], [49.2, 7869.0], [49.3, 7869.0], [49.4, 7869.0], [49.5, 7869.0], [49.6, 7869.0], [49.7, 7869.0], [49.8, 7869.0], [49.9, 7869.0], [50.0, 8005.0], [50.1, 8005.0], [50.2, 8005.0], [50.3, 8005.0], [50.4, 8005.0], [50.5, 8005.0], [50.6, 8005.0], [50.7, 8005.0], [50.8, 8005.0], [50.9, 8005.0], [51.0, 8069.0], [51.1, 8069.0], [51.2, 8069.0], [51.3, 8069.0], [51.4, 8069.0], [51.5, 8069.0], [51.6, 8069.0], [51.7, 8069.0], [51.8, 8069.0], [51.9, 8069.0], [52.0, 8181.0], [52.1, 8181.0], [52.2, 8181.0], [52.3, 8181.0], [52.4, 8181.0], [52.5, 8181.0], [52.6, 8181.0], [52.7, 8181.0], [52.8, 8181.0], [52.9, 8181.0], [53.0, 8260.0], [53.1, 8260.0], [53.2, 8260.0], [53.3, 8260.0], [53.4, 8260.0], [53.5, 8260.0], [53.6, 8260.0], [53.7, 8260.0], [53.8, 8260.0], [53.9, 8260.0], [54.0, 8408.0], [54.1, 8408.0], [54.2, 8408.0], [54.3, 8408.0], [54.4, 8408.0], [54.5, 8408.0], [54.6, 8408.0], [54.7, 8408.0], [54.8, 8408.0], [54.9, 8408.0], [55.0, 8538.0], [55.1, 8538.0], [55.2, 8538.0], [55.3, 8538.0], [55.4, 8538.0], [55.5, 8538.0], [55.6, 8538.0], [55.7, 8538.0], [55.8, 8538.0], [55.9, 8538.0], [56.0, 8758.0], [56.1, 8758.0], [56.2, 8758.0], [56.3, 8758.0], [56.4, 8758.0], [56.5, 8758.0], [56.6, 8758.0], [56.7, 8758.0], [56.8, 8758.0], [56.9, 8758.0], [57.0, 8864.0], [57.1, 8864.0], [57.2, 8864.0], [57.3, 8864.0], [57.4, 8864.0], [57.5, 8864.0], [57.6, 8864.0], [57.7, 8864.0], [57.8, 8864.0], [57.9, 8864.0], [58.0, 8973.0], [58.1, 8973.0], [58.2, 8973.0], [58.3, 8973.0], [58.4, 8973.0], [58.5, 8973.0], [58.6, 8973.0], [58.7, 8973.0], [58.8, 8973.0], [58.9, 8973.0], [59.0, 9088.0], [59.1, 9088.0], [59.2, 9088.0], [59.3, 9088.0], [59.4, 9088.0], [59.5, 9088.0], [59.6, 9088.0], [59.7, 9088.0], [59.8, 9088.0], [59.9, 9088.0], [60.0, 9226.0], [60.1, 9226.0], [60.2, 9226.0], [60.3, 9226.0], [60.4, 9226.0], [60.5, 9226.0], [60.6, 9226.0], [60.7, 9226.0], [60.8, 9226.0], [60.9, 9226.0], [61.0, 9336.0], [61.1, 9336.0], [61.2, 9336.0], [61.3, 9336.0], [61.4, 9336.0], [61.5, 9336.0], [61.6, 9336.0], [61.7, 9336.0], [61.8, 9336.0], [61.9, 9336.0], [62.0, 9559.0], [62.1, 9559.0], [62.2, 9559.0], [62.3, 9559.0], [62.4, 9559.0], [62.5, 9559.0], [62.6, 9559.0], [62.7, 9559.0], [62.8, 9559.0], [62.9, 9559.0], [63.0, 9706.0], [63.1, 9706.0], [63.2, 9706.0], [63.3, 9706.0], [63.4, 9706.0], [63.5, 9706.0], [63.6, 9706.0], [63.7, 9706.0], [63.8, 9706.0], [63.9, 9706.0], [64.0, 9845.0], [64.1, 9845.0], [64.2, 9845.0], [64.3, 9845.0], [64.4, 9845.0], [64.5, 9845.0], [64.6, 9845.0], [64.7, 9845.0], [64.8, 9845.0], [64.9, 9845.0], [65.0, 9974.0], [65.1, 9974.0], [65.2, 9974.0], [65.3, 9974.0], [65.4, 9974.0], [65.5, 9974.0], [65.6, 9974.0], [65.7, 9974.0], [65.8, 9974.0], [65.9, 9974.0], [66.0, 10093.0], [66.1, 10093.0], [66.2, 10093.0], [66.3, 10093.0], [66.4, 10093.0], [66.5, 10093.0], [66.6, 10093.0], [66.7, 10093.0], [66.8, 10093.0], [66.9, 10093.0], [67.0, 10233.0], [67.1, 10233.0], [67.2, 10233.0], [67.3, 10233.0], [67.4, 10233.0], [67.5, 10233.0], [67.6, 10233.0], [67.7, 10233.0], [67.8, 10233.0], [67.9, 10233.0], [68.0, 10366.0], [68.1, 10366.0], [68.2, 10366.0], [68.3, 10366.0], [68.4, 10366.0], [68.5, 10366.0], [68.6, 10366.0], [68.7, 10366.0], [68.8, 10366.0], [68.9, 10366.0], [69.0, 10556.0], [69.1, 10556.0], [69.2, 10556.0], [69.3, 10556.0], [69.4, 10556.0], [69.5, 10556.0], [69.6, 10556.0], [69.7, 10556.0], [69.8, 10556.0], [69.9, 10556.0], [70.0, 10616.0], [70.1, 10616.0], [70.2, 10616.0], [70.3, 10616.0], [70.4, 10616.0], [70.5, 10616.0], [70.6, 10616.0], [70.7, 10616.0], [70.8, 10616.0], [70.9, 10616.0], [71.0, 10740.0], [71.1, 10740.0], [71.2, 10740.0], [71.3, 10740.0], [71.4, 10740.0], [71.5, 10740.0], [71.6, 10740.0], [71.7, 10740.0], [71.8, 10740.0], [71.9, 10740.0], [72.0, 10857.0], [72.1, 10857.0], [72.2, 10857.0], [72.3, 10857.0], [72.4, 10857.0], [72.5, 10857.0], [72.6, 10857.0], [72.7, 10857.0], [72.8, 10857.0], [72.9, 10857.0], [73.0, 11005.0], [73.1, 11005.0], [73.2, 11005.0], [73.3, 11005.0], [73.4, 11005.0], [73.5, 11005.0], [73.6, 11005.0], [73.7, 11005.0], [73.8, 11005.0], [73.9, 11005.0], [74.0, 11202.0], [74.1, 11202.0], [74.2, 11202.0], [74.3, 11202.0], [74.4, 11202.0], [74.5, 11202.0], [74.6, 11202.0], [74.7, 11202.0], [74.8, 11202.0], [74.9, 11202.0], [75.0, 11289.0], [75.1, 11289.0], [75.2, 11289.0], [75.3, 11289.0], [75.4, 11289.0], [75.5, 11289.0], [75.6, 11289.0], [75.7, 11289.0], [75.8, 11289.0], [75.9, 11289.0], [76.0, 11413.0], [76.1, 11413.0], [76.2, 11413.0], [76.3, 11413.0], [76.4, 11413.0], [76.5, 11413.0], [76.6, 11413.0], [76.7, 11413.0], [76.8, 11413.0], [76.9, 11413.0], [77.0, 11605.0], [77.1, 11605.0], [77.2, 11605.0], [77.3, 11605.0], [77.4, 11605.0], [77.5, 11605.0], [77.6, 11605.0], [77.7, 11605.0], [77.8, 11605.0], [77.9, 11605.0], [78.0, 11729.0], [78.1, 11729.0], [78.2, 11729.0], [78.3, 11729.0], [78.4, 11729.0], [78.5, 11729.0], [78.6, 11729.0], [78.7, 11729.0], [78.8, 11729.0], [78.9, 11729.0], [79.0, 11856.0], [79.1, 11856.0], [79.2, 11856.0], [79.3, 11856.0], [79.4, 11856.0], [79.5, 11856.0], [79.6, 11856.0], [79.7, 11856.0], [79.8, 11856.0], [79.9, 11856.0], [80.0, 11958.0], [80.1, 11958.0], [80.2, 11958.0], [80.3, 11958.0], [80.4, 11958.0], [80.5, 11958.0], [80.6, 11958.0], [80.7, 11958.0], [80.8, 11958.0], [80.9, 11958.0], [81.0, 12115.0], [81.1, 12115.0], [81.2, 12115.0], [81.3, 12115.0], [81.4, 12115.0], [81.5, 12115.0], [81.6, 12115.0], [81.7, 12115.0], [81.8, 12115.0], [81.9, 12115.0], [82.0, 12282.0], [82.1, 12282.0], [82.2, 12282.0], [82.3, 12282.0], [82.4, 12282.0], [82.5, 12282.0], [82.6, 12282.0], [82.7, 12282.0], [82.8, 12282.0], [82.9, 12282.0], [83.0, 12370.0], [83.1, 12370.0], [83.2, 12370.0], [83.3, 12370.0], [83.4, 12370.0], [83.5, 12370.0], [83.6, 12370.0], [83.7, 12370.0], [83.8, 12370.0], [83.9, 12370.0], [84.0, 12540.0], [84.1, 12540.0], [84.2, 12540.0], [84.3, 12540.0], [84.4, 12540.0], [84.5, 12540.0], [84.6, 12540.0], [84.7, 12540.0], [84.8, 12540.0], [84.9, 12540.0], [85.0, 12648.0], [85.1, 12648.0], [85.2, 12648.0], [85.3, 12648.0], [85.4, 12648.0], [85.5, 12648.0], [85.6, 12648.0], [85.7, 12648.0], [85.8, 12648.0], [85.9, 12648.0], [86.0, 12798.0], [86.1, 12798.0], [86.2, 12798.0], [86.3, 12798.0], [86.4, 12798.0], [86.5, 12798.0], [86.6, 12798.0], [86.7, 12798.0], [86.8, 12798.0], [86.9, 12798.0], [87.0, 12900.0], [87.1, 12900.0], [87.2, 12900.0], [87.3, 12900.0], [87.4, 12900.0], [87.5, 12900.0], [87.6, 12900.0], [87.7, 12900.0], [87.8, 12900.0], [87.9, 12900.0], [88.0, 13026.0], [88.1, 13026.0], [88.2, 13026.0], [88.3, 13026.0], [88.4, 13026.0], [88.5, 13026.0], [88.6, 13026.0], [88.7, 13026.0], [88.8, 13026.0], [88.9, 13026.0], [89.0, 13156.0], [89.1, 13156.0], [89.2, 13156.0], [89.3, 13156.0], [89.4, 13156.0], [89.5, 13156.0], [89.6, 13156.0], [89.7, 13156.0], [89.8, 13156.0], [89.9, 13156.0], [90.0, 13299.0], [90.1, 13299.0], [90.2, 13299.0], [90.3, 13299.0], [90.4, 13299.0], [90.5, 13299.0], [90.6, 13299.0], [90.7, 13299.0], [90.8, 13299.0], [90.9, 13299.0], [91.0, 13477.0], [91.1, 13477.0], [91.2, 13477.0], [91.3, 13477.0], [91.4, 13477.0], [91.5, 13477.0], [91.6, 13477.0], [91.7, 13477.0], [91.8, 13477.0], [91.9, 13477.0], [92.0, 13611.0], [92.1, 13611.0], [92.2, 13611.0], [92.3, 13611.0], [92.4, 13611.0], [92.5, 13611.0], [92.6, 13611.0], [92.7, 13611.0], [92.8, 13611.0], [92.9, 13611.0], [93.0, 13724.0], [93.1, 13724.0], [93.2, 13724.0], [93.3, 13724.0], [93.4, 13724.0], [93.5, 13724.0], [93.6, 13724.0], [93.7, 13724.0], [93.8, 13724.0], [93.9, 13724.0], [94.0, 13869.0], [94.1, 13869.0], [94.2, 13869.0], [94.3, 13869.0], [94.4, 13869.0], [94.5, 13869.0], [94.6, 13869.0], [94.7, 13869.0], [94.8, 13869.0], [94.9, 13869.0], [95.0, 14097.0], [95.1, 14097.0], [95.2, 14097.0], [95.3, 14097.0], [95.4, 14097.0], [95.5, 14097.0], [95.6, 14097.0], [95.7, 14097.0], [95.8, 14097.0], [95.9, 14097.0], [96.0, 14342.0], [96.1, 14342.0], [96.2, 14342.0], [96.3, 14342.0], [96.4, 14342.0], [96.5, 14342.0], [96.6, 14342.0], [96.7, 14342.0], [96.8, 14342.0], [96.9, 14342.0], [97.0, 14453.0], [97.1, 14453.0], [97.2, 14453.0], [97.3, 14453.0], [97.4, 14453.0], [97.5, 14453.0], [97.6, 14453.0], [97.7, 14453.0], [97.8, 14453.0], [97.9, 14453.0], [98.0, 14592.0], [98.1, 14592.0], [98.2, 14592.0], [98.3, 14592.0], [98.4, 14592.0], [98.5, 14592.0], [98.6, 14592.0], [98.7, 14592.0], [98.8, 14592.0], [98.9, 14592.0], [99.0, 14775.0], [99.1, 14775.0], [99.2, 14775.0], [99.3, 14775.0], [99.4, 14775.0], [99.5, 14775.0], [99.6, 14775.0], [99.7, 14775.0], [99.8, 14775.0], [99.9, 14775.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[0.0, 151.0], [0.1, 151.0], [0.2, 151.0], [0.3, 151.0], [0.4, 151.0], [0.5, 151.0], [0.6, 151.0], [0.7, 151.0], [0.8, 151.0], [0.9, 151.0], [1.0, 152.0], [1.1, 152.0], [1.2, 152.0], [1.3, 152.0], [1.4, 152.0], [1.5, 152.0], [1.6, 152.0], [1.7, 152.0], [1.8, 152.0], [1.9, 152.0], [2.0, 153.0], [2.1, 153.0], [2.2, 153.0], [2.3, 153.0], [2.4, 153.0], [2.5, 153.0], [2.6, 153.0], [2.7, 153.0], [2.8, 153.0], [2.9, 153.0], [3.0, 154.0], [3.1, 154.0], [3.2, 154.0], [3.3, 154.0], [3.4, 154.0], [3.5, 154.0], [3.6, 154.0], [3.7, 154.0], [3.8, 154.0], [3.9, 154.0], [4.0, 156.0], [4.1, 156.0], [4.2, 156.0], [4.3, 156.0], [4.4, 156.0], [4.5, 156.0], [4.6, 156.0], [4.7, 156.0], [4.8, 156.0], [4.9, 156.0], [5.0, 157.0], [5.1, 157.0], [5.2, 157.0], [5.3, 157.0], [5.4, 157.0], [5.5, 157.0], [5.6, 157.0], [5.7, 157.0], [5.8, 157.0], [5.9, 157.0], [6.0, 163.0], [6.1, 163.0], [6.2, 163.0], [6.3, 163.0], [6.4, 163.0], [6.5, 163.0], [6.6, 163.0], [6.7, 163.0], [6.8, 163.0], [6.9, 163.0], [7.0, 167.0], [7.1, 167.0], [7.2, 167.0], [7.3, 167.0], [7.4, 167.0], [7.5, 167.0], [7.6, 167.0], [7.7, 167.0], [7.8, 167.0], [7.9, 167.0], [8.0, 169.0], [8.1, 169.0], [8.2, 169.0], [8.3, 169.0], [8.4, 169.0], [8.5, 169.0], [8.6, 169.0], [8.7, 169.0], [8.8, 169.0], [8.9, 169.0], [9.0, 171.0], [9.1, 171.0], [9.2, 171.0], [9.3, 171.0], [9.4, 171.0], [9.5, 171.0], [9.6, 171.0], [9.7, 171.0], [9.8, 171.0], [9.9, 171.0], [10.0, 172.0], [10.1, 172.0], [10.2, 172.0], [10.3, 172.0], [10.4, 172.0], [10.5, 172.0], [10.6, 172.0], [10.7, 172.0], [10.8, 172.0], [10.9, 172.0], [11.0, 173.0], [11.1, 173.0], [11.2, 173.0], [11.3, 173.0], [11.4, 173.0], [11.5, 173.0], [11.6, 173.0], [11.7, 173.0], [11.8, 173.0], [11.9, 173.0], [12.0, 174.0], [12.1, 174.0], [12.2, 174.0], [12.3, 174.0], [12.4, 174.0], [12.5, 174.0], [12.6, 174.0], [12.7, 174.0], [12.8, 174.0], [12.9, 174.0], [13.0, 175.0], [13.1, 175.0], [13.2, 175.0], [13.3, 175.0], [13.4, 175.0], [13.5, 175.0], [13.6, 175.0], [13.7, 175.0], [13.8, 175.0], [13.9, 175.0], [14.0, 175.0], [14.1, 175.0], [14.2, 175.0], [14.3, 175.0], [14.4, 175.0], [14.5, 175.0], [14.6, 175.0], [14.7, 175.0], [14.8, 175.0], [14.9, 175.0], [15.0, 176.0], [15.1, 176.0], [15.2, 176.0], [15.3, 176.0], [15.4, 176.0], [15.5, 176.0], [15.6, 176.0], [15.7, 176.0], [15.8, 176.0], [15.9, 176.0], [16.0, 176.0], [16.1, 176.0], [16.2, 176.0], [16.3, 176.0], [16.4, 176.0], [16.5, 176.0], [16.6, 176.0], [16.7, 176.0], [16.8, 176.0], [16.9, 176.0], [17.0, 179.0], [17.1, 179.0], [17.2, 179.0], [17.3, 179.0], [17.4, 179.0], [17.5, 179.0], [17.6, 179.0], [17.7, 179.0], [17.8, 179.0], [17.9, 179.0], [18.0, 180.0], [18.1, 180.0], [18.2, 180.0], [18.3, 180.0], [18.4, 180.0], [18.5, 180.0], [18.6, 180.0], [18.7, 180.0], [18.8, 180.0], [18.9, 180.0], [19.0, 185.0], [19.1, 185.0], [19.2, 185.0], [19.3, 185.0], [19.4, 185.0], [19.5, 185.0], [19.6, 185.0], [19.7, 185.0], [19.8, 185.0], [19.9, 185.0], [20.0, 185.0], [20.1, 185.0], [20.2, 185.0], [20.3, 185.0], [20.4, 185.0], [20.5, 185.0], [20.6, 185.0], [20.7, 185.0], [20.8, 185.0], [20.9, 185.0], [21.0, 190.0], [21.1, 190.0], [21.2, 190.0], [21.3, 190.0], [21.4, 190.0], [21.5, 190.0], [21.6, 190.0], [21.7, 190.0], [21.8, 190.0], [21.9, 190.0], [22.0, 190.0], [22.1, 190.0], [22.2, 190.0], [22.3, 190.0], [22.4, 190.0], [22.5, 190.0], [22.6, 190.0], [22.7, 190.0], [22.8, 190.0], [22.9, 190.0], [23.0, 190.0], [23.1, 190.0], [23.2, 190.0], [23.3, 190.0], [23.4, 190.0], [23.5, 190.0], [23.6, 190.0], [23.7, 190.0], [23.8, 190.0], [23.9, 190.0], [24.0, 194.0], [24.1, 194.0], [24.2, 194.0], [24.3, 194.0], [24.4, 194.0], [24.5, 194.0], [24.6, 194.0], [24.7, 194.0], [24.8, 194.0], [24.9, 194.0], [25.0, 196.0], [25.1, 196.0], [25.2, 196.0], [25.3, 196.0], [25.4, 196.0], [25.5, 196.0], [25.6, 196.0], [25.7, 196.0], [25.8, 196.0], [25.9, 196.0], [26.0, 196.0], [26.1, 196.0], [26.2, 196.0], [26.3, 196.0], [26.4, 196.0], [26.5, 196.0], [26.6, 196.0], [26.7, 196.0], [26.8, 196.0], [26.9, 196.0], [27.0, 197.0], [27.1, 197.0], [27.2, 197.0], [27.3, 197.0], [27.4, 197.0], [27.5, 197.0], [27.6, 197.0], [27.7, 197.0], [27.8, 197.0], [27.9, 197.0], [28.0, 198.0], [28.1, 198.0], [28.2, 198.0], [28.3, 198.0], [28.4, 198.0], [28.5, 198.0], [28.6, 198.0], [28.7, 198.0], [28.8, 198.0], [28.9, 198.0], [29.0, 200.0], [29.1, 200.0], [29.2, 200.0], [29.3, 200.0], [29.4, 200.0], [29.5, 200.0], [29.6, 200.0], [29.7, 200.0], [29.8, 200.0], [29.9, 200.0], [30.0, 202.0], [30.1, 202.0], [30.2, 202.0], [30.3, 202.0], [30.4, 202.0], [30.5, 202.0], [30.6, 202.0], [30.7, 202.0], [30.8, 202.0], [30.9, 202.0], [31.0, 203.0], [31.1, 203.0], [31.2, 203.0], [31.3, 203.0], [31.4, 203.0], [31.5, 203.0], [31.6, 203.0], [31.7, 203.0], [31.8, 203.0], [31.9, 203.0], [32.0, 208.0], [32.1, 208.0], [32.2, 208.0], [32.3, 208.0], [32.4, 208.0], [32.5, 208.0], [32.6, 208.0], [32.7, 208.0], [32.8, 208.0], [32.9, 208.0], [33.0, 209.0], [33.1, 209.0], [33.2, 209.0], [33.3, 209.0], [33.4, 209.0], [33.5, 209.0], [33.6, 209.0], [33.7, 209.0], [33.8, 209.0], [33.9, 209.0], [34.0, 212.0], [34.1, 212.0], [34.2, 212.0], [34.3, 212.0], [34.4, 212.0], [34.5, 212.0], [34.6, 212.0], [34.7, 212.0], [34.8, 212.0], [34.9, 212.0], [35.0, 212.0], [35.1, 212.0], [35.2, 212.0], [35.3, 212.0], [35.4, 212.0], [35.5, 212.0], [35.6, 212.0], [35.7, 212.0], [35.8, 212.0], [35.9, 212.0], [36.0, 213.0], [36.1, 213.0], [36.2, 213.0], [36.3, 213.0], [36.4, 213.0], [36.5, 213.0], [36.6, 213.0], [36.7, 213.0], [36.8, 213.0], [36.9, 213.0], [37.0, 214.0], [37.1, 214.0], [37.2, 214.0], [37.3, 214.0], [37.4, 214.0], [37.5, 214.0], [37.6, 214.0], [37.7, 214.0], [37.8, 214.0], [37.9, 214.0], [38.0, 215.0], [38.1, 215.0], [38.2, 215.0], [38.3, 215.0], [38.4, 215.0], [38.5, 215.0], [38.6, 215.0], [38.7, 215.0], [38.8, 215.0], [38.9, 215.0], [39.0, 219.0], [39.1, 219.0], [39.2, 219.0], [39.3, 219.0], [39.4, 219.0], [39.5, 219.0], [39.6, 219.0], [39.7, 219.0], [39.8, 219.0], [39.9, 219.0], [40.0, 219.0], [40.1, 219.0], [40.2, 219.0], [40.3, 219.0], [40.4, 219.0], [40.5, 219.0], [40.6, 219.0], [40.7, 219.0], [40.8, 219.0], [40.9, 219.0], [41.0, 220.0], [41.1, 220.0], [41.2, 220.0], [41.3, 220.0], [41.4, 220.0], [41.5, 220.0], [41.6, 220.0], [41.7, 220.0], [41.8, 220.0], [41.9, 220.0], [42.0, 228.0], [42.1, 228.0], [42.2, 228.0], [42.3, 228.0], [42.4, 228.0], [42.5, 228.0], [42.6, 228.0], [42.7, 228.0], [42.8, 228.0], [42.9, 228.0], [43.0, 233.0], [43.1, 233.0], [43.2, 233.0], [43.3, 233.0], [43.4, 233.0], [43.5, 233.0], [43.6, 233.0], [43.7, 233.0], [43.8, 233.0], [43.9, 233.0], [44.0, 238.0], [44.1, 238.0], [44.2, 238.0], [44.3, 238.0], [44.4, 238.0], [44.5, 238.0], [44.6, 238.0], [44.7, 238.0], [44.8, 238.0], [44.9, 238.0], [45.0, 246.0], [45.1, 246.0], [45.2, 246.0], [45.3, 246.0], [45.4, 246.0], [45.5, 246.0], [45.6, 246.0], [45.7, 246.0], [45.8, 246.0], [45.9, 246.0], [46.0, 249.0], [46.1, 249.0], [46.2, 249.0], [46.3, 249.0], [46.4, 249.0], [46.5, 249.0], [46.6, 249.0], [46.7, 249.0], [46.8, 249.0], [46.9, 249.0], [47.0, 250.0], [47.1, 250.0], [47.2, 250.0], [47.3, 250.0], [47.4, 250.0], [47.5, 250.0], [47.6, 250.0], [47.7, 250.0], [47.8, 250.0], [47.9, 250.0], [48.0, 251.0], [48.1, 251.0], [48.2, 251.0], [48.3, 251.0], [48.4, 251.0], [48.5, 251.0], [48.6, 251.0], [48.7, 251.0], [48.8, 251.0], [48.9, 251.0], [49.0, 255.0], [49.1, 255.0], [49.2, 255.0], [49.3, 255.0], [49.4, 255.0], [49.5, 255.0], [49.6, 255.0], [49.7, 255.0], [49.8, 255.0], [49.9, 255.0], [50.0, 257.0], [50.1, 257.0], [50.2, 257.0], [50.3, 257.0], [50.4, 257.0], [50.5, 257.0], [50.6, 257.0], [50.7, 257.0], [50.8, 257.0], [50.9, 257.0], [51.0, 264.0], [51.1, 264.0], [51.2, 264.0], [51.3, 264.0], [51.4, 264.0], [51.5, 264.0], [51.6, 264.0], [51.7, 264.0], [51.8, 264.0], [51.9, 264.0], [52.0, 269.0], [52.1, 269.0], [52.2, 269.0], [52.3, 269.0], [52.4, 269.0], [52.5, 269.0], [52.6, 269.0], [52.7, 269.0], [52.8, 269.0], [52.9, 269.0], [53.0, 270.0], [53.1, 270.0], [53.2, 270.0], [53.3, 270.0], [53.4, 270.0], [53.5, 270.0], [53.6, 270.0], [53.7, 270.0], [53.8, 270.0], [53.9, 270.0], [54.0, 271.0], [54.1, 271.0], [54.2, 271.0], [54.3, 271.0], [54.4, 271.0], [54.5, 271.0], [54.6, 271.0], [54.7, 271.0], [54.8, 271.0], [54.9, 271.0], [55.0, 274.0], [55.1, 274.0], [55.2, 274.0], [55.3, 274.0], [55.4, 274.0], [55.5, 274.0], [55.6, 274.0], [55.7, 274.0], [55.8, 274.0], [55.9, 274.0], [56.0, 275.0], [56.1, 275.0], [56.2, 275.0], [56.3, 275.0], [56.4, 275.0], [56.5, 275.0], [56.6, 275.0], [56.7, 275.0], [56.8, 275.0], [56.9, 275.0], [57.0, 280.0], [57.1, 280.0], [57.2, 280.0], [57.3, 280.0], [57.4, 280.0], [57.5, 280.0], [57.6, 280.0], [57.7, 280.0], [57.8, 280.0], [57.9, 280.0], [58.0, 284.0], [58.1, 284.0], [58.2, 284.0], [58.3, 284.0], [58.4, 284.0], [58.5, 284.0], [58.6, 284.0], [58.7, 284.0], [58.8, 284.0], [58.9, 284.0], [59.0, 287.0], [59.1, 287.0], [59.2, 287.0], [59.3, 287.0], [59.4, 287.0], [59.5, 287.0], [59.6, 287.0], [59.7, 287.0], [59.8, 287.0], [59.9, 287.0], [60.0, 290.0], [60.1, 290.0], [60.2, 290.0], [60.3, 290.0], [60.4, 290.0], [60.5, 290.0], [60.6, 290.0], [60.7, 290.0], [60.8, 290.0], [60.9, 290.0], [61.0, 291.0], [61.1, 291.0], [61.2, 291.0], [61.3, 291.0], [61.4, 291.0], [61.5, 291.0], [61.6, 291.0], [61.7, 291.0], [61.8, 291.0], [61.9, 291.0], [62.0, 292.0], [62.1, 292.0], [62.2, 292.0], [62.3, 292.0], [62.4, 292.0], [62.5, 292.0], [62.6, 292.0], [62.7, 292.0], [62.8, 292.0], [62.9, 292.0], [63.0, 295.0], [63.1, 295.0], [63.2, 295.0], [63.3, 295.0], [63.4, 295.0], [63.5, 295.0], [63.6, 295.0], [63.7, 295.0], [63.8, 295.0], [63.9, 295.0], [64.0, 295.0], [64.1, 295.0], [64.2, 295.0], [64.3, 295.0], [64.4, 295.0], [64.5, 295.0], [64.6, 295.0], [64.7, 295.0], [64.8, 295.0], [64.9, 295.0], [65.0, 299.0], [65.1, 299.0], [65.2, 299.0], [65.3, 299.0], [65.4, 299.0], [65.5, 299.0], [65.6, 299.0], [65.7, 299.0], [65.8, 299.0], [65.9, 299.0], [66.0, 307.0], [66.1, 307.0], [66.2, 307.0], [66.3, 307.0], [66.4, 307.0], [66.5, 307.0], [66.6, 307.0], [66.7, 307.0], [66.8, 307.0], [66.9, 307.0], [67.0, 311.0], [67.1, 311.0], [67.2, 311.0], [67.3, 311.0], [67.4, 311.0], [67.5, 311.0], [67.6, 311.0], [67.7, 311.0], [67.8, 311.0], [67.9, 311.0], [68.0, 322.0], [68.1, 322.0], [68.2, 322.0], [68.3, 322.0], [68.4, 322.0], [68.5, 322.0], [68.6, 322.0], [68.7, 322.0], [68.8, 322.0], [68.9, 322.0], [69.0, 325.0], [69.1, 325.0], [69.2, 325.0], [69.3, 325.0], [69.4, 325.0], [69.5, 325.0], [69.6, 325.0], [69.7, 325.0], [69.8, 325.0], [69.9, 325.0], [70.0, 326.0], [70.1, 326.0], [70.2, 326.0], [70.3, 326.0], [70.4, 326.0], [70.5, 326.0], [70.6, 326.0], [70.7, 326.0], [70.8, 326.0], [70.9, 326.0], [71.0, 330.0], [71.1, 330.0], [71.2, 330.0], [71.3, 330.0], [71.4, 330.0], [71.5, 330.0], [71.6, 330.0], [71.7, 330.0], [71.8, 330.0], [71.9, 330.0], [72.0, 339.0], [72.1, 339.0], [72.2, 339.0], [72.3, 339.0], [72.4, 339.0], [72.5, 339.0], [72.6, 339.0], [72.7, 339.0], [72.8, 339.0], [72.9, 339.0], [73.0, 340.0], [73.1, 340.0], [73.2, 340.0], [73.3, 340.0], [73.4, 340.0], [73.5, 340.0], [73.6, 340.0], [73.7, 340.0], [73.8, 340.0], [73.9, 340.0], [74.0, 345.0], [74.1, 345.0], [74.2, 345.0], [74.3, 345.0], [74.4, 345.0], [74.5, 345.0], [74.6, 345.0], [74.7, 345.0], [74.8, 345.0], [74.9, 345.0], [75.0, 346.0], [75.1, 346.0], [75.2, 346.0], [75.3, 346.0], [75.4, 346.0], [75.5, 346.0], [75.6, 346.0], [75.7, 346.0], [75.8, 346.0], [75.9, 346.0], [76.0, 356.0], [76.1, 356.0], [76.2, 356.0], [76.3, 356.0], [76.4, 356.0], [76.5, 356.0], [76.6, 356.0], [76.7, 356.0], [76.8, 356.0], [76.9, 356.0], [77.0, 363.0], [77.1, 363.0], [77.2, 363.0], [77.3, 363.0], [77.4, 363.0], [77.5, 363.0], [77.6, 363.0], [77.7, 363.0], [77.8, 363.0], [77.9, 363.0], [78.0, 369.0], [78.1, 369.0], [78.2, 369.0], [78.3, 369.0], [78.4, 369.0], [78.5, 369.0], [78.6, 369.0], [78.7, 369.0], [78.8, 369.0], [78.9, 369.0], [79.0, 380.0], [79.1, 380.0], [79.2, 380.0], [79.3, 380.0], [79.4, 380.0], [79.5, 380.0], [79.6, 380.0], [79.7, 380.0], [79.8, 380.0], [79.9, 380.0], [80.0, 390.0], [80.1, 390.0], [80.2, 390.0], [80.3, 390.0], [80.4, 390.0], [80.5, 390.0], [80.6, 390.0], [80.7, 390.0], [80.8, 390.0], [80.9, 390.0], [81.0, 406.0], [81.1, 406.0], [81.2, 406.0], [81.3, 406.0], [81.4, 406.0], [81.5, 406.0], [81.6, 406.0], [81.7, 406.0], [81.8, 406.0], [81.9, 406.0], [82.0, 422.0], [82.1, 422.0], [82.2, 422.0], [82.3, 422.0], [82.4, 422.0], [82.5, 422.0], [82.6, 422.0], [82.7, 422.0], [82.8, 422.0], [82.9, 422.0], [83.0, 428.0], [83.1, 428.0], [83.2, 428.0], [83.3, 428.0], [83.4, 428.0], [83.5, 428.0], [83.6, 428.0], [83.7, 428.0], [83.8, 428.0], [83.9, 428.0], [84.0, 458.0], [84.1, 458.0], [84.2, 458.0], [84.3, 458.0], [84.4, 458.0], [84.5, 458.0], [84.6, 458.0], [84.7, 458.0], [84.8, 458.0], [84.9, 458.0], [85.0, 469.0], [85.1, 469.0], [85.2, 469.0], [85.3, 469.0], [85.4, 469.0], [85.5, 469.0], [85.6, 469.0], [85.7, 469.0], [85.8, 469.0], [85.9, 469.0], [86.0, 470.0], [86.1, 470.0], [86.2, 470.0], [86.3, 470.0], [86.4, 470.0], [86.5, 470.0], [86.6, 470.0], [86.7, 470.0], [86.8, 470.0], [86.9, 470.0], [87.0, 474.0], [87.1, 474.0], [87.2, 474.0], [87.3, 474.0], [87.4, 474.0], [87.5, 474.0], [87.6, 474.0], [87.7, 474.0], [87.8, 474.0], [87.9, 474.0], [88.0, 483.0], [88.1, 483.0], [88.2, 483.0], [88.3, 483.0], [88.4, 483.0], [88.5, 483.0], [88.6, 483.0], [88.7, 483.0], [88.8, 483.0], [88.9, 483.0], [89.0, 493.0], [89.1, 493.0], [89.2, 493.0], [89.3, 493.0], [89.4, 493.0], [89.5, 493.0], [89.6, 493.0], [89.7, 493.0], [89.8, 493.0], [89.9, 493.0], [90.0, 499.0], [90.1, 499.0], [90.2, 499.0], [90.3, 499.0], [90.4, 499.0], [90.5, 499.0], [90.6, 499.0], [90.7, 499.0], [90.8, 499.0], [90.9, 499.0], [91.0, 514.0], [91.1, 514.0], [91.2, 514.0], [91.3, 514.0], [91.4, 514.0], [91.5, 514.0], [91.6, 514.0], [91.7, 514.0], [91.8, 514.0], [91.9, 514.0], [92.0, 518.0], [92.1, 518.0], [92.2, 518.0], [92.3, 518.0], [92.4, 518.0], [92.5, 518.0], [92.6, 518.0], [92.7, 518.0], [92.8, 518.0], [92.9, 518.0], [93.0, 530.0], [93.1, 530.0], [93.2, 530.0], [93.3, 530.0], [93.4, 530.0], [93.5, 530.0], [93.6, 530.0], [93.7, 530.0], [93.8, 530.0], [93.9, 530.0], [94.0, 537.0], [94.1, 537.0], [94.2, 537.0], [94.3, 537.0], [94.4, 537.0], [94.5, 537.0], [94.6, 537.0], [94.7, 537.0], [94.8, 537.0], [94.9, 537.0], [95.0, 551.0], [95.1, 551.0], [95.2, 551.0], [95.3, 551.0], [95.4, 551.0], [95.5, 551.0], [95.6, 551.0], [95.7, 551.0], [95.8, 551.0], [95.9, 551.0], [96.0, 558.0], [96.1, 558.0], [96.2, 558.0], [96.3, 558.0], [96.4, 558.0], [96.5, 558.0], [96.6, 558.0], [96.7, 558.0], [96.8, 558.0], [96.9, 558.0], [97.0, 563.0], [97.1, 563.0], [97.2, 563.0], [97.3, 563.0], [97.4, 563.0], [97.5, 563.0], [97.6, 563.0], [97.7, 563.0], [97.8, 563.0], [97.9, 563.0], [98.0, 727.0], [98.1, 727.0], [98.2, 727.0], [98.3, 727.0], [98.4, 727.0], [98.5, 727.0], [98.6, 727.0], [98.7, 727.0], [98.8, 727.0], [98.9, 727.0], [99.0, 803.0], [99.1, 803.0], [99.2, 803.0], [99.3, 803.0], [99.4, 803.0], [99.5, 803.0], [99.6, 803.0], [99.7, 803.0], [99.8, 803.0], [99.9, 803.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[0.0, 112.0], [0.1, 112.0], [0.2, 112.0], [0.3, 112.0], [0.4, 112.0], [0.5, 112.0], [0.6, 112.0], [0.7, 112.0], [0.8, 112.0], [0.9, 112.0], [1.0, 139.0], [1.1, 139.0], [1.2, 139.0], [1.3, 139.0], [1.4, 139.0], [1.5, 139.0], [1.6, 139.0], [1.7, 139.0], [1.8, 139.0], [1.9, 139.0], [2.0, 140.0], [2.1, 140.0], [2.2, 140.0], [2.3, 140.0], [2.4, 140.0], [2.5, 140.0], [2.6, 140.0], [2.7, 140.0], [2.8, 140.0], [2.9, 140.0], [3.0, 144.0], [3.1, 144.0], [3.2, 144.0], [3.3, 144.0], [3.4, 144.0], [3.5, 144.0], [3.6, 144.0], [3.7, 144.0], [3.8, 144.0], [3.9, 144.0], [4.0, 151.0], [4.1, 151.0], [4.2, 151.0], [4.3, 151.0], [4.4, 151.0], [4.5, 151.0], [4.6, 151.0], [4.7, 151.0], [4.8, 151.0], [4.9, 151.0], [5.0, 153.0], [5.1, 153.0], [5.2, 153.0], [5.3, 153.0], [5.4, 153.0], [5.5, 153.0], [5.6, 153.0], [5.7, 153.0], [5.8, 153.0], [5.9, 153.0], [6.0, 153.0], [6.1, 153.0], [6.2, 153.0], [6.3, 153.0], [6.4, 153.0], [6.5, 153.0], [6.6, 153.0], [6.7, 153.0], [6.8, 153.0], [6.9, 153.0], [7.0, 153.0], [7.1, 153.0], [7.2, 153.0], [7.3, 153.0], [7.4, 153.0], [7.5, 153.0], [7.6, 153.0], [7.7, 153.0], [7.8, 153.0], [7.9, 153.0], [8.0, 154.0], [8.1, 154.0], [8.2, 154.0], [8.3, 154.0], [8.4, 154.0], [8.5, 154.0], [8.6, 154.0], [8.7, 154.0], [8.8, 154.0], [8.9, 154.0], [9.0, 156.0], [9.1, 156.0], [9.2, 156.0], [9.3, 156.0], [9.4, 156.0], [9.5, 156.0], [9.6, 156.0], [9.7, 156.0], [9.8, 156.0], [9.9, 156.0], [10.0, 169.0], [10.1, 169.0], [10.2, 169.0], [10.3, 169.0], [10.4, 169.0], [10.5, 169.0], [10.6, 169.0], [10.7, 169.0], [10.8, 169.0], [10.9, 169.0], [11.0, 172.0], [11.1, 172.0], [11.2, 172.0], [11.3, 172.0], [11.4, 172.0], [11.5, 172.0], [11.6, 172.0], [11.7, 172.0], [11.8, 172.0], [11.9, 172.0], [12.0, 173.0], [12.1, 173.0], [12.2, 173.0], [12.3, 173.0], [12.4, 173.0], [12.5, 173.0], [12.6, 173.0], [12.7, 173.0], [12.8, 173.0], [12.9, 173.0], [13.0, 180.0], [13.1, 180.0], [13.2, 180.0], [13.3, 180.0], [13.4, 180.0], [13.5, 180.0], [13.6, 180.0], [13.7, 180.0], [13.8, 180.0], [13.9, 180.0], [14.0, 183.0], [14.1, 183.0], [14.2, 183.0], [14.3, 183.0], [14.4, 183.0], [14.5, 183.0], [14.6, 183.0], [14.7, 183.0], [14.8, 183.0], [14.9, 183.0], [15.0, 184.0], [15.1, 184.0], [15.2, 184.0], [15.3, 184.0], [15.4, 184.0], [15.5, 184.0], [15.6, 184.0], [15.7, 184.0], [15.8, 184.0], [15.9, 184.0], [16.0, 184.0], [16.1, 184.0], [16.2, 184.0], [16.3, 184.0], [16.4, 184.0], [16.5, 184.0], [16.6, 184.0], [16.7, 184.0], [16.8, 184.0], [16.9, 184.0], [17.0, 184.0], [17.1, 184.0], [17.2, 184.0], [17.3, 184.0], [17.4, 184.0], [17.5, 184.0], [17.6, 184.0], [17.7, 184.0], [17.8, 184.0], [17.9, 184.0], [18.0, 185.0], [18.1, 185.0], [18.2, 185.0], [18.3, 185.0], [18.4, 185.0], [18.5, 185.0], [18.6, 185.0], [18.7, 185.0], [18.8, 185.0], [18.9, 185.0], [19.0, 186.0], [19.1, 186.0], [19.2, 186.0], [19.3, 186.0], [19.4, 186.0], [19.5, 186.0], [19.6, 186.0], [19.7, 186.0], [19.8, 186.0], [19.9, 186.0], [20.0, 190.0], [20.1, 190.0], [20.2, 190.0], [20.3, 190.0], [20.4, 190.0], [20.5, 190.0], [20.6, 190.0], [20.7, 190.0], [20.8, 190.0], [20.9, 190.0], [21.0, 191.0], [21.1, 191.0], [21.2, 191.0], [21.3, 191.0], [21.4, 191.0], [21.5, 191.0], [21.6, 191.0], [21.7, 191.0], [21.8, 191.0], [21.9, 191.0], [22.0, 194.0], [22.1, 194.0], [22.2, 194.0], [22.3, 194.0], [22.4, 194.0], [22.5, 194.0], [22.6, 194.0], [22.7, 194.0], [22.8, 194.0], [22.9, 194.0], [23.0, 194.0], [23.1, 194.0], [23.2, 194.0], [23.3, 194.0], [23.4, 194.0], [23.5, 194.0], [23.6, 194.0], [23.7, 194.0], [23.8, 194.0], [23.9, 194.0], [24.0, 195.0], [24.1, 195.0], [24.2, 195.0], [24.3, 195.0], [24.4, 195.0], [24.5, 195.0], [24.6, 195.0], [24.7, 195.0], [24.8, 195.0], [24.9, 195.0], [25.0, 195.0], [25.1, 195.0], [25.2, 195.0], [25.3, 195.0], [25.4, 195.0], [25.5, 195.0], [25.6, 195.0], [25.7, 195.0], [25.8, 195.0], [25.9, 195.0], [26.0, 201.0], [26.1, 201.0], [26.2, 201.0], [26.3, 201.0], [26.4, 201.0], [26.5, 201.0], [26.6, 201.0], [26.7, 201.0], [26.8, 201.0], [26.9, 201.0], [27.0, 204.0], [27.1, 204.0], [27.2, 204.0], [27.3, 204.0], [27.4, 204.0], [27.5, 204.0], [27.6, 204.0], [27.7, 204.0], [27.8, 204.0], [27.9, 204.0], [28.0, 208.0], [28.1, 208.0], [28.2, 208.0], [28.3, 208.0], [28.4, 208.0], [28.5, 208.0], [28.6, 208.0], [28.7, 208.0], [28.8, 208.0], [28.9, 208.0], [29.0, 211.0], [29.1, 211.0], [29.2, 211.0], [29.3, 211.0], [29.4, 211.0], [29.5, 211.0], [29.6, 211.0], [29.7, 211.0], [29.8, 211.0], [29.9, 211.0], [30.0, 216.0], [30.1, 216.0], [30.2, 216.0], [30.3, 216.0], [30.4, 216.0], [30.5, 216.0], [30.6, 216.0], [30.7, 216.0], [30.8, 216.0], [30.9, 216.0], [31.0, 218.0], [31.1, 218.0], [31.2, 218.0], [31.3, 218.0], [31.4, 218.0], [31.5, 218.0], [31.6, 218.0], [31.7, 218.0], [31.8, 218.0], [31.9, 218.0], [32.0, 224.0], [32.1, 224.0], [32.2, 224.0], [32.3, 224.0], [32.4, 224.0], [32.5, 224.0], [32.6, 224.0], [32.7, 224.0], [32.8, 224.0], [32.9, 224.0], [33.0, 226.0], [33.1, 226.0], [33.2, 226.0], [33.3, 226.0], [33.4, 226.0], [33.5, 226.0], [33.6, 226.0], [33.7, 226.0], [33.8, 226.0], [33.9, 226.0], [34.0, 227.0], [34.1, 227.0], [34.2, 227.0], [34.3, 227.0], [34.4, 227.0], [34.5, 227.0], [34.6, 227.0], [34.7, 227.0], [34.8, 227.0], [34.9, 227.0], [35.0, 229.0], [35.1, 229.0], [35.2, 229.0], [35.3, 229.0], [35.4, 229.0], [35.5, 229.0], [35.6, 229.0], [35.7, 229.0], [35.8, 229.0], [35.9, 229.0], [36.0, 230.0], [36.1, 230.0], [36.2, 230.0], [36.3, 230.0], [36.4, 230.0], [36.5, 230.0], [36.6, 230.0], [36.7, 230.0], [36.8, 230.0], [36.9, 230.0], [37.0, 232.0], [37.1, 232.0], [37.2, 232.0], [37.3, 232.0], [37.4, 232.0], [37.5, 232.0], [37.6, 232.0], [37.7, 232.0], [37.8, 232.0], [37.9, 232.0], [38.0, 237.0], [38.1, 237.0], [38.2, 237.0], [38.3, 237.0], [38.4, 237.0], [38.5, 237.0], [38.6, 237.0], [38.7, 237.0], [38.8, 237.0], [38.9, 237.0], [39.0, 237.0], [39.1, 237.0], [39.2, 237.0], [39.3, 237.0], [39.4, 237.0], [39.5, 237.0], [39.6, 237.0], [39.7, 237.0], [39.8, 237.0], [39.9, 237.0], [40.0, 239.0], [40.1, 239.0], [40.2, 239.0], [40.3, 239.0], [40.4, 239.0], [40.5, 239.0], [40.6, 239.0], [40.7, 239.0], [40.8, 239.0], [40.9, 239.0], [41.0, 240.0], [41.1, 240.0], [41.2, 240.0], [41.3, 240.0], [41.4, 240.0], [41.5, 240.0], [41.6, 240.0], [41.7, 240.0], [41.8, 240.0], [41.9, 240.0], [42.0, 248.0], [42.1, 248.0], [42.2, 248.0], [42.3, 248.0], [42.4, 248.0], [42.5, 248.0], [42.6, 248.0], [42.7, 248.0], [42.8, 248.0], [42.9, 248.0], [43.0, 248.0], [43.1, 248.0], [43.2, 248.0], [43.3, 248.0], [43.4, 248.0], [43.5, 248.0], [43.6, 248.0], [43.7, 248.0], [43.8, 248.0], [43.9, 248.0], [44.0, 254.0], [44.1, 254.0], [44.2, 254.0], [44.3, 254.0], [44.4, 254.0], [44.5, 254.0], [44.6, 254.0], [44.7, 254.0], [44.8, 254.0], [44.9, 254.0], [45.0, 255.0], [45.1, 255.0], [45.2, 255.0], [45.3, 255.0], [45.4, 255.0], [45.5, 255.0], [45.6, 255.0], [45.7, 255.0], [45.8, 255.0], [45.9, 255.0], [46.0, 259.0], [46.1, 259.0], [46.2, 259.0], [46.3, 259.0], [46.4, 259.0], [46.5, 259.0], [46.6, 259.0], [46.7, 259.0], [46.8, 259.0], [46.9, 259.0], [47.0, 261.0], [47.1, 261.0], [47.2, 261.0], [47.3, 261.0], [47.4, 261.0], [47.5, 261.0], [47.6, 261.0], [47.7, 261.0], [47.8, 261.0], [47.9, 261.0], [48.0, 268.0], [48.1, 268.0], [48.2, 268.0], [48.3, 268.0], [48.4, 268.0], [48.5, 268.0], [48.6, 268.0], [48.7, 268.0], [48.8, 268.0], [48.9, 268.0], [49.0, 269.0], [49.1, 269.0], [49.2, 269.0], [49.3, 269.0], [49.4, 269.0], [49.5, 269.0], [49.6, 269.0], [49.7, 269.0], [49.8, 269.0], [49.9, 269.0], [50.0, 269.0], [50.1, 269.0], [50.2, 269.0], [50.3, 269.0], [50.4, 269.0], [50.5, 269.0], [50.6, 269.0], [50.7, 269.0], [50.8, 269.0], [50.9, 269.0], [51.0, 269.0], [51.1, 269.0], [51.2, 269.0], [51.3, 269.0], [51.4, 269.0], [51.5, 269.0], [51.6, 269.0], [51.7, 269.0], [51.8, 269.0], [51.9, 269.0], [52.0, 269.0], [52.1, 269.0], [52.2, 269.0], [52.3, 269.0], [52.4, 269.0], [52.5, 269.0], [52.6, 269.0], [52.7, 269.0], [52.8, 269.0], [52.9, 269.0], [53.0, 272.0], [53.1, 272.0], [53.2, 272.0], [53.3, 272.0], [53.4, 272.0], [53.5, 272.0], [53.6, 272.0], [53.7, 272.0], [53.8, 272.0], [53.9, 272.0], [54.0, 276.0], [54.1, 276.0], [54.2, 276.0], [54.3, 276.0], [54.4, 276.0], [54.5, 276.0], [54.6, 276.0], [54.7, 276.0], [54.8, 276.0], [54.9, 276.0], [55.0, 278.0], [55.1, 278.0], [55.2, 278.0], [55.3, 278.0], [55.4, 278.0], [55.5, 278.0], [55.6, 278.0], [55.7, 278.0], [55.8, 278.0], [55.9, 278.0], [56.0, 280.0], [56.1, 280.0], [56.2, 280.0], [56.3, 280.0], [56.4, 280.0], [56.5, 280.0], [56.6, 280.0], [56.7, 280.0], [56.8, 280.0], [56.9, 280.0], [57.0, 283.0], [57.1, 283.0], [57.2, 283.0], [57.3, 283.0], [57.4, 283.0], [57.5, 283.0], [57.6, 283.0], [57.7, 283.0], [57.8, 283.0], [57.9, 283.0], [58.0, 284.0], [58.1, 284.0], [58.2, 284.0], [58.3, 284.0], [58.4, 284.0], [58.5, 284.0], [58.6, 284.0], [58.7, 284.0], [58.8, 284.0], [58.9, 284.0], [59.0, 285.0], [59.1, 285.0], [59.2, 285.0], [59.3, 285.0], [59.4, 285.0], [59.5, 285.0], [59.6, 285.0], [59.7, 285.0], [59.8, 285.0], [59.9, 285.0], [60.0, 288.0], [60.1, 288.0], [60.2, 288.0], [60.3, 288.0], [60.4, 288.0], [60.5, 288.0], [60.6, 288.0], [60.7, 288.0], [60.8, 288.0], [60.9, 288.0], [61.0, 290.0], [61.1, 290.0], [61.2, 290.0], [61.3, 290.0], [61.4, 290.0], [61.5, 290.0], [61.6, 290.0], [61.7, 290.0], [61.8, 290.0], [61.9, 290.0], [62.0, 294.0], [62.1, 294.0], [62.2, 294.0], [62.3, 294.0], [62.4, 294.0], [62.5, 294.0], [62.6, 294.0], [62.7, 294.0], [62.8, 294.0], [62.9, 294.0], [63.0, 298.0], [63.1, 298.0], [63.2, 298.0], [63.3, 298.0], [63.4, 298.0], [63.5, 298.0], [63.6, 298.0], [63.7, 298.0], [63.8, 298.0], [63.9, 298.0], [64.0, 302.0], [64.1, 302.0], [64.2, 302.0], [64.3, 302.0], [64.4, 302.0], [64.5, 302.0], [64.6, 302.0], [64.7, 302.0], [64.8, 302.0], [64.9, 302.0], [65.0, 304.0], [65.1, 304.0], [65.2, 304.0], [65.3, 304.0], [65.4, 304.0], [65.5, 304.0], [65.6, 304.0], [65.7, 304.0], [65.8, 304.0], [65.9, 304.0], [66.0, 310.0], [66.1, 310.0], [66.2, 310.0], [66.3, 310.0], [66.4, 310.0], [66.5, 310.0], [66.6, 310.0], [66.7, 310.0], [66.8, 310.0], [66.9, 310.0], [67.0, 323.0], [67.1, 323.0], [67.2, 323.0], [67.3, 323.0], [67.4, 323.0], [67.5, 323.0], [67.6, 323.0], [67.7, 323.0], [67.8, 323.0], [67.9, 323.0], [68.0, 324.0], [68.1, 324.0], [68.2, 324.0], [68.3, 324.0], [68.4, 324.0], [68.5, 324.0], [68.6, 324.0], [68.7, 324.0], [68.8, 324.0], [68.9, 324.0], [69.0, 325.0], [69.1, 325.0], [69.2, 325.0], [69.3, 325.0], [69.4, 325.0], [69.5, 325.0], [69.6, 325.0], [69.7, 325.0], [69.8, 325.0], [69.9, 325.0], [70.0, 326.0], [70.1, 326.0], [70.2, 326.0], [70.3, 326.0], [70.4, 326.0], [70.5, 326.0], [70.6, 326.0], [70.7, 326.0], [70.8, 326.0], [70.9, 326.0], [71.0, 330.0], [71.1, 330.0], [71.2, 330.0], [71.3, 330.0], [71.4, 330.0], [71.5, 330.0], [71.6, 330.0], [71.7, 330.0], [71.8, 330.0], [71.9, 330.0], [72.0, 336.0], [72.1, 336.0], [72.2, 336.0], [72.3, 336.0], [72.4, 336.0], [72.5, 336.0], [72.6, 336.0], [72.7, 336.0], [72.8, 336.0], [72.9, 336.0], [73.0, 338.0], [73.1, 338.0], [73.2, 338.0], [73.3, 338.0], [73.4, 338.0], [73.5, 338.0], [73.6, 338.0], [73.7, 338.0], [73.8, 338.0], [73.9, 338.0], [74.0, 344.0], [74.1, 344.0], [74.2, 344.0], [74.3, 344.0], [74.4, 344.0], [74.5, 344.0], [74.6, 344.0], [74.7, 344.0], [74.8, 344.0], [74.9, 344.0], [75.0, 344.0], [75.1, 344.0], [75.2, 344.0], [75.3, 344.0], [75.4, 344.0], [75.5, 344.0], [75.6, 344.0], [75.7, 344.0], [75.8, 344.0], [75.9, 344.0], [76.0, 345.0], [76.1, 345.0], [76.2, 345.0], [76.3, 345.0], [76.4, 345.0], [76.5, 345.0], [76.6, 345.0], [76.7, 345.0], [76.8, 345.0], [76.9, 345.0], [77.0, 355.0], [77.1, 355.0], [77.2, 355.0], [77.3, 355.0], [77.4, 355.0], [77.5, 355.0], [77.6, 355.0], [77.7, 355.0], [77.8, 355.0], [77.9, 355.0], [78.0, 372.0], [78.1, 372.0], [78.2, 372.0], [78.3, 372.0], [78.4, 372.0], [78.5, 372.0], [78.6, 372.0], [78.7, 372.0], [78.8, 372.0], [78.9, 372.0], [79.0, 379.0], [79.1, 379.0], [79.2, 379.0], [79.3, 379.0], [79.4, 379.0], [79.5, 379.0], [79.6, 379.0], [79.7, 379.0], [79.8, 379.0], [79.9, 379.0], [80.0, 379.0], [80.1, 379.0], [80.2, 379.0], [80.3, 379.0], [80.4, 379.0], [80.5, 379.0], [80.6, 379.0], [80.7, 379.0], [80.8, 379.0], [80.9, 379.0], [81.0, 379.0], [81.1, 379.0], [81.2, 379.0], [81.3, 379.0], [81.4, 379.0], [81.5, 379.0], [81.6, 379.0], [81.7, 379.0], [81.8, 379.0], [81.9, 379.0], [82.0, 396.0], [82.1, 396.0], [82.2, 396.0], [82.3, 396.0], [82.4, 396.0], [82.5, 396.0], [82.6, 396.0], [82.7, 396.0], [82.8, 396.0], [82.9, 396.0], [83.0, 396.0], [83.1, 396.0], [83.2, 396.0], [83.3, 396.0], [83.4, 396.0], [83.5, 396.0], [83.6, 396.0], [83.7, 396.0], [83.8, 396.0], [83.9, 396.0], [84.0, 421.0], [84.1, 421.0], [84.2, 421.0], [84.3, 421.0], [84.4, 421.0], [84.5, 421.0], [84.6, 421.0], [84.7, 421.0], [84.8, 421.0], [84.9, 421.0], [85.0, 427.0], [85.1, 427.0], [85.2, 427.0], [85.3, 427.0], [85.4, 427.0], [85.5, 427.0], [85.6, 427.0], [85.7, 427.0], [85.8, 427.0], [85.9, 427.0], [86.0, 435.0], [86.1, 435.0], [86.2, 435.0], [86.3, 435.0], [86.4, 435.0], [86.5, 435.0], [86.6, 435.0], [86.7, 435.0], [86.8, 435.0], [86.9, 435.0], [87.0, 437.0], [87.1, 437.0], [87.2, 437.0], [87.3, 437.0], [87.4, 437.0], [87.5, 437.0], [87.6, 437.0], [87.7, 437.0], [87.8, 437.0], [87.9, 437.0], [88.0, 438.0], [88.1, 438.0], [88.2, 438.0], [88.3, 438.0], [88.4, 438.0], [88.5, 438.0], [88.6, 438.0], [88.7, 438.0], [88.8, 438.0], [88.9, 438.0], [89.0, 451.0], [89.1, 451.0], [89.2, 451.0], [89.3, 451.0], [89.4, 451.0], [89.5, 451.0], [89.6, 451.0], [89.7, 451.0], [89.8, 451.0], [89.9, 451.0], [90.0, 458.0], [90.1, 458.0], [90.2, 458.0], [90.3, 458.0], [90.4, 458.0], [90.5, 458.0], [90.6, 458.0], [90.7, 458.0], [90.8, 458.0], [90.9, 458.0], [91.0, 478.0], [91.1, 478.0], [91.2, 478.0], [91.3, 478.0], [91.4, 478.0], [91.5, 478.0], [91.6, 478.0], [91.7, 478.0], [91.8, 478.0], [91.9, 478.0], [92.0, 498.0], [92.1, 498.0], [92.2, 498.0], [92.3, 498.0], [92.4, 498.0], [92.5, 498.0], [92.6, 498.0], [92.7, 498.0], [92.8, 498.0], [92.9, 498.0], [93.0, 501.0], [93.1, 501.0], [93.2, 501.0], [93.3, 501.0], [93.4, 501.0], [93.5, 501.0], [93.6, 501.0], [93.7, 501.0], [93.8, 501.0], [93.9, 501.0], [94.0, 515.0], [94.1, 515.0], [94.2, 515.0], [94.3, 515.0], [94.4, 515.0], [94.5, 515.0], [94.6, 515.0], [94.7, 515.0], [94.8, 515.0], [94.9, 515.0], [95.0, 535.0], [95.1, 535.0], [95.2, 535.0], [95.3, 535.0], [95.4, 535.0], [95.5, 535.0], [95.6, 535.0], [95.7, 535.0], [95.8, 535.0], [95.9, 535.0], [96.0, 550.0], [96.1, 550.0], [96.2, 550.0], [96.3, 550.0], [96.4, 550.0], [96.5, 550.0], [96.6, 550.0], [96.7, 550.0], [96.8, 550.0], [96.9, 550.0], [97.0, 581.0], [97.1, 581.0], [97.2, 581.0], [97.3, 581.0], [97.4, 581.0], [97.5, 581.0], [97.6, 581.0], [97.7, 581.0], [97.8, 581.0], [97.9, 581.0], [98.0, 604.0], [98.1, 604.0], [98.2, 604.0], [98.3, 604.0], [98.4, 604.0], [98.5, 604.0], [98.6, 604.0], [98.7, 604.0], [98.8, 604.0], [98.9, 604.0], [99.0, 853.0], [99.1, 853.0], [99.2, 853.0], [99.3, 853.0], [99.4, 853.0], [99.5, 853.0], [99.6, 853.0], [99.7, 853.0], [99.8, 853.0], [99.9, 853.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 38.0, "series": [{"data": [[700.0, 1.0], [900.0, 1.0], [1000.0, 1.0], [1100.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 1.0], [3200.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4300.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [4900.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [6000.0, 1.0], [6200.0, 2.0], [6400.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7500.0, 2.0], [7700.0, 1.0], [7800.0, 1.0], [8000.0, 2.0], [8100.0, 1.0], [8200.0, 1.0], [8400.0, 1.0], [8500.0, 1.0], [8700.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [9000.0, 1.0], [9200.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [9800.0, 1.0], [9900.0, 1.0], [10000.0, 1.0], [10200.0, 1.0], [10300.0, 1.0], [10500.0, 1.0], [10600.0, 1.0], [10700.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11200.0, 2.0], [11400.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12100.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [12700.0, 1.0], [12900.0, 1.0], [13000.0, 1.0], [13100.0, 1.0], [13200.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [13700.0, 1.0], [13800.0, 1.0], [14000.0, 1.0], [14300.0, 1.0], [14400.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[300.0, 15.0], [700.0, 1.0], [200.0, 37.0], [100.0, 29.0], [400.0, 10.0], [800.0, 1.0], [500.0, 7.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[300.0, 20.0], [600.0, 1.0], [200.0, 38.0], [100.0, 26.0], [400.0, 9.0], [800.0, 1.0], [500.0, 5.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 185.0, "series": [{"data": [[0.0, 185.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 22.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 93.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 51.73333333333331, "minX": 1.69851396E12, "maxY": 51.73333333333331, "series": [{"data": [[1.69851396E12, 51.73333333333331]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851396E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.0, "maxY": 14775.0, "series": [{"data": [[4.0, 14775.0], [5.0, 14592.0], [6.0, 14453.0], [7.0, 14342.0], [8.0, 14097.0], [9.0, 13869.0], [10.0, 13667.5], [11.0, 13477.0], [12.0, 13299.0], [13.0, 13156.0], [14.0, 13026.0], [15.0, 12900.0], [16.0, 12798.0], [17.0, 12648.0], [19.0, 12455.0], [20.0, 12282.0], [21.0, 12115.0], [22.0, 11958.0], [23.0, 11856.0], [24.0, 11729.0], [26.0, 11509.0], [27.0, 11289.0], [28.0, 11202.0], [29.0, 11005.0], [30.0, 10857.0], [31.0, 10740.0], [33.0, 10586.0], [35.0, 10299.5], [37.0, 9974.0], [36.0, 10093.0], [39.0, 9706.0], [38.0, 9845.0], [41.0, 9559.0], [43.0, 9336.0], [45.0, 9088.0], [44.0, 9226.0], [47.0, 8973.0], [49.0, 8864.0], [51.0, 8758.0], [53.0, 8473.0], [55.0, 8128.75], [57.0, 7729.0], [56.0, 7869.0], [58.0, 400.0], [59.0, 7599.0], [61.0, 7437.0], [60.0, 7517.0], [63.0, 6999.0], [62.0, 7113.0], [67.0, 6220.0], [66.0, 6344.0], [65.0, 6552.0], [64.0, 6733.0], [71.0, 5194.0], [70.0, 5507.5], [69.0, 5752.0], [68.0, 6071.0], [72.0, 2730.0], [75.0, 4418.0], [74.0, 4548.0], [73.0, 4705.0], [78.0, 4116.5], [76.0, 4303.0], [83.0, 3474.0], [82.0, 3822.0], [80.0, 3946.0], [87.0, 3035.0], [86.0, 3179.0], [85.0, 3285.0], [89.0, 2118.3333333333335], [91.0, 2422.0], [90.0, 2579.0], [95.0, 1529.0], [94.0, 1843.0], [92.0, 2249.0], [99.0, 927.0], [98.0, 1130.5], [97.0, 1404.0]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[52.97000000000003, 7718.080000000002]], "isOverall": false, "label": "Express Js Http Call-Aggregated", "isController": false}, {"data": [[2.0, 196.0], [4.0, 283.0], [5.0, 287.0], [6.0, 340.0], [7.0, 346.0], [9.0, 239.5], [10.0, 246.0], [11.0, 196.0], [12.0, 219.0], [13.0, 194.0], [14.0, 152.0], [15.0, 173.0], [16.0, 190.0], [17.0, 171.0], [19.0, 211.5], [20.0, 202.0], [21.0, 185.0], [22.0, 151.0], [23.0, 167.0], [24.0, 198.0], [25.0, 280.0], [26.0, 176.0], [27.0, 249.0], [28.0, 203.0], [29.0, 153.0], [30.0, 156.0], [31.0, 180.0], [33.0, 169.0], [32.0, 200.0], [35.0, 175.0], [34.0, 214.0], [37.0, 157.0], [36.0, 212.0], [38.0, 212.5], [41.0, 212.0], [42.0, 272.0], [45.0, 216.5], [47.0, 264.0], [50.0, 403.3333333333333], [53.0, 558.0], [52.0, 622.5], [55.0, 491.0], [54.0, 563.0], [56.0, 445.5], [59.0, 514.0], [61.0, 503.5], [60.0, 493.0], [62.0, 803.0], [66.0, 530.0], [65.0, 384.5], [64.0, 424.0], [71.0, 339.0], [70.0, 356.0], [69.0, 359.5], [68.0, 474.0], [75.0, 154.0], [74.0, 179.0], [73.0, 197.0], [72.0, 284.0], [79.0, 244.5], [78.0, 163.0], [77.0, 190.0], [76.0, 175.0], [83.0, 190.0], [82.0, 326.0], [81.0, 228.0], [86.0, 250.0], [85.0, 176.0], [84.0, 257.0], [90.0, 380.0], [89.0, 318.5], [88.0, 233.0], [94.0, 253.5], [95.0, 292.0], [93.0, 275.0], [92.0, 320.0], [99.0, 270.0], [98.0, 255.0], [97.0, 239.0]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[51.72999999999996, 293.35000000000014]], "isOverall": false, "label": "Gin Gonic Http Call-Aggregated", "isController": false}, {"data": [[2.0, 139.0], [3.0, 204.0], [4.0, 269.0], [5.0, 280.0], [6.0, 304.0], [7.0, 344.0], [8.0, 345.0], [9.0, 355.0], [10.0, 259.0], [11.0, 237.0], [12.0, 186.0], [13.0, 218.0], [14.0, 156.0], [15.0, 185.0], [16.0, 153.0], [17.0, 190.0], [18.0, 184.0], [19.0, 310.0], [20.0, 195.0], [21.0, 272.0], [22.0, 180.0], [23.0, 144.0], [24.0, 173.0], [25.0, 255.0], [26.0, 284.0], [27.0, 191.0], [28.0, 290.0], [29.0, 151.0], [30.0, 140.0], [31.0, 195.0], [33.0, 216.0], [32.0, 211.0], [35.0, 237.0], [34.0, 194.0], [37.0, 153.0], [36.0, 208.0], [39.0, 269.0], [38.0, 169.0], [41.0, 194.0], [40.0, 184.0], [43.0, 325.0], [42.0, 338.0], [45.0, 435.0], [44.0, 285.0], [47.0, 269.0], [46.0, 248.0], [49.0, 248.0], [48.0, 240.0], [51.0, 396.0], [50.0, 268.0], [53.0, 853.0], [52.0, 550.0], [55.0, 438.0], [54.0, 379.0], [57.0, 336.0], [56.0, 379.0], [59.0, 515.0], [58.0, 437.0], [61.0, 478.0], [60.0, 581.0], [63.0, 604.0], [62.0, 396.0], [67.0, 535.0], [66.0, 451.0], [65.0, 344.0], [64.0, 458.0], [71.0, 498.0], [70.0, 427.0], [69.0, 421.0], [68.0, 501.0], [75.0, 154.0], [74.0, 183.0], [73.0, 278.0], [72.0, 298.0], [79.0, 254.0], [78.0, 172.0], [77.0, 184.0], [76.0, 153.0], [83.0, 330.0], [82.0, 372.0], [81.0, 229.0], [80.0, 283.0], [87.0, 269.0], [86.0, 224.0], [85.0, 232.0], [84.0, 226.0], [91.0, 324.0], [90.0, 379.0], [89.0, 288.0], [88.0, 227.0], [95.0, 302.0], [94.0, 294.0], [93.0, 276.0], [92.0, 326.0], [99.0, 323.0], [98.0, 230.0], [97.0, 261.0], [96.0, 201.0], [100.0, 239.0], [1.0, 112.0]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}, {"data": [[50.5, 290.7900000000001]], "isOverall": false, "label": "Spring Boot Http Call-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 685.0, "minX": 1.69851396E12, "maxY": 9002615.0, "series": [{"data": [[1.69851396E12, 9002615.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69851396E12, 685.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851396E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 290.7900000000001, "minX": 1.69851396E12, "maxY": 7718.080000000002, "series": [{"data": [[1.69851396E12, 7718.080000000002]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.69851396E12, 293.35000000000014]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.69851396E12, 290.7900000000001]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851396E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 184.95999999999998, "minX": 1.69851396E12, "maxY": 7604.099999999999, "series": [{"data": [[1.69851396E12, 7604.099999999999]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.69851396E12, 184.95999999999998]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.69851396E12, 186.03]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851396E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.53, "minX": 1.69851396E12, "maxY": 9.859999999999994, "series": [{"data": [[1.69851396E12, 9.859999999999994]], "isOverall": false, "label": "Express Js Http Call", "isController": false}, {"data": [[1.69851396E12, 1.53]], "isOverall": false, "label": "Gin Gonic Http Call", "isController": false}, {"data": [[1.69851396E12, 1.6000000000000003]], "isOverall": false, "label": "Spring Boot Http Call", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851396E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.69851396E12, "maxY": 14775.0, "series": [{"data": [[1.69851396E12, 14775.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69851396E12, 10610.000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69851396E12, 14451.890000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69851396E12, 12642.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69851396E12, 112.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69851396E12, 344.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851396E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 206.0, "minX": 10.0, "maxY": 496.0, "series": [{"data": [[16.0, 487.5], [19.0, 294.0], [10.0, 361.5], [20.0, 496.0], [21.0, 213.5], [22.0, 206.0], [24.0, 278.5], [13.0, 428.0], [28.0, 307.5], [15.0, 305.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 133.0, "minX": 10.0, "maxY": 342.0, "series": [{"data": [[16.0, 296.0], [19.0, 176.0], [10.0, 265.5], [20.0, 342.0], [21.0, 137.0], [22.0, 133.0], [24.0, 191.5], [13.0, 253.0], [28.0, 221.0], [15.0, 175.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69851396E12, "maxY": 5.0, "series": [{"data": [[1.69851396E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851396E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69851396E12, "maxY": 5.0, "series": [{"data": [[1.69851396E12, 5.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69851396E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.69851396E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.69851396E12, 1.6666666666666667]], "isOverall": false, "label": "Gin Gonic Http Call-success", "isController": false}, {"data": [[1.69851396E12, 1.6666666666666667]], "isOverall": false, "label": "Spring Boot Http Call-success", "isController": false}, {"data": [[1.69851396E12, 1.6666666666666667]], "isOverall": false, "label": "Express Js Http Call-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851396E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.69851396E12, "maxY": 5.0, "series": [{"data": [[1.69851396E12, 5.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69851396E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

